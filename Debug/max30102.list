
max30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa8  08002fa8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa8  08002fa8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa8  08002fa8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003020  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003020  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d18  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000145e  00000000  00000000  00027db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  00029210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e8  00000000  00000000  00029a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012fd0  00000000  00000000  0002a278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076c8  00000000  00000000  0003d248  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006a62d  00000000  00000000  00044910  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aef3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025ec  00000000  00000000  000aefb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f14 	.word	0x08002f14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f14 	.word	0x08002f14

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b09c      	sub	sp, #112	; 0x70
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa79 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f845 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8d7 	bl	800030c <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f87d 	bl	800025c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8a9 	bl	80002b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, "Max30102\r\n", 11 , HAL_MAX_DELAY);
 8000166:	f04f 33ff 	mov.w	r3, #4294967295
 800016a:	220b      	movs	r2, #11
 800016c:	4919      	ldr	r1, [pc, #100]	; (80001d4 <main+0x88>)
 800016e:	481a      	ldr	r0, [pc, #104]	; (80001d8 <main+0x8c>)
 8000170:	f002 f8cf 	bl	8002312 <HAL_UART_Transmit>
  uint8_t partId = 0;
 8000174:	2300      	movs	r3, #0
 8000176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint8_t data = 0xFF;
 800017a:	23ff      	movs	r3, #255	; 0xff
 800017c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  HAL_I2C_Master_Transmit(&hi2c1, 0xAE, &data, 1, HAL_MAX_DELAY);
 8000180:	f107 0266 	add.w	r2, r7, #102	; 0x66
 8000184:	f04f 33ff 	mov.w	r3, #4294967295
 8000188:	9300      	str	r3, [sp, #0]
 800018a:	2301      	movs	r3, #1
 800018c:	21ae      	movs	r1, #174	; 0xae
 800018e:	4813      	ldr	r0, [pc, #76]	; (80001dc <main+0x90>)
 8000190:	f000 fe22 	bl	8000dd8 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, 0xAE, &partId, 1, HAL_MAX_DELAY);
 8000194:	f107 0267 	add.w	r2, r7, #103	; 0x67
 8000198:	f04f 33ff 	mov.w	r3, #4294967295
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2301      	movs	r3, #1
 80001a0:	21ae      	movs	r1, #174	; 0xae
 80001a2:	480e      	ldr	r0, [pc, #56]	; (80001dc <main+0x90>)
 80001a4:	f000 ff16 	bl	8000fd4 <HAL_I2C_Master_Receive>
  char buff[100] = {0};
 80001a8:	463b      	mov	r3, r7
 80001aa:	2264      	movs	r2, #100	; 0x64
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fa96 	bl	80026e0 <memset>
  sprintf(buff, "Part id %d\r\n", partId);
 80001b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80001b8:	461a      	mov	r2, r3
 80001ba:	463b      	mov	r3, r7
 80001bc:	4908      	ldr	r1, [pc, #32]	; (80001e0 <main+0x94>)
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fa96 	bl	80026f0 <siprintf>
  HAL_UART_Transmit(&huart1, buff, sizeof(buff) , HAL_MAX_DELAY);
 80001c4:	4639      	mov	r1, r7
 80001c6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ca:	2264      	movs	r2, #100	; 0x64
 80001cc:	4802      	ldr	r0, [pc, #8]	; (80001d8 <main+0x8c>)
 80001ce:	f002 f8a0 	bl	8002312 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d2:	e7fe      	b.n	80001d2 <main+0x86>
 80001d4:	08002f2c 	.word	0x08002f2c
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	20000098 	.word	0x20000098
 80001e0:	08002f38 	.word	0x08002f38

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b090      	sub	sp, #64	; 0x40
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	2228      	movs	r2, #40	; 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 fa74 	bl	80026e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000206:	2302      	movs	r3, #2
 8000208:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020e:	2310      	movs	r3, #16
 8000210:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000212:	2300      	movs	r3, #0
 8000214:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fc10 	bl	8001a40 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000226:	f000 f893 	bl	8000350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fe7c 	bl	8001f40 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800024e:	f000 f87f 	bl	8000350 <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	; 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <MX_I2C1_Init+0x50>)
 8000262:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <MX_I2C1_Init+0x54>)
 8000264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_I2C1_Init+0x50>)
 8000268:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_I2C1_Init+0x58>)
 800026a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_I2C1_Init+0x50>)
 800027a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800027e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <MX_I2C1_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_I2C1_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <MX_I2C1_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_I2C1_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <MX_I2C1_Init+0x50>)
 800029a:	f000 fc75 	bl	8000b88 <HAL_I2C_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002a4:	f000 f854 	bl	8000350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000098 	.word	0x20000098
 80002b0:	40005400 	.word	0x40005400
 80002b4:	000186a0 	.word	0x000186a0

080002b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002bc:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_USART1_UART_Init+0x4c>)
 80002be:	4a12      	ldr	r2, [pc, #72]	; (8000308 <MX_USART1_UART_Init+0x50>)
 80002c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <MX_USART1_UART_Init+0x4c>)
 80002c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_USART1_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_USART1_UART_Init+0x4c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <MX_USART1_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_USART1_UART_Init+0x4c>)
 80002de:	220c      	movs	r2, #12
 80002e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <MX_USART1_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_USART1_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <MX_USART1_UART_Init+0x4c>)
 80002f0:	f001 ffc2 	bl	8002278 <HAL_UART_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002fa:	f000 f829 	bl	8000350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200000ec 	.word	0x200000ec
 8000308:	40013800 	.word	0x40013800

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_GPIO_Init+0x40>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a0d      	ldr	r2, [pc, #52]	; (800034c <MX_GPIO_Init+0x40>)
 8000318:	f043 0304 	orr.w	r3, r3, #4
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_GPIO_Init+0x40>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_GPIO_Init+0x40>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a07      	ldr	r2, [pc, #28]	; (800034c <MX_GPIO_Init+0x40>)
 8000330:	f043 0308 	orr.w	r3, r3, #8
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <MX_GPIO_Init+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0308 	and.w	r3, r3, #8
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]

}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000

08000350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <HAL_MspInit+0x5c>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <HAL_MspInit+0x5c>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <HAL_MspInit+0x5c>)
 8000380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000384:	61d3      	str	r3, [r2, #28]
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_MspInit+0x5c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <HAL_MspInit+0x60>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <HAL_MspInit+0x60>)
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010000 	.word	0x40010000

080003c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a15      	ldr	r2, [pc, #84]	; (8000430 <HAL_I2C_MspInit+0x70>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d123      	bne.n	8000428 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <HAL_I2C_MspInit+0x74>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a13      	ldr	r2, [pc, #76]	; (8000434 <HAL_I2C_MspInit+0x74>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <HAL_I2C_MspInit+0x74>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003f8:	23c0      	movs	r3, #192	; 0xc0
 80003fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003fc:	2312      	movs	r3, #18
 80003fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000400:	2303      	movs	r3, #3
 8000402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	4619      	mov	r1, r3
 800040a:	480b      	ldr	r0, [pc, #44]	; (8000438 <HAL_I2C_MspInit+0x78>)
 800040c:	f000 fa62 	bl	80008d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <HAL_I2C_MspInit+0x74>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	4a07      	ldr	r2, [pc, #28]	; (8000434 <HAL_I2C_MspInit+0x74>)
 8000416:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800041a:	61d3      	str	r3, [r2, #28]
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <HAL_I2C_MspInit+0x74>)
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000428:	bf00      	nop
 800042a:	3720      	adds	r7, #32
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40005400 	.word	0x40005400
 8000434:	40021000 	.word	0x40021000
 8000438:	40010c00 	.word	0x40010c00

0800043c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <HAL_UART_MspInit+0x8c>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d131      	bne.n	80004c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <HAL_UART_MspInit+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a1a      	ldr	r2, [pc, #104]	; (80004cc <HAL_UART_MspInit+0x90>)
 8000462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <HAL_UART_MspInit+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <HAL_UART_MspInit+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a14      	ldr	r2, [pc, #80]	; (80004cc <HAL_UART_MspInit+0x90>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_UART_MspInit+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800048c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000490:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000492:	2302      	movs	r3, #2
 8000494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000496:	2303      	movs	r3, #3
 8000498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <HAL_UART_MspInit+0x94>)
 80004a2:	f000 fa17 	bl	80008d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	4805      	ldr	r0, [pc, #20]	; (80004d0 <HAL_UART_MspInit+0x94>)
 80004bc:	f000 fa0a 	bl	80008d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40013800 	.word	0x40013800
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <HardFault_Handler+0x4>

080004e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <MemManage_Handler+0x4>

080004ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <BusFault_Handler+0x4>

080004f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <UsageFault_Handler+0x4>

080004f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000520:	f000 f8d8 	bl	80006d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <_sbrk+0x5c>)
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <_sbrk+0x60>)
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <_sbrk+0x64>)
 8000546:	4a12      	ldr	r2, [pc, #72]	; (8000590 <_sbrk+0x68>)
 8000548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	429a      	cmp	r2, r3
 8000556:	d207      	bcs.n	8000568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000558:	f002 f898 	bl	800268c <__errno>
 800055c:	4602      	mov	r2, r0
 800055e:	230c      	movs	r3, #12
 8000560:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295
 8000566:	e009      	b.n	800057c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <_sbrk+0x64>)
 8000578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20005000 	.word	0x20005000
 8000588:	00000400 	.word	0x00000400
 800058c:	2000008c 	.word	0x2000008c
 8000590:	20000138 	.word	0x20000138

08000594 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <SystemInit+0x5c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <SystemInit+0x5c>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <SystemInit+0x5c>)
 80005a6:	685a      	ldr	r2, [r3, #4]
 80005a8:	4911      	ldr	r1, [pc, #68]	; (80005f0 <SystemInit+0x5c>)
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <SystemInit+0x60>)
 80005ac:	4013      	ands	r3, r2
 80005ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <SystemInit+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <SystemInit+0x5c>)
 80005b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <SystemInit+0x5c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	; (80005f0 <SystemInit+0x5c>)
 80005c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SystemInit+0x5c>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <SystemInit+0x5c>)
 80005d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <SystemInit+0x5c>)
 80005da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <SystemInit+0x64>)
 80005e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40021000 	.word	0x40021000
 80005f4:	f8ff0000 	.word	0xf8ff0000
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005fe:	e003      	b.n	8000608 <LoopCopyDataInit>

08000600 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000602:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000604:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000606:	3104      	adds	r1, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800060c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800060e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000610:	d3f6      	bcc.n	8000600 <CopyDataInit>
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000614:	e002      	b.n	800061c <LoopFillZerobss>

08000616 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000618:	f842 3b04 	str.w	r3, [r2], #4

0800061c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800061e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000620:	d3f9      	bcc.n	8000616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000622:	f7ff ffb7 	bl	8000594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000626:	f002 f837 	bl	8002698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062a:	f7ff fd8f 	bl	800014c <main>
  bx lr
 800062e:	4770      	bx	lr
  ldr r3, =_sidata
 8000630:	08002fb0 	.word	0x08002fb0
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000638:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800063c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000640:	20000134 	.word	0x20000134

08000644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_2_IRQHandler>
	...

08000648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_Init+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x28>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f907 	bl	800086c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 f808 	bl	8000674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000664:	f7ff fe7a 	bl	800035c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_InitTick+0x54>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_InitTick+0x58>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	fbb3 f3f1 	udiv	r3, r3, r1
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f911 	bl	80008ba <HAL_SYSTICK_Config>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e00e      	b.n	80006c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d80a      	bhi.n	80006be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a8:	2200      	movs	r2, #0
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f000 f8e7 	bl	8000882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_InitTick+0x5c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000004 	.word	0x20000004

080006d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_IncTick+0x1c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x20>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <HAL_IncTick+0x20>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000008 	.word	0x20000008
 80006f4:	2000012c 	.word	0x2000012c

080006f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return uwTick;
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <HAL_GetTick+0x10>)
 80006fe:	681b      	ldr	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	2000012c 	.word	0x2000012c

0800070c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073e:	4a04      	ldr	r2, [pc, #16]	; (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <__NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db0a      	blt.n	800079a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	490c      	ldr	r1, [pc, #48]	; (80007bc <__NVIC_SetPriority+0x4c>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000798:	e00a      	b.n	80007b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4908      	ldr	r1, [pc, #32]	; (80007c0 <__NVIC_SetPriority+0x50>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	3b04      	subs	r3, #4
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	761a      	strb	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f1c3 0307 	rsb	r3, r3, #7
 80007de:	2b04      	cmp	r3, #4
 80007e0:	bf28      	it	cs
 80007e2:	2304      	movcs	r3, #4
 80007e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3304      	adds	r3, #4
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	d902      	bls.n	80007f4 <NVIC_EncodePriority+0x30>
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3b03      	subs	r3, #3
 80007f2:	e000      	b.n	80007f6 <NVIC_EncodePriority+0x32>
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	f04f 32ff 	mov.w	r2, #4294967295
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43da      	mvns	r2, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	401a      	ands	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800080c:	f04f 31ff 	mov.w	r1, #4294967295
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	43d9      	mvns	r1, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800081c:	4313      	orrs	r3, r2
         );
}
 800081e:	4618      	mov	r0, r3
 8000820:	3724      	adds	r7, #36	; 0x24
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000838:	d301      	bcc.n	800083e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2301      	movs	r3, #1
 800083c:	e00f      	b.n	800085e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <SysTick_Config+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000846:	210f      	movs	r1, #15
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f7ff ff90 	bl	8000770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <SysTick_Config+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SysTick_Config+0x40>)
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff49 	bl	800070c <__NVIC_SetPriorityGrouping>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000894:	f7ff ff5e 	bl	8000754 <__NVIC_GetPriorityGrouping>
 8000898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	6978      	ldr	r0, [r7, #20]
 80008a0:	f7ff ff90 	bl	80007c4 <NVIC_EncodePriority>
 80008a4:	4602      	mov	r2, r0
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff5f 	bl	8000770 <__NVIC_SetPriority>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ffb0 	bl	8000828 <SysTick_Config>
 80008c8:	4603      	mov	r3, r0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b08b      	sub	sp, #44	; 0x2c
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008e6:	e127      	b.n	8000b38 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008e8:	2201      	movs	r2, #1
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	69fa      	ldr	r2, [r7, #28]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	429a      	cmp	r2, r3
 8000902:	f040 8116 	bne.w	8000b32 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b12      	cmp	r3, #18
 800090c:	d034      	beq.n	8000978 <HAL_GPIO_Init+0xa4>
 800090e:	2b12      	cmp	r3, #18
 8000910:	d80d      	bhi.n	800092e <HAL_GPIO_Init+0x5a>
 8000912:	2b02      	cmp	r3, #2
 8000914:	d02b      	beq.n	800096e <HAL_GPIO_Init+0x9a>
 8000916:	2b02      	cmp	r3, #2
 8000918:	d804      	bhi.n	8000924 <HAL_GPIO_Init+0x50>
 800091a:	2b00      	cmp	r3, #0
 800091c:	d031      	beq.n	8000982 <HAL_GPIO_Init+0xae>
 800091e:	2b01      	cmp	r3, #1
 8000920:	d01c      	beq.n	800095c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000922:	e048      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000924:	2b03      	cmp	r3, #3
 8000926:	d043      	beq.n	80009b0 <HAL_GPIO_Init+0xdc>
 8000928:	2b11      	cmp	r3, #17
 800092a:	d01b      	beq.n	8000964 <HAL_GPIO_Init+0x90>
          break;
 800092c:	e043      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800092e:	4a89      	ldr	r2, [pc, #548]	; (8000b54 <HAL_GPIO_Init+0x280>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d026      	beq.n	8000982 <HAL_GPIO_Init+0xae>
 8000934:	4a87      	ldr	r2, [pc, #540]	; (8000b54 <HAL_GPIO_Init+0x280>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d806      	bhi.n	8000948 <HAL_GPIO_Init+0x74>
 800093a:	4a87      	ldr	r2, [pc, #540]	; (8000b58 <HAL_GPIO_Init+0x284>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d020      	beq.n	8000982 <HAL_GPIO_Init+0xae>
 8000940:	4a86      	ldr	r2, [pc, #536]	; (8000b5c <HAL_GPIO_Init+0x288>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d01d      	beq.n	8000982 <HAL_GPIO_Init+0xae>
          break;
 8000946:	e036      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000948:	4a85      	ldr	r2, [pc, #532]	; (8000b60 <HAL_GPIO_Init+0x28c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d019      	beq.n	8000982 <HAL_GPIO_Init+0xae>
 800094e:	4a85      	ldr	r2, [pc, #532]	; (8000b64 <HAL_GPIO_Init+0x290>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d016      	beq.n	8000982 <HAL_GPIO_Init+0xae>
 8000954:	4a84      	ldr	r2, [pc, #528]	; (8000b68 <HAL_GPIO_Init+0x294>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d013      	beq.n	8000982 <HAL_GPIO_Init+0xae>
          break;
 800095a:	e02c      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e028      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	3304      	adds	r3, #4
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e023      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	3308      	adds	r3, #8
 8000974:	623b      	str	r3, [r7, #32]
          break;
 8000976:	e01e      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	330c      	adds	r3, #12
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e019      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800098a:	2304      	movs	r3, #4
 800098c:	623b      	str	r3, [r7, #32]
          break;
 800098e:	e012      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d105      	bne.n	80009a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000998:	2308      	movs	r3, #8
 800099a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	611a      	str	r2, [r3, #16]
          break;
 80009a2:	e008      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a4:	2308      	movs	r3, #8
 80009a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	615a      	str	r2, [r3, #20]
          break;
 80009ae:	e002      	b.n	80009b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
          break;
 80009b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	2bff      	cmp	r3, #255	; 0xff
 80009ba:	d801      	bhi.n	80009c0 <HAL_GPIO_Init+0xec>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	e001      	b.n	80009c4 <HAL_GPIO_Init+0xf0>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3304      	adds	r3, #4
 80009c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	2bff      	cmp	r3, #255	; 0xff
 80009ca:	d802      	bhi.n	80009d2 <HAL_GPIO_Init+0xfe>
 80009cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	e002      	b.n	80009d8 <HAL_GPIO_Init+0x104>
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	3b08      	subs	r3, #8
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	210f      	movs	r1, #15
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	401a      	ands	r2, r3
 80009ea:	6a39      	ldr	r1, [r7, #32]
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	431a      	orrs	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	f000 8096 	beq.w	8000b32 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <HAL_GPIO_Init+0x298>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a58      	ldr	r2, [pc, #352]	; (8000b6c <HAL_GPIO_Init+0x298>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b56      	ldr	r3, [pc, #344]	; (8000b6c <HAL_GPIO_Init+0x298>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a1e:	4a54      	ldr	r2, [pc, #336]	; (8000b70 <HAL_GPIO_Init+0x29c>)
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3302      	adds	r3, #2
 8000a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	220f      	movs	r2, #15
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a4b      	ldr	r2, [pc, #300]	; (8000b74 <HAL_GPIO_Init+0x2a0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d013      	beq.n	8000a72 <HAL_GPIO_Init+0x19e>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <HAL_GPIO_Init+0x2a4>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d00d      	beq.n	8000a6e <HAL_GPIO_Init+0x19a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a49      	ldr	r2, [pc, #292]	; (8000b7c <HAL_GPIO_Init+0x2a8>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d007      	beq.n	8000a6a <HAL_GPIO_Init+0x196>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <HAL_GPIO_Init+0x2ac>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d101      	bne.n	8000a66 <HAL_GPIO_Init+0x192>
 8000a62:	2303      	movs	r3, #3
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x1a0>
 8000a66:	2304      	movs	r3, #4
 8000a68:	e004      	b.n	8000a74 <HAL_GPIO_Init+0x1a0>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e002      	b.n	8000a74 <HAL_GPIO_Init+0x1a0>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_Init+0x1a0>
 8000a72:	2300      	movs	r3, #0
 8000a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a76:	f002 0203 	and.w	r2, r2, #3
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	4093      	lsls	r3, r2
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a84:	493a      	ldr	r1, [pc, #232]	; (8000b70 <HAL_GPIO_Init+0x29c>)
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4938      	ldr	r1, [pc, #224]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	600b      	str	r3, [r1, #0]
 8000aaa:	e006      	b.n	8000aba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aac:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	4933      	ldr	r1, [pc, #204]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	492e      	ldr	r1, [pc, #184]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	604b      	str	r3, [r1, #4]
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4929      	ldr	r1, [pc, #164]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d006      	beq.n	8000afc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	4924      	ldr	r1, [pc, #144]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	608b      	str	r3, [r1, #8]
 8000afa:	e006      	b.n	8000b0a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	491f      	ldr	r1, [pc, #124]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	491a      	ldr	r1, [pc, #104]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	60cb      	str	r3, [r1, #12]
 8000b22:	e006      	b.n	8000b32 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	4915      	ldr	r1, [pc, #84]	; (8000b84 <HAL_GPIO_Init+0x2b0>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b34:	3301      	adds	r3, #1
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f aed0 	bne.w	80008e8 <HAL_GPIO_Init+0x14>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	372c      	adds	r7, #44	; 0x2c
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	10210000 	.word	0x10210000
 8000b58:	10110000 	.word	0x10110000
 8000b5c:	10120000 	.word	0x10120000
 8000b60:	10310000 	.word	0x10310000
 8000b64:	10320000 	.word	0x10320000
 8000b68:	10220000 	.word	0x10220000
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010000 	.word	0x40010000
 8000b74:	40010800 	.word	0x40010800
 8000b78:	40010c00 	.word	0x40010c00
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	40011400 	.word	0x40011400
 8000b84:	40010400 	.word	0x40010400

08000b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e10f      	b.n	8000dba <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d106      	bne.n	8000bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fc06 	bl	80003c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2224      	movs	r2, #36	; 0x24
 8000bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0201 	bic.w	r2, r2, #1
 8000bca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bcc:	f001 fb0e 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8000bd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	4a7b      	ldr	r2, [pc, #492]	; (8000dc4 <HAL_I2C_Init+0x23c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d807      	bhi.n	8000bec <HAL_I2C_Init+0x64>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4a7a      	ldr	r2, [pc, #488]	; (8000dc8 <HAL_I2C_Init+0x240>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	bf94      	ite	ls
 8000be4:	2301      	movls	r3, #1
 8000be6:	2300      	movhi	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	e006      	b.n	8000bfa <HAL_I2C_Init+0x72>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4a77      	ldr	r2, [pc, #476]	; (8000dcc <HAL_I2C_Init+0x244>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	bf94      	ite	ls
 8000bf4:	2301      	movls	r3, #1
 8000bf6:	2300      	movhi	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e0db      	b.n	8000dba <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4a72      	ldr	r2, [pc, #456]	; (8000dd0 <HAL_I2C_Init+0x248>)
 8000c06:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0a:	0c9b      	lsrs	r3, r3, #18
 8000c0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68ba      	ldr	r2, [r7, #8]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	4a64      	ldr	r2, [pc, #400]	; (8000dc4 <HAL_I2C_Init+0x23c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d802      	bhi.n	8000c3c <HAL_I2C_Init+0xb4>
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	e009      	b.n	8000c50 <HAL_I2C_Init+0xc8>
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c42:	fb02 f303 	mul.w	r3, r2, r3
 8000c46:	4a63      	ldr	r2, [pc, #396]	; (8000dd4 <HAL_I2C_Init+0x24c>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	099b      	lsrs	r3, r3, #6
 8000c4e:	3301      	adds	r3, #1
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	430b      	orrs	r3, r1
 8000c56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	4956      	ldr	r1, [pc, #344]	; (8000dc4 <HAL_I2C_Init+0x23c>)
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d80d      	bhi.n	8000c8c <HAL_I2C_Init+0x104>
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	1e59      	subs	r1, r3, #1
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c7e:	3301      	adds	r3, #1
 8000c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	bf38      	it	cc
 8000c88:	2304      	movcc	r3, #4
 8000c8a:	e04f      	b.n	8000d2c <HAL_I2C_Init+0x1a4>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d111      	bne.n	8000cb8 <HAL_I2C_Init+0x130>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1e58      	subs	r0, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6859      	ldr	r1, [r3, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	440b      	add	r3, r1
 8000ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	bf0c      	ite	eq
 8000cb0:	2301      	moveq	r3, #1
 8000cb2:	2300      	movne	r3, #0
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	e012      	b.n	8000cde <HAL_I2C_Init+0x156>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1e58      	subs	r0, r3, #1
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6859      	ldr	r1, [r3, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	0099      	lsls	r1, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cce:	3301      	adds	r3, #1
 8000cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2301      	moveq	r3, #1
 8000cda:	2300      	movne	r3, #0
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_I2C_Init+0x15e>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e022      	b.n	8000d2c <HAL_I2C_Init+0x1a4>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10e      	bne.n	8000d0c <HAL_I2C_Init+0x184>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	1e58      	subs	r0, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6859      	ldr	r1, [r3, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	440b      	add	r3, r1
 8000cfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d00:	3301      	adds	r3, #1
 8000d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0a:	e00f      	b.n	8000d2c <HAL_I2C_Init+0x1a4>
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	1e58      	subs	r0, r3, #1
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6859      	ldr	r1, [r3, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	0099      	lsls	r1, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d22:	3301      	adds	r3, #1
 8000d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	6809      	ldr	r1, [r1, #0]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69da      	ldr	r2, [r3, #28]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a1b      	ldr	r3, [r3, #32]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	6911      	ldr	r1, [r2, #16]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68d2      	ldr	r2, [r2, #12]
 8000d66:	4311      	orrs	r1, r2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	695a      	ldr	r2, [r3, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2220      	movs	r2, #32
 8000da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	000186a0 	.word	0x000186a0
 8000dc8:	001e847f 	.word	0x001e847f
 8000dcc:	003d08ff 	.word	0x003d08ff
 8000dd0:	431bde83 	.word	0x431bde83
 8000dd4:	10624dd3 	.word	0x10624dd3

08000dd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	461a      	mov	r2, r3
 8000de4:	460b      	mov	r3, r1
 8000de6:	817b      	strh	r3, [r7, #10]
 8000de8:	4613      	mov	r3, r2
 8000dea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff fc84 	bl	80006f8 <HAL_GetTick>
 8000df0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b20      	cmp	r3, #32
 8000dfc:	f040 80e0 	bne.w	8000fc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2319      	movs	r3, #25
 8000e06:	2201      	movs	r2, #1
 8000e08:	4970      	ldr	r1, [pc, #448]	; (8000fcc <HAL_I2C_Master_Transmit+0x1f4>)
 8000e0a:	68f8      	ldr	r0, [r7, #12]
 8000e0c:	f000 fc3c 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000e16:	2302      	movs	r3, #2
 8000e18:	e0d3      	b.n	8000fc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d101      	bne.n	8000e28 <HAL_I2C_Master_Transmit+0x50>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e0cc      	b.n	8000fc2 <HAL_I2C_Master_Transmit+0x1ea>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d007      	beq.n	8000e4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 0201 	orr.w	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2221      	movs	r2, #33	; 0x21
 8000e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2210      	movs	r2, #16
 8000e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2200      	movs	r2, #0
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	893a      	ldrh	r2, [r7, #8]
 8000e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4a50      	ldr	r2, [pc, #320]	; (8000fd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e90:	8979      	ldrh	r1, [r7, #10]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	6a3a      	ldr	r2, [r7, #32]
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f000 faca 	bl	8001430 <I2C_MasterRequestWrite>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e08d      	b.n	8000fc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000ebc:	e066      	b.n	8000f8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	6a39      	ldr	r1, [r7, #32]
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f000 fcb6 	bl	8001834 <I2C_WaitOnTXEFlagUntilTimeout>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00d      	beq.n	8000eea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d107      	bne.n	8000ee6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ee4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e06b      	b.n	8000fc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	3b01      	subs	r3, #1
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d11b      	bne.n	8000f60 <HAL_I2C_Master_Transmit+0x188>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d017      	beq.n	8000f60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	6a39      	ldr	r1, [r7, #32]
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f000 fca6 	bl	80018b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00d      	beq.n	8000f8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d107      	bne.n	8000f88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e01a      	b.n	8000fc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d194      	bne.n	8000ebe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e000      	b.n	8000fc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000fc0:	2302      	movs	r3, #2
  }
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	00100002 	.word	0x00100002
 8000fd0:	ffff0000 	.word	0xffff0000

08000fd4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	817b      	strh	r3, [r7, #10]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff fb86 	bl	80006f8 <HAL_GetTick>
 8000fec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b20      	cmp	r3, #32
 8000ff8:	f040 8213 	bne.w	8001422 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2319      	movs	r3, #25
 8001002:	2201      	movs	r2, #1
 8001004:	497e      	ldr	r1, [pc, #504]	; (8001200 <HAL_I2C_Master_Receive+0x22c>)
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 fb3e 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001012:	2302      	movs	r3, #2
 8001014:	e206      	b.n	8001424 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_I2C_Master_Receive+0x50>
 8001020:	2302      	movs	r3, #2
 8001022:	e1ff      	b.n	8001424 <HAL_I2C_Master_Receive+0x450>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b01      	cmp	r3, #1
 8001038:	d007      	beq.n	800104a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 0201 	orr.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001058:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2222      	movs	r2, #34	; 0x22
 800105e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2210      	movs	r2, #16
 8001066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	893a      	ldrh	r2, [r7, #8]
 800107a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001080:	b29a      	uxth	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4a5e      	ldr	r2, [pc, #376]	; (8001204 <HAL_I2C_Master_Receive+0x230>)
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800108c:	8979      	ldrh	r1, [r7, #10]
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 fa42 	bl	800151c <I2C_MasterRequestRead>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e1c0      	b.n	8001424 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d113      	bne.n	80010d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	623b      	str	r3, [r7, #32]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	623b      	str	r3, [r7, #32]
 80010be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e194      	b.n	80013fc <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d11d      	bne.n	8001116 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001110:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001112:	b662      	cpsie	i
 8001114:	e172      	b.n	80013fc <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800111a:	2b02      	cmp	r3, #2
 800111c:	d11d      	bne.n	800115a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800112c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800112e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	61bb      	str	r3, [r7, #24]
 8001144:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001156:	b662      	cpsie	i
 8001158:	e150      	b.n	80013fc <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001168:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001180:	e13c      	b.n	80013fc <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001186:	2b03      	cmp	r3, #3
 8001188:	f200 80f5 	bhi.w	8001376 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001190:	2b01      	cmp	r3, #1
 8001192:	d123      	bne.n	80011dc <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001196:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 fbcd 	bl	8001938 <I2C_WaitOnRXNEFlagUntilTimeout>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e13d      	b.n	8001424 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3b01      	subs	r3, #1
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80011da:	e10f      	b.n	80013fc <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d150      	bne.n	8001286 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ea:	2200      	movs	r2, #0
 80011ec:	4906      	ldr	r1, [pc, #24]	; (8001208 <HAL_I2C_Master_Receive+0x234>)
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa4a 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d008      	beq.n	800120c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e112      	b.n	8001424 <HAL_I2C_Master_Receive+0x450>
 80011fe:	bf00      	nop
 8001200:	00100002 	.word	0x00100002
 8001204:	ffff0000 	.word	0xffff0000
 8001208:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800121c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123a:	3b01      	subs	r3, #1
 800123c:	b29a      	uxth	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001246:	b29b      	uxth	r3, r3
 8001248:	3b01      	subs	r3, #1
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001250:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126e:	3b01      	subs	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001284:	e0ba      	b.n	80013fc <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	2200      	movs	r2, #0
 800128e:	4967      	ldr	r1, [pc, #412]	; (800142c <HAL_I2C_Master_Receive+0x458>)
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 f9f9 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0c1      	b.n	8001424 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012da:	b29b      	uxth	r3, r3
 80012dc:	3b01      	subs	r3, #1
 80012de:	b29a      	uxth	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ea:	2200      	movs	r2, #0
 80012ec:	494f      	ldr	r1, [pc, #316]	; (800142c <HAL_I2C_Master_Receive+0x458>)
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 f9ca 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e092      	b.n	8001424 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800130c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132a:	3b01      	subs	r3, #1
 800132c:	b29a      	uxth	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001336:	b29b      	uxth	r3, r3
 8001338:	3b01      	subs	r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001340:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135e:	3b01      	subs	r3, #1
 8001360:	b29a      	uxth	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136a:	b29b      	uxth	r3, r3
 800136c:	3b01      	subs	r3, #1
 800136e:	b29a      	uxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001374:	e042      	b.n	80013fc <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 fadc 	bl	8001938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e04c      	b.n	8001424 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d118      	bne.n	80013fc <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	f47f aebe 	bne.w	8001182 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2220      	movs	r2, #32
 800140a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8001422:	2302      	movs	r3, #2
  }
}
 8001424:	4618      	mov	r0, r3
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	00010004 	.word	0x00010004

08001430 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af02      	add	r7, sp, #8
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	460b      	mov	r3, r1
 800143e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b08      	cmp	r3, #8
 800144a:	d006      	beq.n	800145a <I2C_MasterRequestWrite+0x2a>
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d003      	beq.n	800145a <I2C_MasterRequestWrite+0x2a>
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001458:	d108      	bne.n	800146c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	e00b      	b.n	8001484 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	2b12      	cmp	r3, #18
 8001472:	d107      	bne.n	8001484 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001482:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 f8f9 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e035      	b.n	800150c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014a8:	d108      	bne.n	80014bc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	e01b      	b.n	80014f4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80014bc:	897b      	ldrh	r3, [r7, #10]
 80014be:	11db      	asrs	r3, r3, #7
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	f003 0306 	and.w	r3, r3, #6
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f063 030f 	orn	r3, r3, #15
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	490e      	ldr	r1, [pc, #56]	; (8001514 <I2C_MasterRequestWrite+0xe4>)
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f92b 	bl	8001736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e010      	b.n	800150c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80014ea:	897b      	ldrh	r3, [r7, #10]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <I2C_MasterRequestWrite+0xe8>)
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f91b 	bl	8001736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	00010008 	.word	0x00010008
 8001518:	00010002 	.word	0x00010002

0800151c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	460b      	mov	r3, r1
 800152a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001540:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b08      	cmp	r3, #8
 8001546:	d006      	beq.n	8001556 <I2C_MasterRequestRead+0x3a>
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d003      	beq.n	8001556 <I2C_MasterRequestRead+0x3a>
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001554:	d108      	bne.n	8001568 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e00b      	b.n	8001580 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	2b11      	cmp	r3, #17
 800156e:	d107      	bne.n	8001580 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800157e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 f87b 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e06d      	b.n	8001678 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a4:	d108      	bne.n	80015b8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80015a6:	897b      	ldrh	r3, [r7, #10]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	e053      	b.n	8001660 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	11db      	asrs	r3, r3, #7
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f003 0306 	and.w	r3, r3, #6
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f063 030f 	orn	r3, r3, #15
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	492a      	ldr	r1, [pc, #168]	; (8001680 <I2C_MasterRequestRead+0x164>)
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f8ad 	bl	8001736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e048      	b.n	8001678 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015e6:	897b      	ldrh	r3, [r7, #10]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4923      	ldr	r1, [pc, #140]	; (8001684 <I2C_MasterRequestRead+0x168>)
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 f89d 	bl	8001736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e038      	b.n	8001678 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800162a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f825 	bl	8001688 <I2C_WaitOnFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e017      	b.n	8001678 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001648:	897b      	ldrh	r3, [r7, #10]
 800164a:	11db      	asrs	r3, r3, #7
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f003 0306 	and.w	r3, r3, #6
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f063 030e 	orn	r3, r3, #14
 8001658:	b2da      	uxtb	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <I2C_MasterRequestRead+0x168>)
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f865 	bl	8001736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	00010008 	.word	0x00010008
 8001684:	00010002 	.word	0x00010002

08001688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001698:	e025      	b.n	80016e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d021      	beq.n	80016e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016a2:	f7ff f829 	bl	80006f8 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d302      	bcc.n	80016b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d116      	bne.n	80016e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2220      	movs	r2, #32
 80016c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f043 0220 	orr.w	r2, r3, #32
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e023      	b.n	800172e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	0c1b      	lsrs	r3, r3, #16
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d10d      	bne.n	800170c <I2C_WaitOnFlagUntilTimeout+0x84>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4013      	ands	r3, r2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf0c      	ite	eq
 8001702:	2301      	moveq	r3, #1
 8001704:	2300      	movne	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	e00c      	b.n	8001726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4013      	ands	r3, r2
 8001718:	b29b      	uxth	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf0c      	ite	eq
 800171e:	2301      	moveq	r3, #1
 8001720:	2300      	movne	r3, #0
 8001722:	b2db      	uxtb	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	429a      	cmp	r2, r3
 800172a:	d0b6      	beq.n	800169a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001744:	e051      	b.n	80017ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001754:	d123      	bne.n	800179e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800176e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f043 0204 	orr.w	r2, r3, #4
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e046      	b.n	800182c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d021      	beq.n	80017ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017a6:	f7fe ffa7 	bl	80006f8 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d302      	bcc.n	80017bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d116      	bne.n	80017ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2220      	movs	r2, #32
 80017c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f043 0220 	orr.w	r2, r3, #32
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e020      	b.n	800182c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	0c1b      	lsrs	r3, r3, #16
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d10c      	bne.n	800180e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4013      	ands	r3, r2
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	bf14      	ite	ne
 8001806:	2301      	movne	r3, #1
 8001808:	2300      	moveq	r3, #0
 800180a:	b2db      	uxtb	r3, r3
 800180c:	e00b      	b.n	8001826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	43da      	mvns	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4013      	ands	r3, r2
 800181a:	b29b      	uxth	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d18d      	bne.n	8001746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001840:	e02d      	b.n	800189e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f8ce 	bl	80019e4 <I2C_IsAcknowledgeFailed>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e02d      	b.n	80018ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d021      	beq.n	800189e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800185a:	f7fe ff4d 	bl	80006f8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	429a      	cmp	r2, r3
 8001868:	d302      	bcc.n	8001870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d116      	bne.n	800189e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2220      	movs	r2, #32
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f043 0220 	orr.w	r2, r3, #32
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e007      	b.n	80018ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	2b80      	cmp	r3, #128	; 0x80
 80018aa:	d1ca      	bne.n	8001842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018c2:	e02d      	b.n	8001920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f88d 	bl	80019e4 <I2C_IsAcknowledgeFailed>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e02d      	b.n	8001930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018da:	d021      	beq.n	8001920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018dc:	f7fe ff0c 	bl	80006f8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d302      	bcc.n	80018f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d116      	bne.n	8001920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e007      	b.n	8001930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b04      	cmp	r3, #4
 800192c:	d1ca      	bne.n	80018c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001944:	e042      	b.n	80019cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b10      	cmp	r3, #16
 8001952:	d119      	bne.n	8001988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f06f 0210 	mvn.w	r2, #16
 800195c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2220      	movs	r2, #32
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e029      	b.n	80019dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001988:	f7fe feb6 	bl	80006f8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	429a      	cmp	r2, r3
 8001996:	d302      	bcc.n	800199e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f043 0220 	orr.w	r2, r3, #32
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e007      	b.n	80019dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d1b5      	bne.n	8001946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	d11b      	bne.n	8001a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e26c      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8087 	beq.w	8001b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a60:	4b92      	ldr	r3, [pc, #584]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d00c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a6c:	4b8f      	ldr	r3, [pc, #572]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d112      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5e>
 8001a78:	4b8c      	ldr	r3, [pc, #560]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d10b      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d06c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x12c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d168      	bne.n	8001b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e246      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x76>
 8001aa8:	4b80      	ldr	r3, [pc, #512]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a7f      	ldr	r2, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e02e      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x98>
 8001abe:	4b7b      	ldr	r3, [pc, #492]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a7a      	ldr	r2, [pc, #488]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b78      	ldr	r3, [pc, #480]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a77      	ldr	r2, [pc, #476]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e01d      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0xbc>
 8001ae2:	4b72      	ldr	r3, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a71      	ldr	r2, [pc, #452]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6e      	ldr	r2, [pc, #440]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001afc:	4b6b      	ldr	r3, [pc, #428]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6a      	ldr	r2, [pc, #424]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a67      	ldr	r2, [pc, #412]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7fe fdec 	bl	80006f8 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7fe fde8 	bl	80006f8 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1fa      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0xe4>
 8001b42:	e014      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7fe fdd8 	bl	80006f8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7fe fdd4 	bl	80006f8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1e6      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x10c>
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d063      	beq.n	8001c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d11c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x18c>
 8001b92:	4b46      	ldr	r3, [pc, #280]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d116      	bne.n	8001bcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	4b43      	ldr	r3, [pc, #268]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x176>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e1ba      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4939      	ldr	r1, [pc, #228]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	e03a      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7fe fd8d 	bl	80006f8 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be2:	f7fe fd89 	bl	80006f8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e19b      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4927      	ldr	r1, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
 8001c14:	e015      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe fd6c 	bl	80006f8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c24:	f7fe fd68 	bl	80006f8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e17a      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03a      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d019      	beq.n	8001c8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7fe fd4c 	bl	80006f8 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7fe fd48 	bl	80006f8 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e15a      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f000 fada 	bl	800223c <RCC_Delay>
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c90:	f7fe fd32 	bl	80006f8 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c96:	e00f      	b.n	8001cb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c98:	f7fe fd2e 	bl	80006f8 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d908      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e140      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	42420000 	.word	0x42420000
 8001cb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	4b9e      	ldr	r3, [pc, #632]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e9      	bne.n	8001c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a6 	beq.w	8001e1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b97      	ldr	r3, [pc, #604]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10d      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b94      	ldr	r3, [pc, #592]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a93      	ldr	r2, [pc, #588]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	4b8b      	ldr	r3, [pc, #556]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a8a      	ldr	r2, [pc, #552]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7fe fcef 	bl	80006f8 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7fe fceb 	bl	80006f8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b64      	cmp	r3, #100	; 0x64
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0fd      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b81      	ldr	r3, [pc, #516]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x312>
 8001d44:	4b7b      	ldr	r3, [pc, #492]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a7a      	ldr	r2, [pc, #488]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	e02d      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x334>
 8001d5a:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a75      	ldr	r2, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6213      	str	r3, [r2, #32]
 8001d66:	4b73      	ldr	r3, [pc, #460]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a72      	ldr	r2, [pc, #456]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6213      	str	r3, [r2, #32]
 8001d72:	e01c      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x356>
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a6c      	ldr	r2, [pc, #432]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a69      	ldr	r2, [pc, #420]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	e00b      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a66      	ldr	r2, [pc, #408]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	4b64      	ldr	r3, [pc, #400]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a63      	ldr	r2, [pc, #396]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d015      	beq.n	8001de2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7fe fc9f 	bl	80006f8 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7fe fc9b 	bl	80006f8 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0ab      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ee      	beq.n	8001dbe <HAL_RCC_OscConfig+0x37e>
 8001de0:	e014      	b.n	8001e0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7fe fc89 	bl	80006f8 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7fe fc85 	bl	80006f8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e095      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ee      	bne.n	8001dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e12:	4b48      	ldr	r3, [pc, #288]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a47      	ldr	r2, [pc, #284]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8081 	beq.w	8001f2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d061      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d146      	bne.n	8001eca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x4fc>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe fc59 	bl	80006f8 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe fc55 	bl	80006f8 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e067      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e72:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	492d      	ldr	r1, [pc, #180]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a19      	ldr	r1, [r3, #32]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	430b      	orrs	r3, r1
 8001e96:	4927      	ldr	r1, [pc, #156]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x4fc>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fc29 	bl	80006f8 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe fc25 	bl	80006f8 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e037      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46a>
 8001ec8:	e02f      	b.n	8001f2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_RCC_OscConfig+0x4fc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fc12 	bl	80006f8 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe fc0e 	bl	80006f8 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e020      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x498>
 8001ef6:	e018      	b.n	8001f2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e013      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	42420060 	.word	0x42420060

08001f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0d0      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f54:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d910      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0207 	bic.w	r2, r3, #7
 8001f6a:	4965      	ldr	r1, [pc, #404]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b8      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a58      	ldr	r2, [pc, #352]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb4:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	494d      	ldr	r1, [pc, #308]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d040      	beq.n	8002060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d115      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e07f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e073      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200e:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e06b      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f023 0203 	bic.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4936      	ldr	r1, [pc, #216]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002030:	f7fe fb62 	bl	80006f8 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	e00a      	b.n	800204e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7fe fb5e 	bl	80006f8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e053      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 020c 	and.w	r2, r3, #12
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	429a      	cmp	r2, r3
 800205e:	d1eb      	bne.n	8002038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d210      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 0207 	bic.w	r2, r3, #7
 8002076:	4922      	ldr	r1, [pc, #136]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e032      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	490e      	ldr	r1, [pc, #56]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ce:	f000 f821 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020d2:	4601      	mov	r1, r0
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	fa21 f303 	lsr.w	r3, r1, r3
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1cc>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1d0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fac0 	bl	8000674 <HAL_InitTick>

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40022000 	.word	0x40022000
 8002104:	40021000 	.word	0x40021000
 8002108:	08002f5c 	.word	0x08002f5c
 800210c:	20000000 	.word	0x20000000
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	b490      	push	{r4, r7}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800211c:	1d3c      	adds	r4, r7, #4
 800211e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800213e:	4b23      	ldr	r3, [pc, #140]	; (80021cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b04      	cmp	r3, #4
 800214c:	d002      	beq.n	8002154 <HAL_RCC_GetSysClockFreq+0x40>
 800214e:	2b08      	cmp	r3, #8
 8002150:	d003      	beq.n	800215a <HAL_RCC_GetSysClockFreq+0x46>
 8002152:	e02d      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002156:	623b      	str	r3, [r7, #32]
      break;
 8002158:	e02d      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	0c9b      	lsrs	r3, r3, #18
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002166:	4413      	add	r3, r2
 8002168:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800216c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d013      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	0c5b      	lsrs	r3, r3, #17
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002186:	4413      	add	r3, r2
 8002188:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800218c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002192:	fb02 f203 	mul.w	r2, r2, r3
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	e004      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	623b      	str	r3, [r7, #32]
      break;
 80021ae:	e002      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b2:	623b      	str	r3, [r7, #32]
      break;
 80021b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021b6:	6a3b      	ldr	r3, [r7, #32]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc90      	pop	{r4, r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	08002f48 	.word	0x08002f48
 80021c8:	08002f58 	.word	0x08002f58
 80021cc:	40021000 	.word	0x40021000
 80021d0:	007a1200 	.word	0x007a1200
 80021d4:	003d0900 	.word	0x003d0900

080021d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021dc:	4b02      	ldr	r3, [pc, #8]	; (80021e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	20000000 	.word	0x20000000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021f0:	f7ff fff2 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 80021f4:	4601      	mov	r1, r0
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4a03      	ldr	r2, [pc, #12]	; (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002202:	5cd3      	ldrb	r3, [r2, r3]
 8002204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	08002f6c 	.word	0x08002f6c

08002214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002218:	f7ff ffde 	bl	80021d8 <HAL_RCC_GetHCLKFreq>
 800221c:	4601      	mov	r1, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0adb      	lsrs	r3, r3, #11
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4a03      	ldr	r2, [pc, #12]	; (8002238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	08002f6c 	.word	0x08002f6c

0800223c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <RCC_Delay+0x34>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <RCC_Delay+0x38>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a5b      	lsrs	r3, r3, #9
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002258:	bf00      	nop
  }
  while (Delay --);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1e5a      	subs	r2, r3, #1
 800225e:	60fa      	str	r2, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <RCC_Delay+0x1c>
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000000 	.word	0x20000000
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e03f      	b.n	800230a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe f8cc 	bl	800043c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f90b 	bl	80024d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b088      	sub	sp, #32
 8002316:	af02      	add	r7, sp, #8
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	f040 8083 	bne.w	800243a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_UART_Transmit+0x2e>
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e07b      	b.n	800243c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_UART_Transmit+0x40>
 800234e:	2302      	movs	r3, #2
 8002350:	e074      	b.n	800243c <HAL_UART_Transmit+0x12a>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2221      	movs	r2, #33	; 0x21
 8002364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002368:	f7fe f9c6 	bl	80006f8 <HAL_GetTick>
 800236c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	88fa      	ldrh	r2, [r7, #6]
 8002372:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800237a:	e042      	b.n	8002402 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002380:	b29b      	uxth	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	d122      	bne.n	80023da <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2200      	movs	r2, #0
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f850 	bl	8002444 <UART_WaitOnFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e046      	b.n	800243c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023c0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3302      	adds	r3, #2
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	e017      	b.n	8002402 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	e013      	b.n	8002402 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f82d 	bl	8002444 <UART_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e023      	b.n	800243c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	60ba      	str	r2, [r7, #8]
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1b7      	bne.n	800237c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2200      	movs	r2, #0
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f814 	bl	8002444 <UART_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e00a      	b.n	800243c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002454:	e02c      	b.n	80024b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d028      	beq.n	80024b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <UART_WaitOnFlagUntilTimeout+0x30>
 8002464:	f7fe f948 	bl	80006f8 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	429a      	cmp	r2, r3
 8002472:	d21d      	bcs.n	80024b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002482:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e00f      	b.n	80024d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4013      	ands	r3, r2
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	429a      	cmp	r2, r3
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d0c3      	beq.n	8002456 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002512:	f023 030c 	bic.w	r3, r3, #12
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	430b      	orrs	r3, r1
 800251e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a52      	ldr	r2, [pc, #328]	; (8002684 <UART_SetConfig+0x1ac>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d14e      	bne.n	80025de <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002540:	f7ff fe68 	bl	8002214 <HAL_RCC_GetPCLK2Freq>
 8002544:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	009a      	lsls	r2, r3, #2
 8002550:	441a      	add	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	4a4a      	ldr	r2, [pc, #296]	; (8002688 <UART_SetConfig+0x1b0>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	0119      	lsls	r1, r3, #4
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	009a      	lsls	r2, r3, #2
 8002570:	441a      	add	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fbb2 f2f3 	udiv	r2, r2, r3
 800257c:	4b42      	ldr	r3, [pc, #264]	; (8002688 <UART_SetConfig+0x1b0>)
 800257e:	fba3 0302 	umull	r0, r3, r3, r2
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2064      	movs	r0, #100	; 0x64
 8002586:	fb00 f303 	mul.w	r3, r0, r3
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	3332      	adds	r3, #50	; 0x32
 8002590:	4a3d      	ldr	r2, [pc, #244]	; (8002688 <UART_SetConfig+0x1b0>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800259c:	4419      	add	r1, r3
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	009a      	lsls	r2, r3, #2
 80025a8:	441a      	add	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025b4:	4b34      	ldr	r3, [pc, #208]	; (8002688 <UART_SetConfig+0x1b0>)
 80025b6:	fba3 0302 	umull	r0, r3, r3, r2
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2064      	movs	r0, #100	; 0x64
 80025be:	fb00 f303 	mul.w	r3, r0, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	3332      	adds	r3, #50	; 0x32
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <UART_SetConfig+0x1b0>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	f003 020f 	and.w	r2, r3, #15
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	440a      	add	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80025dc:	e04d      	b.n	800267a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80025de:	f7ff fe05 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 80025e2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	009a      	lsls	r2, r3, #2
 80025ee:	441a      	add	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4a23      	ldr	r2, [pc, #140]	; (8002688 <UART_SetConfig+0x1b0>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	0119      	lsls	r1, r3, #4
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	441a      	add	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	fbb2 f2f3 	udiv	r2, r2, r3
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <UART_SetConfig+0x1b0>)
 800261c:	fba3 0302 	umull	r0, r3, r3, r2
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	2064      	movs	r0, #100	; 0x64
 8002624:	fb00 f303 	mul.w	r3, r0, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	3332      	adds	r3, #50	; 0x32
 800262e:	4a16      	ldr	r2, [pc, #88]	; (8002688 <UART_SetConfig+0x1b0>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800263a:	4419      	add	r1, r3
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	009a      	lsls	r2, r3, #2
 8002646:	441a      	add	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <UART_SetConfig+0x1b0>)
 8002654:	fba3 0302 	umull	r0, r3, r3, r2
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	2064      	movs	r0, #100	; 0x64
 800265c:	fb00 f303 	mul.w	r3, r0, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	3332      	adds	r3, #50	; 0x32
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <UART_SetConfig+0x1b0>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	f003 020f 	and.w	r2, r3, #15
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	440a      	add	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40013800 	.word	0x40013800
 8002688:	51eb851f 	.word	0x51eb851f

0800268c <__errno>:
 800268c:	4b01      	ldr	r3, [pc, #4]	; (8002694 <__errno+0x8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	2000000c 	.word	0x2000000c

08002698 <__libc_init_array>:
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	2500      	movs	r5, #0
 800269c:	4e0c      	ldr	r6, [pc, #48]	; (80026d0 <__libc_init_array+0x38>)
 800269e:	4c0d      	ldr	r4, [pc, #52]	; (80026d4 <__libc_init_array+0x3c>)
 80026a0:	1ba4      	subs	r4, r4, r6
 80026a2:	10a4      	asrs	r4, r4, #2
 80026a4:	42a5      	cmp	r5, r4
 80026a6:	d109      	bne.n	80026bc <__libc_init_array+0x24>
 80026a8:	f000 fc34 	bl	8002f14 <_init>
 80026ac:	2500      	movs	r5, #0
 80026ae:	4e0a      	ldr	r6, [pc, #40]	; (80026d8 <__libc_init_array+0x40>)
 80026b0:	4c0a      	ldr	r4, [pc, #40]	; (80026dc <__libc_init_array+0x44>)
 80026b2:	1ba4      	subs	r4, r4, r6
 80026b4:	10a4      	asrs	r4, r4, #2
 80026b6:	42a5      	cmp	r5, r4
 80026b8:	d105      	bne.n	80026c6 <__libc_init_array+0x2e>
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
 80026bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026c0:	4798      	blx	r3
 80026c2:	3501      	adds	r5, #1
 80026c4:	e7ee      	b.n	80026a4 <__libc_init_array+0xc>
 80026c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026ca:	4798      	blx	r3
 80026cc:	3501      	adds	r5, #1
 80026ce:	e7f2      	b.n	80026b6 <__libc_init_array+0x1e>
 80026d0:	08002fa8 	.word	0x08002fa8
 80026d4:	08002fa8 	.word	0x08002fa8
 80026d8:	08002fa8 	.word	0x08002fa8
 80026dc:	08002fac 	.word	0x08002fac

080026e0 <memset>:
 80026e0:	4603      	mov	r3, r0
 80026e2:	4402      	add	r2, r0
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d100      	bne.n	80026ea <memset+0xa>
 80026e8:	4770      	bx	lr
 80026ea:	f803 1b01 	strb.w	r1, [r3], #1
 80026ee:	e7f9      	b.n	80026e4 <memset+0x4>

080026f0 <siprintf>:
 80026f0:	b40e      	push	{r1, r2, r3}
 80026f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026f6:	b500      	push	{lr}
 80026f8:	b09c      	sub	sp, #112	; 0x70
 80026fa:	ab1d      	add	r3, sp, #116	; 0x74
 80026fc:	9002      	str	r0, [sp, #8]
 80026fe:	9006      	str	r0, [sp, #24]
 8002700:	9107      	str	r1, [sp, #28]
 8002702:	9104      	str	r1, [sp, #16]
 8002704:	4808      	ldr	r0, [pc, #32]	; (8002728 <siprintf+0x38>)
 8002706:	4909      	ldr	r1, [pc, #36]	; (800272c <siprintf+0x3c>)
 8002708:	f853 2b04 	ldr.w	r2, [r3], #4
 800270c:	9105      	str	r1, [sp, #20]
 800270e:	6800      	ldr	r0, [r0, #0]
 8002710:	a902      	add	r1, sp, #8
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	f000 f866 	bl	80027e4 <_svfiprintf_r>
 8002718:	2200      	movs	r2, #0
 800271a:	9b02      	ldr	r3, [sp, #8]
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	b01c      	add	sp, #112	; 0x70
 8002720:	f85d eb04 	ldr.w	lr, [sp], #4
 8002724:	b003      	add	sp, #12
 8002726:	4770      	bx	lr
 8002728:	2000000c 	.word	0x2000000c
 800272c:	ffff0208 	.word	0xffff0208

08002730 <__ssputs_r>:
 8002730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002734:	688e      	ldr	r6, [r1, #8]
 8002736:	4682      	mov	sl, r0
 8002738:	429e      	cmp	r6, r3
 800273a:	460c      	mov	r4, r1
 800273c:	4690      	mov	r8, r2
 800273e:	4699      	mov	r9, r3
 8002740:	d837      	bhi.n	80027b2 <__ssputs_r+0x82>
 8002742:	898a      	ldrh	r2, [r1, #12]
 8002744:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002748:	d031      	beq.n	80027ae <__ssputs_r+0x7e>
 800274a:	2302      	movs	r3, #2
 800274c:	6825      	ldr	r5, [r4, #0]
 800274e:	6909      	ldr	r1, [r1, #16]
 8002750:	1a6f      	subs	r7, r5, r1
 8002752:	6965      	ldr	r5, [r4, #20]
 8002754:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002758:	fb95 f5f3 	sdiv	r5, r5, r3
 800275c:	f109 0301 	add.w	r3, r9, #1
 8002760:	443b      	add	r3, r7
 8002762:	429d      	cmp	r5, r3
 8002764:	bf38      	it	cc
 8002766:	461d      	movcc	r5, r3
 8002768:	0553      	lsls	r3, r2, #21
 800276a:	d530      	bpl.n	80027ce <__ssputs_r+0x9e>
 800276c:	4629      	mov	r1, r5
 800276e:	f000 fb37 	bl	8002de0 <_malloc_r>
 8002772:	4606      	mov	r6, r0
 8002774:	b950      	cbnz	r0, 800278c <__ssputs_r+0x5c>
 8002776:	230c      	movs	r3, #12
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f8ca 3000 	str.w	r3, [sl]
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002786:	81a3      	strh	r3, [r4, #12]
 8002788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800278c:	463a      	mov	r2, r7
 800278e:	6921      	ldr	r1, [r4, #16]
 8002790:	f000 fab6 	bl	8002d00 <memcpy>
 8002794:	89a3      	ldrh	r3, [r4, #12]
 8002796:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800279a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279e:	81a3      	strh	r3, [r4, #12]
 80027a0:	6126      	str	r6, [r4, #16]
 80027a2:	443e      	add	r6, r7
 80027a4:	6026      	str	r6, [r4, #0]
 80027a6:	464e      	mov	r6, r9
 80027a8:	6165      	str	r5, [r4, #20]
 80027aa:	1bed      	subs	r5, r5, r7
 80027ac:	60a5      	str	r5, [r4, #8]
 80027ae:	454e      	cmp	r6, r9
 80027b0:	d900      	bls.n	80027b4 <__ssputs_r+0x84>
 80027b2:	464e      	mov	r6, r9
 80027b4:	4632      	mov	r2, r6
 80027b6:	4641      	mov	r1, r8
 80027b8:	6820      	ldr	r0, [r4, #0]
 80027ba:	f000 faac 	bl	8002d16 <memmove>
 80027be:	68a3      	ldr	r3, [r4, #8]
 80027c0:	2000      	movs	r0, #0
 80027c2:	1b9b      	subs	r3, r3, r6
 80027c4:	60a3      	str	r3, [r4, #8]
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	441e      	add	r6, r3
 80027ca:	6026      	str	r6, [r4, #0]
 80027cc:	e7dc      	b.n	8002788 <__ssputs_r+0x58>
 80027ce:	462a      	mov	r2, r5
 80027d0:	f000 fb60 	bl	8002e94 <_realloc_r>
 80027d4:	4606      	mov	r6, r0
 80027d6:	2800      	cmp	r0, #0
 80027d8:	d1e2      	bne.n	80027a0 <__ssputs_r+0x70>
 80027da:	6921      	ldr	r1, [r4, #16]
 80027dc:	4650      	mov	r0, sl
 80027de:	f000 fab3 	bl	8002d48 <_free_r>
 80027e2:	e7c8      	b.n	8002776 <__ssputs_r+0x46>

080027e4 <_svfiprintf_r>:
 80027e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e8:	461d      	mov	r5, r3
 80027ea:	898b      	ldrh	r3, [r1, #12]
 80027ec:	b09d      	sub	sp, #116	; 0x74
 80027ee:	061f      	lsls	r7, r3, #24
 80027f0:	4680      	mov	r8, r0
 80027f2:	460c      	mov	r4, r1
 80027f4:	4616      	mov	r6, r2
 80027f6:	d50f      	bpl.n	8002818 <_svfiprintf_r+0x34>
 80027f8:	690b      	ldr	r3, [r1, #16]
 80027fa:	b96b      	cbnz	r3, 8002818 <_svfiprintf_r+0x34>
 80027fc:	2140      	movs	r1, #64	; 0x40
 80027fe:	f000 faef 	bl	8002de0 <_malloc_r>
 8002802:	6020      	str	r0, [r4, #0]
 8002804:	6120      	str	r0, [r4, #16]
 8002806:	b928      	cbnz	r0, 8002814 <_svfiprintf_r+0x30>
 8002808:	230c      	movs	r3, #12
 800280a:	f8c8 3000 	str.w	r3, [r8]
 800280e:	f04f 30ff 	mov.w	r0, #4294967295
 8002812:	e0c8      	b.n	80029a6 <_svfiprintf_r+0x1c2>
 8002814:	2340      	movs	r3, #64	; 0x40
 8002816:	6163      	str	r3, [r4, #20]
 8002818:	2300      	movs	r3, #0
 800281a:	9309      	str	r3, [sp, #36]	; 0x24
 800281c:	2320      	movs	r3, #32
 800281e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002822:	2330      	movs	r3, #48	; 0x30
 8002824:	f04f 0b01 	mov.w	fp, #1
 8002828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800282c:	9503      	str	r5, [sp, #12]
 800282e:	4637      	mov	r7, r6
 8002830:	463d      	mov	r5, r7
 8002832:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002836:	b10b      	cbz	r3, 800283c <_svfiprintf_r+0x58>
 8002838:	2b25      	cmp	r3, #37	; 0x25
 800283a:	d13e      	bne.n	80028ba <_svfiprintf_r+0xd6>
 800283c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002840:	d00b      	beq.n	800285a <_svfiprintf_r+0x76>
 8002842:	4653      	mov	r3, sl
 8002844:	4632      	mov	r2, r6
 8002846:	4621      	mov	r1, r4
 8002848:	4640      	mov	r0, r8
 800284a:	f7ff ff71 	bl	8002730 <__ssputs_r>
 800284e:	3001      	adds	r0, #1
 8002850:	f000 80a4 	beq.w	800299c <_svfiprintf_r+0x1b8>
 8002854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002856:	4453      	add	r3, sl
 8002858:	9309      	str	r3, [sp, #36]	; 0x24
 800285a:	783b      	ldrb	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 809d 	beq.w	800299c <_svfiprintf_r+0x1b8>
 8002862:	2300      	movs	r3, #0
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800286c:	9304      	str	r3, [sp, #16]
 800286e:	9307      	str	r3, [sp, #28]
 8002870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002874:	931a      	str	r3, [sp, #104]	; 0x68
 8002876:	462f      	mov	r7, r5
 8002878:	2205      	movs	r2, #5
 800287a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800287e:	4850      	ldr	r0, [pc, #320]	; (80029c0 <_svfiprintf_r+0x1dc>)
 8002880:	f000 fa30 	bl	8002ce4 <memchr>
 8002884:	9b04      	ldr	r3, [sp, #16]
 8002886:	b9d0      	cbnz	r0, 80028be <_svfiprintf_r+0xda>
 8002888:	06d9      	lsls	r1, r3, #27
 800288a:	bf44      	itt	mi
 800288c:	2220      	movmi	r2, #32
 800288e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002892:	071a      	lsls	r2, r3, #28
 8002894:	bf44      	itt	mi
 8002896:	222b      	movmi	r2, #43	; 0x2b
 8002898:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800289c:	782a      	ldrb	r2, [r5, #0]
 800289e:	2a2a      	cmp	r2, #42	; 0x2a
 80028a0:	d015      	beq.n	80028ce <_svfiprintf_r+0xea>
 80028a2:	462f      	mov	r7, r5
 80028a4:	2000      	movs	r0, #0
 80028a6:	250a      	movs	r5, #10
 80028a8:	9a07      	ldr	r2, [sp, #28]
 80028aa:	4639      	mov	r1, r7
 80028ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028b0:	3b30      	subs	r3, #48	; 0x30
 80028b2:	2b09      	cmp	r3, #9
 80028b4:	d94d      	bls.n	8002952 <_svfiprintf_r+0x16e>
 80028b6:	b1b8      	cbz	r0, 80028e8 <_svfiprintf_r+0x104>
 80028b8:	e00f      	b.n	80028da <_svfiprintf_r+0xf6>
 80028ba:	462f      	mov	r7, r5
 80028bc:	e7b8      	b.n	8002830 <_svfiprintf_r+0x4c>
 80028be:	4a40      	ldr	r2, [pc, #256]	; (80029c0 <_svfiprintf_r+0x1dc>)
 80028c0:	463d      	mov	r5, r7
 80028c2:	1a80      	subs	r0, r0, r2
 80028c4:	fa0b f000 	lsl.w	r0, fp, r0
 80028c8:	4318      	orrs	r0, r3
 80028ca:	9004      	str	r0, [sp, #16]
 80028cc:	e7d3      	b.n	8002876 <_svfiprintf_r+0x92>
 80028ce:	9a03      	ldr	r2, [sp, #12]
 80028d0:	1d11      	adds	r1, r2, #4
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	9103      	str	r1, [sp, #12]
 80028d6:	2a00      	cmp	r2, #0
 80028d8:	db01      	blt.n	80028de <_svfiprintf_r+0xfa>
 80028da:	9207      	str	r2, [sp, #28]
 80028dc:	e004      	b.n	80028e8 <_svfiprintf_r+0x104>
 80028de:	4252      	negs	r2, r2
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	9207      	str	r2, [sp, #28]
 80028e6:	9304      	str	r3, [sp, #16]
 80028e8:	783b      	ldrb	r3, [r7, #0]
 80028ea:	2b2e      	cmp	r3, #46	; 0x2e
 80028ec:	d10c      	bne.n	8002908 <_svfiprintf_r+0x124>
 80028ee:	787b      	ldrb	r3, [r7, #1]
 80028f0:	2b2a      	cmp	r3, #42	; 0x2a
 80028f2:	d133      	bne.n	800295c <_svfiprintf_r+0x178>
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	3702      	adds	r7, #2
 80028f8:	1d1a      	adds	r2, r3, #4
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	9203      	str	r2, [sp, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bfb8      	it	lt
 8002902:	f04f 33ff 	movlt.w	r3, #4294967295
 8002906:	9305      	str	r3, [sp, #20]
 8002908:	4d2e      	ldr	r5, [pc, #184]	; (80029c4 <_svfiprintf_r+0x1e0>)
 800290a:	2203      	movs	r2, #3
 800290c:	7839      	ldrb	r1, [r7, #0]
 800290e:	4628      	mov	r0, r5
 8002910:	f000 f9e8 	bl	8002ce4 <memchr>
 8002914:	b138      	cbz	r0, 8002926 <_svfiprintf_r+0x142>
 8002916:	2340      	movs	r3, #64	; 0x40
 8002918:	1b40      	subs	r0, r0, r5
 800291a:	fa03 f000 	lsl.w	r0, r3, r0
 800291e:	9b04      	ldr	r3, [sp, #16]
 8002920:	3701      	adds	r7, #1
 8002922:	4303      	orrs	r3, r0
 8002924:	9304      	str	r3, [sp, #16]
 8002926:	7839      	ldrb	r1, [r7, #0]
 8002928:	2206      	movs	r2, #6
 800292a:	4827      	ldr	r0, [pc, #156]	; (80029c8 <_svfiprintf_r+0x1e4>)
 800292c:	1c7e      	adds	r6, r7, #1
 800292e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002932:	f000 f9d7 	bl	8002ce4 <memchr>
 8002936:	2800      	cmp	r0, #0
 8002938:	d038      	beq.n	80029ac <_svfiprintf_r+0x1c8>
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <_svfiprintf_r+0x1e8>)
 800293c:	bb13      	cbnz	r3, 8002984 <_svfiprintf_r+0x1a0>
 800293e:	9b03      	ldr	r3, [sp, #12]
 8002940:	3307      	adds	r3, #7
 8002942:	f023 0307 	bic.w	r3, r3, #7
 8002946:	3308      	adds	r3, #8
 8002948:	9303      	str	r3, [sp, #12]
 800294a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800294c:	444b      	add	r3, r9
 800294e:	9309      	str	r3, [sp, #36]	; 0x24
 8002950:	e76d      	b.n	800282e <_svfiprintf_r+0x4a>
 8002952:	fb05 3202 	mla	r2, r5, r2, r3
 8002956:	2001      	movs	r0, #1
 8002958:	460f      	mov	r7, r1
 800295a:	e7a6      	b.n	80028aa <_svfiprintf_r+0xc6>
 800295c:	2300      	movs	r3, #0
 800295e:	250a      	movs	r5, #10
 8002960:	4619      	mov	r1, r3
 8002962:	3701      	adds	r7, #1
 8002964:	9305      	str	r3, [sp, #20]
 8002966:	4638      	mov	r0, r7
 8002968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800296c:	3a30      	subs	r2, #48	; 0x30
 800296e:	2a09      	cmp	r2, #9
 8002970:	d903      	bls.n	800297a <_svfiprintf_r+0x196>
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0c8      	beq.n	8002908 <_svfiprintf_r+0x124>
 8002976:	9105      	str	r1, [sp, #20]
 8002978:	e7c6      	b.n	8002908 <_svfiprintf_r+0x124>
 800297a:	fb05 2101 	mla	r1, r5, r1, r2
 800297e:	2301      	movs	r3, #1
 8002980:	4607      	mov	r7, r0
 8002982:	e7f0      	b.n	8002966 <_svfiprintf_r+0x182>
 8002984:	ab03      	add	r3, sp, #12
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	4622      	mov	r2, r4
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <_svfiprintf_r+0x1ec>)
 800298c:	a904      	add	r1, sp, #16
 800298e:	4640      	mov	r0, r8
 8002990:	f3af 8000 	nop.w
 8002994:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002998:	4681      	mov	r9, r0
 800299a:	d1d6      	bne.n	800294a <_svfiprintf_r+0x166>
 800299c:	89a3      	ldrh	r3, [r4, #12]
 800299e:	065b      	lsls	r3, r3, #25
 80029a0:	f53f af35 	bmi.w	800280e <_svfiprintf_r+0x2a>
 80029a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029a6:	b01d      	add	sp, #116	; 0x74
 80029a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ac:	ab03      	add	r3, sp, #12
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4622      	mov	r2, r4
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <_svfiprintf_r+0x1ec>)
 80029b4:	a904      	add	r1, sp, #16
 80029b6:	4640      	mov	r0, r8
 80029b8:	f000 f882 	bl	8002ac0 <_printf_i>
 80029bc:	e7ea      	b.n	8002994 <_svfiprintf_r+0x1b0>
 80029be:	bf00      	nop
 80029c0:	08002f74 	.word	0x08002f74
 80029c4:	08002f7a 	.word	0x08002f7a
 80029c8:	08002f7e 	.word	0x08002f7e
 80029cc:	00000000 	.word	0x00000000
 80029d0:	08002731 	.word	0x08002731

080029d4 <_printf_common>:
 80029d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029d8:	4691      	mov	r9, r2
 80029da:	461f      	mov	r7, r3
 80029dc:	688a      	ldr	r2, [r1, #8]
 80029de:	690b      	ldr	r3, [r1, #16]
 80029e0:	4606      	mov	r6, r0
 80029e2:	4293      	cmp	r3, r2
 80029e4:	bfb8      	it	lt
 80029e6:	4613      	movlt	r3, r2
 80029e8:	f8c9 3000 	str.w	r3, [r9]
 80029ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029f0:	460c      	mov	r4, r1
 80029f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029f6:	b112      	cbz	r2, 80029fe <_printf_common+0x2a>
 80029f8:	3301      	adds	r3, #1
 80029fa:	f8c9 3000 	str.w	r3, [r9]
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	0699      	lsls	r1, r3, #26
 8002a02:	bf42      	ittt	mi
 8002a04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a08:	3302      	addmi	r3, #2
 8002a0a:	f8c9 3000 	strmi.w	r3, [r9]
 8002a0e:	6825      	ldr	r5, [r4, #0]
 8002a10:	f015 0506 	ands.w	r5, r5, #6
 8002a14:	d107      	bne.n	8002a26 <_printf_common+0x52>
 8002a16:	f104 0a19 	add.w	sl, r4, #25
 8002a1a:	68e3      	ldr	r3, [r4, #12]
 8002a1c:	f8d9 2000 	ldr.w	r2, [r9]
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	42ab      	cmp	r3, r5
 8002a24:	dc29      	bgt.n	8002a7a <_printf_common+0xa6>
 8002a26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002a2a:	6822      	ldr	r2, [r4, #0]
 8002a2c:	3300      	adds	r3, #0
 8002a2e:	bf18      	it	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	0692      	lsls	r2, r2, #26
 8002a34:	d42e      	bmi.n	8002a94 <_printf_common+0xc0>
 8002a36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a3a:	4639      	mov	r1, r7
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	47c0      	blx	r8
 8002a40:	3001      	adds	r0, #1
 8002a42:	d021      	beq.n	8002a88 <_printf_common+0xb4>
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	68e5      	ldr	r5, [r4, #12]
 8002a48:	f003 0306 	and.w	r3, r3, #6
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	bf18      	it	ne
 8002a50:	2500      	movne	r5, #0
 8002a52:	f8d9 2000 	ldr.w	r2, [r9]
 8002a56:	f04f 0900 	mov.w	r9, #0
 8002a5a:	bf08      	it	eq
 8002a5c:	1aad      	subeq	r5, r5, r2
 8002a5e:	68a3      	ldr	r3, [r4, #8]
 8002a60:	6922      	ldr	r2, [r4, #16]
 8002a62:	bf08      	it	eq
 8002a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	bfc4      	itt	gt
 8002a6c:	1a9b      	subgt	r3, r3, r2
 8002a6e:	18ed      	addgt	r5, r5, r3
 8002a70:	341a      	adds	r4, #26
 8002a72:	454d      	cmp	r5, r9
 8002a74:	d11a      	bne.n	8002aac <_printf_common+0xd8>
 8002a76:	2000      	movs	r0, #0
 8002a78:	e008      	b.n	8002a8c <_printf_common+0xb8>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4652      	mov	r2, sl
 8002a7e:	4639      	mov	r1, r7
 8002a80:	4630      	mov	r0, r6
 8002a82:	47c0      	blx	r8
 8002a84:	3001      	adds	r0, #1
 8002a86:	d103      	bne.n	8002a90 <_printf_common+0xbc>
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a90:	3501      	adds	r5, #1
 8002a92:	e7c2      	b.n	8002a1a <_printf_common+0x46>
 8002a94:	2030      	movs	r0, #48	; 0x30
 8002a96:	18e1      	adds	r1, r4, r3
 8002a98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aa2:	4422      	add	r2, r4
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aaa:	e7c4      	b.n	8002a36 <_printf_common+0x62>
 8002aac:	2301      	movs	r3, #1
 8002aae:	4622      	mov	r2, r4
 8002ab0:	4639      	mov	r1, r7
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	47c0      	blx	r8
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	d0e6      	beq.n	8002a88 <_printf_common+0xb4>
 8002aba:	f109 0901 	add.w	r9, r9, #1
 8002abe:	e7d8      	b.n	8002a72 <_printf_common+0x9e>

08002ac0 <_printf_i>:
 8002ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ac4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ac8:	460c      	mov	r4, r1
 8002aca:	7e09      	ldrb	r1, [r1, #24]
 8002acc:	b085      	sub	sp, #20
 8002ace:	296e      	cmp	r1, #110	; 0x6e
 8002ad0:	4617      	mov	r7, r2
 8002ad2:	4606      	mov	r6, r0
 8002ad4:	4698      	mov	r8, r3
 8002ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ad8:	f000 80b3 	beq.w	8002c42 <_printf_i+0x182>
 8002adc:	d822      	bhi.n	8002b24 <_printf_i+0x64>
 8002ade:	2963      	cmp	r1, #99	; 0x63
 8002ae0:	d036      	beq.n	8002b50 <_printf_i+0x90>
 8002ae2:	d80a      	bhi.n	8002afa <_printf_i+0x3a>
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	f000 80b9 	beq.w	8002c5c <_printf_i+0x19c>
 8002aea:	2958      	cmp	r1, #88	; 0x58
 8002aec:	f000 8083 	beq.w	8002bf6 <_printf_i+0x136>
 8002af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002af4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002af8:	e032      	b.n	8002b60 <_printf_i+0xa0>
 8002afa:	2964      	cmp	r1, #100	; 0x64
 8002afc:	d001      	beq.n	8002b02 <_printf_i+0x42>
 8002afe:	2969      	cmp	r1, #105	; 0x69
 8002b00:	d1f6      	bne.n	8002af0 <_printf_i+0x30>
 8002b02:	6820      	ldr	r0, [r4, #0]
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	0605      	lsls	r5, r0, #24
 8002b08:	f103 0104 	add.w	r1, r3, #4
 8002b0c:	d52a      	bpl.n	8002b64 <_printf_i+0xa4>
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6011      	str	r1, [r2, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	da03      	bge.n	8002b1e <_printf_i+0x5e>
 8002b16:	222d      	movs	r2, #45	; 0x2d
 8002b18:	425b      	negs	r3, r3
 8002b1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002b1e:	486f      	ldr	r0, [pc, #444]	; (8002cdc <_printf_i+0x21c>)
 8002b20:	220a      	movs	r2, #10
 8002b22:	e039      	b.n	8002b98 <_printf_i+0xd8>
 8002b24:	2973      	cmp	r1, #115	; 0x73
 8002b26:	f000 809d 	beq.w	8002c64 <_printf_i+0x1a4>
 8002b2a:	d808      	bhi.n	8002b3e <_printf_i+0x7e>
 8002b2c:	296f      	cmp	r1, #111	; 0x6f
 8002b2e:	d020      	beq.n	8002b72 <_printf_i+0xb2>
 8002b30:	2970      	cmp	r1, #112	; 0x70
 8002b32:	d1dd      	bne.n	8002af0 <_printf_i+0x30>
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	f043 0320 	orr.w	r3, r3, #32
 8002b3a:	6023      	str	r3, [r4, #0]
 8002b3c:	e003      	b.n	8002b46 <_printf_i+0x86>
 8002b3e:	2975      	cmp	r1, #117	; 0x75
 8002b40:	d017      	beq.n	8002b72 <_printf_i+0xb2>
 8002b42:	2978      	cmp	r1, #120	; 0x78
 8002b44:	d1d4      	bne.n	8002af0 <_printf_i+0x30>
 8002b46:	2378      	movs	r3, #120	; 0x78
 8002b48:	4865      	ldr	r0, [pc, #404]	; (8002ce0 <_printf_i+0x220>)
 8002b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b4e:	e055      	b.n	8002bfc <_printf_i+0x13c>
 8002b50:	6813      	ldr	r3, [r2, #0]
 8002b52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b56:	1d19      	adds	r1, r3, #4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6011      	str	r1, [r2, #0]
 8002b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b60:	2301      	movs	r3, #1
 8002b62:	e08c      	b.n	8002c7e <_printf_i+0x1be>
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b6a:	6011      	str	r1, [r2, #0]
 8002b6c:	bf18      	it	ne
 8002b6e:	b21b      	sxthne	r3, r3
 8002b70:	e7cf      	b.n	8002b12 <_printf_i+0x52>
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	6825      	ldr	r5, [r4, #0]
 8002b76:	1d18      	adds	r0, r3, #4
 8002b78:	6010      	str	r0, [r2, #0]
 8002b7a:	0628      	lsls	r0, r5, #24
 8002b7c:	d501      	bpl.n	8002b82 <_printf_i+0xc2>
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	e002      	b.n	8002b88 <_printf_i+0xc8>
 8002b82:	0668      	lsls	r0, r5, #25
 8002b84:	d5fb      	bpl.n	8002b7e <_printf_i+0xbe>
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	296f      	cmp	r1, #111	; 0x6f
 8002b8a:	bf14      	ite	ne
 8002b8c:	220a      	movne	r2, #10
 8002b8e:	2208      	moveq	r2, #8
 8002b90:	4852      	ldr	r0, [pc, #328]	; (8002cdc <_printf_i+0x21c>)
 8002b92:	2100      	movs	r1, #0
 8002b94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b98:	6865      	ldr	r5, [r4, #4]
 8002b9a:	2d00      	cmp	r5, #0
 8002b9c:	60a5      	str	r5, [r4, #8]
 8002b9e:	f2c0 8095 	blt.w	8002ccc <_printf_i+0x20c>
 8002ba2:	6821      	ldr	r1, [r4, #0]
 8002ba4:	f021 0104 	bic.w	r1, r1, #4
 8002ba8:	6021      	str	r1, [r4, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d13d      	bne.n	8002c2a <_printf_i+0x16a>
 8002bae:	2d00      	cmp	r5, #0
 8002bb0:	f040 808e 	bne.w	8002cd0 <_printf_i+0x210>
 8002bb4:	4665      	mov	r5, ip
 8002bb6:	2a08      	cmp	r2, #8
 8002bb8:	d10b      	bne.n	8002bd2 <_printf_i+0x112>
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	07db      	lsls	r3, r3, #31
 8002bbe:	d508      	bpl.n	8002bd2 <_printf_i+0x112>
 8002bc0:	6923      	ldr	r3, [r4, #16]
 8002bc2:	6862      	ldr	r2, [r4, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	bfde      	ittt	le
 8002bc8:	2330      	movle	r3, #48	; 0x30
 8002bca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002bce:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002bd2:	ebac 0305 	sub.w	r3, ip, r5
 8002bd6:	6123      	str	r3, [r4, #16]
 8002bd8:	f8cd 8000 	str.w	r8, [sp]
 8002bdc:	463b      	mov	r3, r7
 8002bde:	aa03      	add	r2, sp, #12
 8002be0:	4621      	mov	r1, r4
 8002be2:	4630      	mov	r0, r6
 8002be4:	f7ff fef6 	bl	80029d4 <_printf_common>
 8002be8:	3001      	adds	r0, #1
 8002bea:	d14d      	bne.n	8002c88 <_printf_i+0x1c8>
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	b005      	add	sp, #20
 8002bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bf6:	4839      	ldr	r0, [pc, #228]	; (8002cdc <_printf_i+0x21c>)
 8002bf8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	6821      	ldr	r1, [r4, #0]
 8002c00:	1d1d      	adds	r5, r3, #4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6015      	str	r5, [r2, #0]
 8002c06:	060a      	lsls	r2, r1, #24
 8002c08:	d50b      	bpl.n	8002c22 <_printf_i+0x162>
 8002c0a:	07ca      	lsls	r2, r1, #31
 8002c0c:	bf44      	itt	mi
 8002c0e:	f041 0120 	orrmi.w	r1, r1, #32
 8002c12:	6021      	strmi	r1, [r4, #0]
 8002c14:	b91b      	cbnz	r3, 8002c1e <_printf_i+0x15e>
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	f022 0220 	bic.w	r2, r2, #32
 8002c1c:	6022      	str	r2, [r4, #0]
 8002c1e:	2210      	movs	r2, #16
 8002c20:	e7b7      	b.n	8002b92 <_printf_i+0xd2>
 8002c22:	064d      	lsls	r5, r1, #25
 8002c24:	bf48      	it	mi
 8002c26:	b29b      	uxthmi	r3, r3
 8002c28:	e7ef      	b.n	8002c0a <_printf_i+0x14a>
 8002c2a:	4665      	mov	r5, ip
 8002c2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c30:	fb02 3311 	mls	r3, r2, r1, r3
 8002c34:	5cc3      	ldrb	r3, [r0, r3]
 8002c36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d1f5      	bne.n	8002c2c <_printf_i+0x16c>
 8002c40:	e7b9      	b.n	8002bb6 <_printf_i+0xf6>
 8002c42:	6813      	ldr	r3, [r2, #0]
 8002c44:	6825      	ldr	r5, [r4, #0]
 8002c46:	1d18      	adds	r0, r3, #4
 8002c48:	6961      	ldr	r1, [r4, #20]
 8002c4a:	6010      	str	r0, [r2, #0]
 8002c4c:	0628      	lsls	r0, r5, #24
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	d501      	bpl.n	8002c56 <_printf_i+0x196>
 8002c52:	6019      	str	r1, [r3, #0]
 8002c54:	e002      	b.n	8002c5c <_printf_i+0x19c>
 8002c56:	066a      	lsls	r2, r5, #25
 8002c58:	d5fb      	bpl.n	8002c52 <_printf_i+0x192>
 8002c5a:	8019      	strh	r1, [r3, #0]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	4665      	mov	r5, ip
 8002c60:	6123      	str	r3, [r4, #16]
 8002c62:	e7b9      	b.n	8002bd8 <_printf_i+0x118>
 8002c64:	6813      	ldr	r3, [r2, #0]
 8002c66:	1d19      	adds	r1, r3, #4
 8002c68:	6011      	str	r1, [r2, #0]
 8002c6a:	681d      	ldr	r5, [r3, #0]
 8002c6c:	6862      	ldr	r2, [r4, #4]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4628      	mov	r0, r5
 8002c72:	f000 f837 	bl	8002ce4 <memchr>
 8002c76:	b108      	cbz	r0, 8002c7c <_printf_i+0x1bc>
 8002c78:	1b40      	subs	r0, r0, r5
 8002c7a:	6060      	str	r0, [r4, #4]
 8002c7c:	6863      	ldr	r3, [r4, #4]
 8002c7e:	6123      	str	r3, [r4, #16]
 8002c80:	2300      	movs	r3, #0
 8002c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c86:	e7a7      	b.n	8002bd8 <_printf_i+0x118>
 8002c88:	6923      	ldr	r3, [r4, #16]
 8002c8a:	462a      	mov	r2, r5
 8002c8c:	4639      	mov	r1, r7
 8002c8e:	4630      	mov	r0, r6
 8002c90:	47c0      	blx	r8
 8002c92:	3001      	adds	r0, #1
 8002c94:	d0aa      	beq.n	8002bec <_printf_i+0x12c>
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	079b      	lsls	r3, r3, #30
 8002c9a:	d413      	bmi.n	8002cc4 <_printf_i+0x204>
 8002c9c:	68e0      	ldr	r0, [r4, #12]
 8002c9e:	9b03      	ldr	r3, [sp, #12]
 8002ca0:	4298      	cmp	r0, r3
 8002ca2:	bfb8      	it	lt
 8002ca4:	4618      	movlt	r0, r3
 8002ca6:	e7a3      	b.n	8002bf0 <_printf_i+0x130>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	464a      	mov	r2, r9
 8002cac:	4639      	mov	r1, r7
 8002cae:	4630      	mov	r0, r6
 8002cb0:	47c0      	blx	r8
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d09a      	beq.n	8002bec <_printf_i+0x12c>
 8002cb6:	3501      	adds	r5, #1
 8002cb8:	68e3      	ldr	r3, [r4, #12]
 8002cba:	9a03      	ldr	r2, [sp, #12]
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	42ab      	cmp	r3, r5
 8002cc0:	dcf2      	bgt.n	8002ca8 <_printf_i+0x1e8>
 8002cc2:	e7eb      	b.n	8002c9c <_printf_i+0x1dc>
 8002cc4:	2500      	movs	r5, #0
 8002cc6:	f104 0919 	add.w	r9, r4, #25
 8002cca:	e7f5      	b.n	8002cb8 <_printf_i+0x1f8>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ac      	bne.n	8002c2a <_printf_i+0x16a>
 8002cd0:	7803      	ldrb	r3, [r0, #0]
 8002cd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cda:	e76c      	b.n	8002bb6 <_printf_i+0xf6>
 8002cdc:	08002f85 	.word	0x08002f85
 8002ce0:	08002f96 	.word	0x08002f96

08002ce4 <memchr>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	b2c9      	uxtb	r1, r1
 8002ce8:	4402      	add	r2, r0
 8002cea:	4290      	cmp	r0, r2
 8002cec:	4603      	mov	r3, r0
 8002cee:	d101      	bne.n	8002cf4 <memchr+0x10>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e003      	b.n	8002cfc <memchr+0x18>
 8002cf4:	781c      	ldrb	r4, [r3, #0]
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	428c      	cmp	r4, r1
 8002cfa:	d1f6      	bne.n	8002cea <memchr+0x6>
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	bd10      	pop	{r4, pc}

08002d00 <memcpy>:
 8002d00:	b510      	push	{r4, lr}
 8002d02:	1e43      	subs	r3, r0, #1
 8002d04:	440a      	add	r2, r1
 8002d06:	4291      	cmp	r1, r2
 8002d08:	d100      	bne.n	8002d0c <memcpy+0xc>
 8002d0a:	bd10      	pop	{r4, pc}
 8002d0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d14:	e7f7      	b.n	8002d06 <memcpy+0x6>

08002d16 <memmove>:
 8002d16:	4288      	cmp	r0, r1
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	eb01 0302 	add.w	r3, r1, r2
 8002d1e:	d807      	bhi.n	8002d30 <memmove+0x1a>
 8002d20:	1e42      	subs	r2, r0, #1
 8002d22:	4299      	cmp	r1, r3
 8002d24:	d00a      	beq.n	8002d3c <memmove+0x26>
 8002d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d2a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d2e:	e7f8      	b.n	8002d22 <memmove+0xc>
 8002d30:	4283      	cmp	r3, r0
 8002d32:	d9f5      	bls.n	8002d20 <memmove+0xa>
 8002d34:	1881      	adds	r1, r0, r2
 8002d36:	1ad2      	subs	r2, r2, r3
 8002d38:	42d3      	cmn	r3, r2
 8002d3a:	d100      	bne.n	8002d3e <memmove+0x28>
 8002d3c:	bd10      	pop	{r4, pc}
 8002d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d42:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d46:	e7f7      	b.n	8002d38 <memmove+0x22>

08002d48 <_free_r>:
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	4605      	mov	r5, r0
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	d043      	beq.n	8002dd8 <_free_r+0x90>
 8002d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d54:	1f0c      	subs	r4, r1, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bfb8      	it	lt
 8002d5a:	18e4      	addlt	r4, r4, r3
 8002d5c:	f000 f8d0 	bl	8002f00 <__malloc_lock>
 8002d60:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <_free_r+0x94>)
 8002d62:	6813      	ldr	r3, [r2, #0]
 8002d64:	4610      	mov	r0, r2
 8002d66:	b933      	cbnz	r3, 8002d76 <_free_r+0x2e>
 8002d68:	6063      	str	r3, [r4, #4]
 8002d6a:	6014      	str	r4, [r2, #0]
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d72:	f000 b8c6 	b.w	8002f02 <__malloc_unlock>
 8002d76:	42a3      	cmp	r3, r4
 8002d78:	d90b      	bls.n	8002d92 <_free_r+0x4a>
 8002d7a:	6821      	ldr	r1, [r4, #0]
 8002d7c:	1862      	adds	r2, r4, r1
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	bf01      	itttt	eq
 8002d82:	681a      	ldreq	r2, [r3, #0]
 8002d84:	685b      	ldreq	r3, [r3, #4]
 8002d86:	1852      	addeq	r2, r2, r1
 8002d88:	6022      	streq	r2, [r4, #0]
 8002d8a:	6063      	str	r3, [r4, #4]
 8002d8c:	6004      	str	r4, [r0, #0]
 8002d8e:	e7ed      	b.n	8002d6c <_free_r+0x24>
 8002d90:	4613      	mov	r3, r2
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	b10a      	cbz	r2, 8002d9a <_free_r+0x52>
 8002d96:	42a2      	cmp	r2, r4
 8002d98:	d9fa      	bls.n	8002d90 <_free_r+0x48>
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	1858      	adds	r0, r3, r1
 8002d9e:	42a0      	cmp	r0, r4
 8002da0:	d10b      	bne.n	8002dba <_free_r+0x72>
 8002da2:	6820      	ldr	r0, [r4, #0]
 8002da4:	4401      	add	r1, r0
 8002da6:	1858      	adds	r0, r3, r1
 8002da8:	4282      	cmp	r2, r0
 8002daa:	6019      	str	r1, [r3, #0]
 8002dac:	d1de      	bne.n	8002d6c <_free_r+0x24>
 8002dae:	6810      	ldr	r0, [r2, #0]
 8002db0:	6852      	ldr	r2, [r2, #4]
 8002db2:	4401      	add	r1, r0
 8002db4:	6019      	str	r1, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	e7d8      	b.n	8002d6c <_free_r+0x24>
 8002dba:	d902      	bls.n	8002dc2 <_free_r+0x7a>
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	602b      	str	r3, [r5, #0]
 8002dc0:	e7d4      	b.n	8002d6c <_free_r+0x24>
 8002dc2:	6820      	ldr	r0, [r4, #0]
 8002dc4:	1821      	adds	r1, r4, r0
 8002dc6:	428a      	cmp	r2, r1
 8002dc8:	bf01      	itttt	eq
 8002dca:	6811      	ldreq	r1, [r2, #0]
 8002dcc:	6852      	ldreq	r2, [r2, #4]
 8002dce:	1809      	addeq	r1, r1, r0
 8002dd0:	6021      	streq	r1, [r4, #0]
 8002dd2:	6062      	str	r2, [r4, #4]
 8002dd4:	605c      	str	r4, [r3, #4]
 8002dd6:	e7c9      	b.n	8002d6c <_free_r+0x24>
 8002dd8:	bd38      	pop	{r3, r4, r5, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000090 	.word	0x20000090

08002de0 <_malloc_r>:
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	1ccd      	adds	r5, r1, #3
 8002de4:	f025 0503 	bic.w	r5, r5, #3
 8002de8:	3508      	adds	r5, #8
 8002dea:	2d0c      	cmp	r5, #12
 8002dec:	bf38      	it	cc
 8002dee:	250c      	movcc	r5, #12
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	4606      	mov	r6, r0
 8002df4:	db01      	blt.n	8002dfa <_malloc_r+0x1a>
 8002df6:	42a9      	cmp	r1, r5
 8002df8:	d903      	bls.n	8002e02 <_malloc_r+0x22>
 8002dfa:	230c      	movs	r3, #12
 8002dfc:	6033      	str	r3, [r6, #0]
 8002dfe:	2000      	movs	r0, #0
 8002e00:	bd70      	pop	{r4, r5, r6, pc}
 8002e02:	f000 f87d 	bl	8002f00 <__malloc_lock>
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <_malloc_r+0xac>)
 8002e08:	6814      	ldr	r4, [r2, #0]
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	b991      	cbnz	r1, 8002e34 <_malloc_r+0x54>
 8002e0e:	4c20      	ldr	r4, [pc, #128]	; (8002e90 <_malloc_r+0xb0>)
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	b91b      	cbnz	r3, 8002e1c <_malloc_r+0x3c>
 8002e14:	4630      	mov	r0, r6
 8002e16:	f000 f863 	bl	8002ee0 <_sbrk_r>
 8002e1a:	6020      	str	r0, [r4, #0]
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	4630      	mov	r0, r6
 8002e20:	f000 f85e 	bl	8002ee0 <_sbrk_r>
 8002e24:	1c43      	adds	r3, r0, #1
 8002e26:	d124      	bne.n	8002e72 <_malloc_r+0x92>
 8002e28:	230c      	movs	r3, #12
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	6033      	str	r3, [r6, #0]
 8002e2e:	f000 f868 	bl	8002f02 <__malloc_unlock>
 8002e32:	e7e4      	b.n	8002dfe <_malloc_r+0x1e>
 8002e34:	680b      	ldr	r3, [r1, #0]
 8002e36:	1b5b      	subs	r3, r3, r5
 8002e38:	d418      	bmi.n	8002e6c <_malloc_r+0x8c>
 8002e3a:	2b0b      	cmp	r3, #11
 8002e3c:	d90f      	bls.n	8002e5e <_malloc_r+0x7e>
 8002e3e:	600b      	str	r3, [r1, #0]
 8002e40:	18cc      	adds	r4, r1, r3
 8002e42:	50cd      	str	r5, [r1, r3]
 8002e44:	4630      	mov	r0, r6
 8002e46:	f000 f85c 	bl	8002f02 <__malloc_unlock>
 8002e4a:	f104 000b 	add.w	r0, r4, #11
 8002e4e:	1d23      	adds	r3, r4, #4
 8002e50:	f020 0007 	bic.w	r0, r0, #7
 8002e54:	1ac3      	subs	r3, r0, r3
 8002e56:	d0d3      	beq.n	8002e00 <_malloc_r+0x20>
 8002e58:	425a      	negs	r2, r3
 8002e5a:	50e2      	str	r2, [r4, r3]
 8002e5c:	e7d0      	b.n	8002e00 <_malloc_r+0x20>
 8002e5e:	684b      	ldr	r3, [r1, #4]
 8002e60:	428c      	cmp	r4, r1
 8002e62:	bf16      	itet	ne
 8002e64:	6063      	strne	r3, [r4, #4]
 8002e66:	6013      	streq	r3, [r2, #0]
 8002e68:	460c      	movne	r4, r1
 8002e6a:	e7eb      	b.n	8002e44 <_malloc_r+0x64>
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	6849      	ldr	r1, [r1, #4]
 8002e70:	e7cc      	b.n	8002e0c <_malloc_r+0x2c>
 8002e72:	1cc4      	adds	r4, r0, #3
 8002e74:	f024 0403 	bic.w	r4, r4, #3
 8002e78:	42a0      	cmp	r0, r4
 8002e7a:	d005      	beq.n	8002e88 <_malloc_r+0xa8>
 8002e7c:	1a21      	subs	r1, r4, r0
 8002e7e:	4630      	mov	r0, r6
 8002e80:	f000 f82e 	bl	8002ee0 <_sbrk_r>
 8002e84:	3001      	adds	r0, #1
 8002e86:	d0cf      	beq.n	8002e28 <_malloc_r+0x48>
 8002e88:	6025      	str	r5, [r4, #0]
 8002e8a:	e7db      	b.n	8002e44 <_malloc_r+0x64>
 8002e8c:	20000090 	.word	0x20000090
 8002e90:	20000094 	.word	0x20000094

08002e94 <_realloc_r>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	4607      	mov	r7, r0
 8002e98:	4614      	mov	r4, r2
 8002e9a:	460e      	mov	r6, r1
 8002e9c:	b921      	cbnz	r1, 8002ea8 <_realloc_r+0x14>
 8002e9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	f7ff bf9c 	b.w	8002de0 <_malloc_r>
 8002ea8:	b922      	cbnz	r2, 8002eb4 <_realloc_r+0x20>
 8002eaa:	f7ff ff4d 	bl	8002d48 <_free_r>
 8002eae:	4625      	mov	r5, r4
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eb4:	f000 f826 	bl	8002f04 <_malloc_usable_size_r>
 8002eb8:	42a0      	cmp	r0, r4
 8002eba:	d20f      	bcs.n	8002edc <_realloc_r+0x48>
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	f7ff ff8e 	bl	8002de0 <_malloc_r>
 8002ec4:	4605      	mov	r5, r0
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d0f2      	beq.n	8002eb0 <_realloc_r+0x1c>
 8002eca:	4631      	mov	r1, r6
 8002ecc:	4622      	mov	r2, r4
 8002ece:	f7ff ff17 	bl	8002d00 <memcpy>
 8002ed2:	4631      	mov	r1, r6
 8002ed4:	4638      	mov	r0, r7
 8002ed6:	f7ff ff37 	bl	8002d48 <_free_r>
 8002eda:	e7e9      	b.n	8002eb0 <_realloc_r+0x1c>
 8002edc:	4635      	mov	r5, r6
 8002ede:	e7e7      	b.n	8002eb0 <_realloc_r+0x1c>

08002ee0 <_sbrk_r>:
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	4c05      	ldr	r4, [pc, #20]	; (8002efc <_sbrk_r+0x1c>)
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	4608      	mov	r0, r1
 8002eea:	6023      	str	r3, [r4, #0]
 8002eec:	f7fd fb1c 	bl	8000528 <_sbrk>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_sbrk_r+0x1a>
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_sbrk_r+0x1a>
 8002ef8:	602b      	str	r3, [r5, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	20000130 	.word	0x20000130

08002f00 <__malloc_lock>:
 8002f00:	4770      	bx	lr

08002f02 <__malloc_unlock>:
 8002f02:	4770      	bx	lr

08002f04 <_malloc_usable_size_r>:
 8002f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f08:	1f18      	subs	r0, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfbc      	itt	lt
 8002f0e:	580b      	ldrlt	r3, [r1, r0]
 8002f10:	18c0      	addlt	r0, r0, r3
 8002f12:	4770      	bx	lr

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
