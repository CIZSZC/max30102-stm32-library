
max30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004214  08004214  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004214  08004214  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004214  08004214  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800421c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  0800428c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800428c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b870  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ab4  00000000  00000000  0002b909  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000980  00000000  00000000  0002d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002dd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001543a  00000000  00000000  0002e608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009580  00000000  00000000  00043a42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e80d  00000000  00000000  0004cfc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb7cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f80  00000000  00000000  000bb84c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003dd4 	.word	0x08003dd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003dd4 	.word	0x08003dd4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fdfb 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f88f 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f921 	bl	80003a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8c7 	bl	80002f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f8f3 	bl	800034c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  printf(CLEAR_TERMINAL TEXT_COLOR_DEFAULT);

//  hpo.fifoConfig = SMP_AVE_32|FIFO_ROLLOVER_DIS|FIFO_A_FULL_MAX;
  hpo.modeConfig = HR_MODE;
 8000166:	4b3f      	ldr	r3, [pc, #252]	; (8000264 <main+0x118>)
 8000168:	2202      	movs	r2, #2
 800016a:	705a      	strb	r2, [r3, #1]
  hpo.ledPulseAmplIr = 0x0F;
 800016c:	4b3d      	ldr	r3, [pc, #244]	; (8000264 <main+0x118>)
 800016e:	220f      	movs	r2, #15
 8000170:	711a      	strb	r2, [r3, #4]
  hpo.ledPulseAmplRed = 0x0F;
 8000172:	4b3c      	ldr	r3, [pc, #240]	; (8000264 <main+0x118>)
 8000174:	220f      	movs	r2, #15
 8000176:	70da      	strb	r2, [r3, #3]
  hpo.modeConfig = HR_MODE;
 8000178:	4b3a      	ldr	r3, [pc, #232]	; (8000264 <main+0x118>)
 800017a:	2202      	movs	r2, #2
 800017c:	705a      	strb	r2, [r3, #1]
  hpo.fifoConfig = FIFO_ROLLOVER_EN;
 800017e:	4b39      	ldr	r3, [pc, #228]	; (8000264 <main+0x118>)
 8000180:	2210      	movs	r2, #16
 8000182:	701a      	strb	r2, [r3, #0]
  hpo.address = MAX30102_I2C_ADDRESS;
 8000184:	4b37      	ldr	r3, [pc, #220]	; (8000264 <main+0x118>)
 8000186:	22ae      	movs	r2, #174	; 0xae
 8000188:	71da      	strb	r2, [r3, #7]
  hpo.hi2c = &hi2c1;
 800018a:	4b36      	ldr	r3, [pc, #216]	; (8000264 <main+0x118>)
 800018c:	4a36      	ldr	r2, [pc, #216]	; (8000268 <main+0x11c>)
 800018e:	609a      	str	r2, [r3, #8]
  po_init(&hpo);
 8000190:	4834      	ldr	r0, [pc, #208]	; (8000264 <main+0x118>)
 8000192:	f000 f9fd 	bl	8000590 <po_init>
  po_write_reg(&hpo, A_FULL_EN|PPG_RDY_EN, INT_ENABLE_1_REG);
 8000196:	2202      	movs	r2, #2
 8000198:	21c0      	movs	r1, #192	; 0xc0
 800019a:	4832      	ldr	r0, [pc, #200]	; (8000264 <main+0x118>)
 800019c:	f000 f9b6 	bl	800050c <po_write_reg>
//  po_write_reg(&hpo, DIE_TEMP_RDY_EN, INT_ENABLE_2_REG);

    uint8_t readBuff = 0;
 80001a0:	2300      	movs	r3, #0
 80001a2:	73fb      	strb	r3, [r7, #15]
//    po_write_reg(&hpo, 0x24, LED_PULSE_AMPLITUDE_IR_REG);
//    po_write_reg(&hpo, 0x24, LED_PULSE_AMPLITUDE_RED_REG);
//    po_write_reg(&hpo, 0x03, MODE_CONFIG_REG);

//    po_print_reg(&hpo, MODE_CONFIG_REG);
    printf(CLEAR_TERMINAL TEXT_COLOR_DEFAULT);
 80001a4:	4831      	ldr	r0, [pc, #196]	; (800026c <main+0x120>)
 80001a6:	f003 f93d 	bl	8003424 <iprintf>
    printf("Start\r\n");
 80001aa:	4831      	ldr	r0, [pc, #196]	; (8000270 <main+0x124>)
 80001ac:	f003 f9ae 	bl	800350c <puts>
    po_write_reg(&hpo, 0x00, FIFO_WR_PTR_REG);
 80001b0:	2204      	movs	r2, #4
 80001b2:	2100      	movs	r1, #0
 80001b4:	482b      	ldr	r0, [pc, #172]	; (8000264 <main+0x118>)
 80001b6:	f000 f9a9 	bl	800050c <po_write_reg>
    po_write_reg(&hpo, 0x00, FIFO_RD_PTR_REG);
 80001ba:	2206      	movs	r2, #6
 80001bc:	2100      	movs	r1, #0
 80001be:	4829      	ldr	r0, [pc, #164]	; (8000264 <main+0x118>)
 80001c0:	f000 f9a4 	bl	800050c <po_write_reg>
    po_write_reg(&hpo, 0x00, OVF_COUNTER_REG);
 80001c4:	2205      	movs	r2, #5
 80001c6:	2100      	movs	r1, #0
 80001c8:	4826      	ldr	r0, [pc, #152]	; (8000264 <main+0x118>)
 80001ca:	f000 f99f 	bl	800050c <po_write_reg>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint8_t intStatus = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
      po_read_reg(&hpo, &intStatus, INT_STATUS_1_REG);
 80001d2:	1dfb      	adds	r3, r7, #7
 80001d4:	2200      	movs	r2, #0
 80001d6:	4619      	mov	r1, r3
 80001d8:	4822      	ldr	r0, [pc, #136]	; (8000264 <main+0x118>)
 80001da:	f000 f91f 	bl	800041c <po_read_reg>
//      if((intStatus & A_FULL) != 0){
          uint8_t readBuff[3] = {0};
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	2100      	movs	r1, #0
 80001e2:	460a      	mov	r2, r1
 80001e4:	801a      	strh	r2, [r3, #0]
 80001e6:	460a      	mov	r2, r1
 80001e8:	709a      	strb	r2, [r3, #2]
          po_write_reg(&hpo, 0x00, FIFO_RD_PTR_REG);    //read from 0
 80001ea:	2206      	movs	r2, #6
 80001ec:	2100      	movs	r1, #0
 80001ee:	481d      	ldr	r0, [pc, #116]	; (8000264 <main+0x118>)
 80001f0:	f000 f98c 	bl	800050c <po_write_reg>
          uint8_t data = FIFO_DATA_REG;
 80001f4:	2307      	movs	r3, #7
 80001f6:	70fb      	strb	r3, [r7, #3]
          HAL_I2C_Master_Transmit(&hi2c1, hpo.address, &data, 1, HAL_MAX_DELAY);
 80001f8:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <main+0x118>)
 80001fa:	79db      	ldrb	r3, [r3, #7]
 80001fc:	b299      	uxth	r1, r3
 80001fe:	1cfa      	adds	r2, r7, #3
 8000200:	f04f 33ff 	mov.w	r3, #4294967295
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2301      	movs	r3, #1
 8000208:	4817      	ldr	r0, [pc, #92]	; (8000268 <main+0x11c>)
 800020a:	f001 f989 	bl	8001520 <HAL_I2C_Master_Transmit>
//          for(uint8_t i = 0; i < 32; i++){
              uint32_t result = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
              po_print_reg(&hpo, FIFO_RD_PTR_REG);
 8000212:	2106      	movs	r1, #6
 8000214:	4813      	ldr	r0, [pc, #76]	; (8000264 <main+0x118>)
 8000216:	f000 fa85 	bl	8000724 <po_print_reg>
              HAL_I2C_Master_Receive(&hi2c1, hpo.address, readBuff, 3, HAL_MAX_DELAY);
 800021a:	4b12      	ldr	r3, [pc, #72]	; (8000264 <main+0x118>)
 800021c:	79db      	ldrb	r3, [r3, #7]
 800021e:	b299      	uxth	r1, r3
 8000220:	1d3a      	adds	r2, r7, #4
 8000222:	f04f 33ff 	mov.w	r3, #4294967295
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2303      	movs	r3, #3
 800022a:	480f      	ldr	r0, [pc, #60]	; (8000268 <main+0x11c>)
 800022c:	f001 fa76 	bl	800171c <HAL_I2C_Master_Receive>
              result |= (uint32_t)(readBuff[0]<<16);
 8000230:	793b      	ldrb	r3, [r7, #4]
 8000232:	041b      	lsls	r3, r3, #16
 8000234:	461a      	mov	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	4313      	orrs	r3, r2
 800023a:	60bb      	str	r3, [r7, #8]
              result |= (uint32_t)(readBuff[1]<<8);
 800023c:	797b      	ldrb	r3, [r7, #5]
 800023e:	021b      	lsls	r3, r3, #8
 8000240:	461a      	mov	r2, r3
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	4313      	orrs	r3, r2
 8000246:	60bb      	str	r3, [r7, #8]
              result |= (uint32_t)(readBuff[1]);
 8000248:	797b      	ldrb	r3, [r7, #5]
 800024a:	461a      	mov	r2, r3
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	4313      	orrs	r3, r2
 8000250:	60bb      	str	r3, [r7, #8]
              printf("%ld\r\n", result);
 8000252:	68b9      	ldr	r1, [r7, #8]
 8000254:	4807      	ldr	r0, [pc, #28]	; (8000274 <main+0x128>)
 8000256:	f003 f8e5 	bl	8003424 <iprintf>
              HAL_Delay(50);
 800025a:	2032      	movs	r0, #50	; 0x32
 800025c:	f000 fdd8 	bl	8000e10 <HAL_Delay>
  {
 8000260:	e7b5      	b.n	80001ce <main+0x82>
 8000262:	bf00      	nop
 8000264:	2000008c 	.word	0x2000008c
 8000268:	200000a4 	.word	0x200000a4
 800026c:	08003dec 	.word	0x08003dec
 8000270:	08003df4 	.word	0x08003df4
 8000274:	08003dfc 	.word	0x08003dfc

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fdfe 	bl	8002e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a6:	2300      	movs	r3, #0
 80002a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 ff6a 	bl	8002188 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ba:	f000 f8a9 	bl	8000410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 f9d6 	bl	8002688 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e2:	f000 f895 	bl	8000410 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3740      	adds	r7, #64	; 0x40
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f4:	4b12      	ldr	r3, [pc, #72]	; (8000340 <MX_I2C1_Init+0x50>)
 80002f6:	4a13      	ldr	r2, [pc, #76]	; (8000344 <MX_I2C1_Init+0x54>)
 80002f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002fa:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_I2C1_Init+0x50>)
 80002fc:	4a12      	ldr	r2, [pc, #72]	; (8000348 <MX_I2C1_Init+0x58>)
 80002fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <MX_I2C1_Init+0x50>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_I2C1_Init+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_I2C1_Init+0x50>)
 800030e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <MX_I2C1_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_I2C1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000320:	4b07      	ldr	r3, [pc, #28]	; (8000340 <MX_I2C1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_I2C1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <MX_I2C1_Init+0x50>)
 800032e:	f000 ffcf 	bl	80012d0 <HAL_I2C_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000338:	f000 f86a 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200000a4 	.word	0x200000a4
 8000344:	40005400 	.word	0x40005400
 8000348:	000186a0 	.word	0x000186a0

0800034c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000352:	4a12      	ldr	r2, [pc, #72]	; (800039c <MX_USART1_UART_Init+0x50>)
 8000354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000356:	4b10      	ldr	r3, [pc, #64]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800035c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_USART1_UART_Init+0x4c>)
 8000384:	f002 fb1c 	bl	80029c0 <HAL_UART_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800038e:	f000 f83f 	bl	8000410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000f8 	.word	0x200000f8
 800039c:	40013800 	.word	0x40013800

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003ac:	f043 0304 	orr.w	r3, r3, #4
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0304 	and.w	r3, r3, #4
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003c4:	f043 0308 	orr.w	r3, r3, #8
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0308 	and.w	r3, r3, #8
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]

}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <_write>:

/* USER CODE BEGIN 4 */
#if defined(__GNUC__)
int _write(int fd, char * ptr, int len)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	f04f 33ff 	mov.w	r3, #4294967295
 80003f8:	68b9      	ldr	r1, [r7, #8]
 80003fa:	4804      	ldr	r0, [pc, #16]	; (800040c <_write+0x28>)
 80003fc:	f002 fb2d 	bl	8002a5a <HAL_UART_Transmit>
  return len;
 8000400:	687b      	ldr	r3, [r7, #4]
}
 8000402:	4618      	mov	r0, r3
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200000f8 	.word	0x200000f8

08000410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <po_read_reg>:
 */

#include "max30102_drv.h"
#include "utils.h"

HAL_StatusTypeDef po_read_reg(MAX30102_HandleTypeDef *hpo, uint8_t *regBuff, uint8_t regAddr){
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af02      	add	r7, sp, #8
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	4613      	mov	r3, r2
 8000428:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef retCode = HAL_OK;
 800042a:	2300      	movs	r3, #0
 800042c:	75fb      	strb	r3, [r7, #23]
    CHECK_PTR(hpo);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d10b      	bne.n	800044c <po_read_reg+0x30>
 8000434:	482f      	ldr	r0, [pc, #188]	; (80004f4 <po_read_reg+0xd8>)
 8000436:	f003 f869 	bl	800350c <puts>
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d14d      	bne.n	80004dc <po_read_reg+0xc0>
 8000440:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <po_read_reg+0xdc>)
 8000442:	4a2e      	ldr	r2, [pc, #184]	; (80004fc <po_read_reg+0xe0>)
 8000444:	210d      	movs	r1, #13
 8000446:	482e      	ldr	r0, [pc, #184]	; (8000500 <po_read_reg+0xe4>)
 8000448:	f002 fcc4 	bl	8002dd4 <__assert_func>
    CHECK_PTR(hpo->hi2c);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d10c      	bne.n	800046e <po_read_reg+0x52>
 8000454:	4827      	ldr	r0, [pc, #156]	; (80004f4 <po_read_reg+0xd8>)
 8000456:	f003 f859 	bl	800350c <puts>
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d13e      	bne.n	80004e0 <po_read_reg+0xc4>
 8000462:	4b28      	ldr	r3, [pc, #160]	; (8000504 <po_read_reg+0xe8>)
 8000464:	4a25      	ldr	r2, [pc, #148]	; (80004fc <po_read_reg+0xe0>)
 8000466:	210e      	movs	r1, #14
 8000468:	4825      	ldr	r0, [pc, #148]	; (8000500 <po_read_reg+0xe4>)
 800046a:	f002 fcb3 	bl	8002dd4 <__assert_func>
    CHECK_PTR(regBuff);
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d10b      	bne.n	800048c <po_read_reg+0x70>
 8000474:	481f      	ldr	r0, [pc, #124]	; (80004f4 <po_read_reg+0xd8>)
 8000476:	f003 f849 	bl	800350c <puts>
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	2b00      	cmp	r3, #0
 800047e:	d131      	bne.n	80004e4 <po_read_reg+0xc8>
 8000480:	4b21      	ldr	r3, [pc, #132]	; (8000508 <po_read_reg+0xec>)
 8000482:	4a1e      	ldr	r2, [pc, #120]	; (80004fc <po_read_reg+0xe0>)
 8000484:	210f      	movs	r1, #15
 8000486:	481e      	ldr	r0, [pc, #120]	; (8000500 <po_read_reg+0xe4>)
 8000488:	f002 fca4 	bl	8002dd4 <__assert_func>
    CHECK_SUCCESS(HAL_I2C_Master_Transmit(hpo->hi2c, hpo->address, &regAddr, 1, HAL_MAX_DELAY));
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	6898      	ldr	r0, [r3, #8]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	79db      	ldrb	r3, [r3, #7]
 8000494:	b299      	uxth	r1, r3
 8000496:	1dfa      	adds	r2, r7, #7
 8000498:	f04f 33ff 	mov.w	r3, #4294967295
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	2301      	movs	r3, #1
 80004a0:	f001 f83e 	bl	8001520 <HAL_I2C_Master_Transmit>
 80004a4:	4603      	mov	r3, r0
 80004a6:	75bb      	strb	r3, [r7, #22]
 80004a8:	7dbb      	ldrb	r3, [r7, #22]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d002      	beq.n	80004b4 <po_read_reg+0x98>
 80004ae:	7dbb      	ldrb	r3, [r7, #22]
 80004b0:	75fb      	strb	r3, [r7, #23]
 80004b2:	e01a      	b.n	80004ea <po_read_reg+0xce>
    CHECK_SUCCESS(HAL_I2C_Master_Receive(hpo->hi2c, hpo->address, regBuff, 1, HAL_MAX_DELAY));
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	6898      	ldr	r0, [r3, #8]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	79db      	ldrb	r3, [r3, #7]
 80004bc:	b299      	uxth	r1, r3
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	2301      	movs	r3, #1
 80004c6:	68ba      	ldr	r2, [r7, #8]
 80004c8:	f001 f928 	bl	800171c <HAL_I2C_Master_Receive>
 80004cc:	4603      	mov	r3, r0
 80004ce:	757b      	strb	r3, [r7, #21]
 80004d0:	7d7b      	ldrb	r3, [r7, #21]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d008      	beq.n	80004e8 <po_read_reg+0xcc>
 80004d6:	7d7b      	ldrb	r3, [r7, #21]
 80004d8:	75fb      	strb	r3, [r7, #23]
 80004da:	e006      	b.n	80004ea <po_read_reg+0xce>
    CHECK_PTR(hpo);
 80004dc:	bf00      	nop
 80004de:	e004      	b.n	80004ea <po_read_reg+0xce>
    CHECK_PTR(hpo->hi2c);
 80004e0:	bf00      	nop
 80004e2:	e002      	b.n	80004ea <po_read_reg+0xce>
    CHECK_PTR(regBuff);
 80004e4:	bf00      	nop
 80004e6:	e000      	b.n	80004ea <po_read_reg+0xce>

    exit:
 80004e8:	bf00      	nop
    return retCode;
 80004ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	08003e04 	.word	0x08003e04
 80004f8:	08003e0c 	.word	0x08003e0c
 80004fc:	080040f4 	.word	0x080040f4
 8000500:	08003e20 	.word	0x08003e20
 8000504:	08003e3c 	.word	0x08003e3c
 8000508:	08003e54 	.word	0x08003e54

0800050c <po_write_reg>:

HAL_StatusTypeDef po_write_reg(MAX30102_HandleTypeDef *hpo, uint8_t regData, uint8_t regAddr){
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af02      	add	r7, sp, #8
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
 8000518:	4613      	mov	r3, r2
 800051a:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef retCode = HAL_OK;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]
    uint8_t buff [2] = {regAddr, regData};
 8000520:	78bb      	ldrb	r3, [r7, #2]
 8000522:	733b      	strb	r3, [r7, #12]
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	737b      	strb	r3, [r7, #13]
    CHECK_PTR(hpo);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10b      	bne.n	8000546 <po_write_reg+0x3a>
 800052e:	4814      	ldr	r0, [pc, #80]	; (8000580 <po_write_reg+0x74>)
 8000530:	f002 ffec 	bl	800350c <puts>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d11a      	bne.n	8000570 <po_write_reg+0x64>
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <po_write_reg+0x78>)
 800053c:	4a12      	ldr	r2, [pc, #72]	; (8000588 <po_write_reg+0x7c>)
 800053e:	211a      	movs	r1, #26
 8000540:	4812      	ldr	r0, [pc, #72]	; (800058c <po_write_reg+0x80>)
 8000542:	f002 fc47 	bl	8002dd4 <__assert_func>
    CHECK_SUCCESS(HAL_I2C_Master_Transmit(hpo->hi2c, hpo->address, buff, 2, HAL_MAX_DELAY));
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6898      	ldr	r0, [r3, #8]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	79db      	ldrb	r3, [r3, #7]
 800054e:	b299      	uxth	r1, r3
 8000550:	f107 020c 	add.w	r2, r7, #12
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2302      	movs	r3, #2
 800055c:	f000 ffe0 	bl	8001520 <HAL_I2C_Master_Transmit>
 8000560:	4603      	mov	r3, r0
 8000562:	73bb      	strb	r3, [r7, #14]
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d004      	beq.n	8000574 <po_write_reg+0x68>
 800056a:	7bbb      	ldrb	r3, [r7, #14]
 800056c:	73fb      	strb	r3, [r7, #15]
 800056e:	e002      	b.n	8000576 <po_write_reg+0x6a>
    CHECK_PTR(hpo);
 8000570:	bf00      	nop
 8000572:	e000      	b.n	8000576 <po_write_reg+0x6a>

    exit:
 8000574:	bf00      	nop
    return retCode;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	08003e04 	.word	0x08003e04
 8000584:	08003e0c 	.word	0x08003e0c
 8000588:	08004100 	.word	0x08004100
 800058c:	08003e20 	.word	0x08003e20

08000590 <po_init>:

#define MAX_30102_PART_ID_MISMATCH 0

HAL_StatusTypeDef po_init(MAX30102_HandleTypeDef *hpo){
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef retCode = HAL_OK;
 8000598:	2300      	movs	r3, #0
 800059a:	75fb      	strb	r3, [r7, #23]
    CHECK_PTR(hpo);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d10c      	bne.n	80005bc <po_init+0x2c>
 80005a2:	485b      	ldr	r0, [pc, #364]	; (8000710 <po_init+0x180>)
 80005a4:	f002 ffb2 	bl	800350c <puts>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f040 80a5 	bne.w	80006fa <po_init+0x16a>
 80005b0:	4b58      	ldr	r3, [pc, #352]	; (8000714 <po_init+0x184>)
 80005b2:	4a59      	ldr	r2, [pc, #356]	; (8000718 <po_init+0x188>)
 80005b4:	2125      	movs	r1, #37	; 0x25
 80005b6:	4859      	ldr	r0, [pc, #356]	; (800071c <po_init+0x18c>)
 80005b8:	f002 fc0c 	bl	8002dd4 <__assert_func>
    CHECK_PTR(hpo->hi2c);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10d      	bne.n	80005e0 <po_init+0x50>
 80005c4:	4852      	ldr	r0, [pc, #328]	; (8000710 <po_init+0x180>)
 80005c6:	f002 ffa1 	bl	800350c <puts>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	f040 8095 	bne.w	80006fe <po_init+0x16e>
 80005d4:	4b52      	ldr	r3, [pc, #328]	; (8000720 <po_init+0x190>)
 80005d6:	4a50      	ldr	r2, [pc, #320]	; (8000718 <po_init+0x188>)
 80005d8:	2126      	movs	r1, #38	; 0x26
 80005da:	4850      	ldr	r0, [pc, #320]	; (800071c <po_init+0x18c>)
 80005dc:	f002 fbfa 	bl	8002dd4 <__assert_func>
    uint8_t partID = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	737b      	strb	r3, [r7, #13]
    CHECK_SUCCESS(po_write_reg(hpo, RESET, MODE_CONFIG_REG));
 80005e4:	2209      	movs	r2, #9
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ff8f 	bl	800050c <po_write_reg>
 80005ee:	4603      	mov	r3, r0
 80005f0:	75bb      	strb	r3, [r7, #22]
 80005f2:	7dbb      	ldrb	r3, [r7, #22]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <po_init+0x6e>
 80005f8:	7dbb      	ldrb	r3, [r7, #22]
 80005fa:	75fb      	strb	r3, [r7, #23]
 80005fc:	e082      	b.n	8000704 <po_init+0x174>
    CHECK_SUCCESS(po_read_reg(hpo, &partID, PART_ID_REG));  //read partID
 80005fe:	f107 030d 	add.w	r3, r7, #13
 8000602:	22ff      	movs	r2, #255	; 0xff
 8000604:	4619      	mov	r1, r3
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f7ff ff08 	bl	800041c <po_read_reg>
 800060c:	4603      	mov	r3, r0
 800060e:	757b      	strb	r3, [r7, #21]
 8000610:	7d7b      	ldrb	r3, [r7, #21]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <po_init+0x8c>
 8000616:	7d7b      	ldrb	r3, [r7, #21]
 8000618:	75fb      	strb	r3, [r7, #23]
 800061a:	e073      	b.n	8000704 <po_init+0x174>
    if(partID != MAX30102_PART_ID){ // Check partID
 800061c:	7b7b      	ldrb	r3, [r7, #13]
 800061e:	2b15      	cmp	r3, #21
 8000620:	d002      	beq.n	8000628 <po_init+0x98>
        retCode = HAL_ERROR;
 8000622:	2301      	movs	r3, #1
 8000624:	75fb      	strb	r3, [r7, #23]
        goto exit;
 8000626:	e06d      	b.n	8000704 <po_init+0x174>
    }
    CHECK_SUCCESS(po_write_reg(hpo, hpo->fifoConfig, FIFO_CONFIG_REG));
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2208      	movs	r2, #8
 800062e:	4619      	mov	r1, r3
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff ff6b 	bl	800050c <po_write_reg>
 8000636:	4603      	mov	r3, r0
 8000638:	753b      	strb	r3, [r7, #20]
 800063a:	7d3b      	ldrb	r3, [r7, #20]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <po_init+0xb6>
 8000640:	7d3b      	ldrb	r3, [r7, #20]
 8000642:	75fb      	strb	r3, [r7, #23]
 8000644:	e05e      	b.n	8000704 <po_init+0x174>
    CHECK_SUCCESS(po_write_reg(hpo, hpo->modeConfig, MODE_CONFIG_REG));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	2209      	movs	r2, #9
 800064c:	4619      	mov	r1, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f7ff ff5c 	bl	800050c <po_write_reg>
 8000654:	4603      	mov	r3, r0
 8000656:	74fb      	strb	r3, [r7, #19]
 8000658:	7cfb      	ldrb	r3, [r7, #19]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <po_init+0xd4>
 800065e:	7cfb      	ldrb	r3, [r7, #19]
 8000660:	75fb      	strb	r3, [r7, #23]
 8000662:	e04f      	b.n	8000704 <po_init+0x174>
    CHECK_SUCCESS(po_write_reg(hpo, hpo->spo2Config, SPO2_CONFIG_REG));
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	789b      	ldrb	r3, [r3, #2]
 8000668:	220a      	movs	r2, #10
 800066a:	4619      	mov	r1, r3
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff4d 	bl	800050c <po_write_reg>
 8000672:	4603      	mov	r3, r0
 8000674:	74bb      	strb	r3, [r7, #18]
 8000676:	7cbb      	ldrb	r3, [r7, #18]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <po_init+0xf2>
 800067c:	7cbb      	ldrb	r3, [r7, #18]
 800067e:	75fb      	strb	r3, [r7, #23]
 8000680:	e040      	b.n	8000704 <po_init+0x174>
    CHECK_SUCCESS(po_write_reg(hpo, hpo->ledPulseAmplRed, LED_PULSE_AMPLITUDE_RED_REG));
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	78db      	ldrb	r3, [r3, #3]
 8000686:	220c      	movs	r2, #12
 8000688:	4619      	mov	r1, r3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f7ff ff3e 	bl	800050c <po_write_reg>
 8000690:	4603      	mov	r3, r0
 8000692:	747b      	strb	r3, [r7, #17]
 8000694:	7c7b      	ldrb	r3, [r7, #17]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d002      	beq.n	80006a0 <po_init+0x110>
 800069a:	7c7b      	ldrb	r3, [r7, #17]
 800069c:	75fb      	strb	r3, [r7, #23]
 800069e:	e031      	b.n	8000704 <po_init+0x174>
    CHECK_SUCCESS(po_write_reg(hpo, hpo->ledPulseAmplIr, LED_PULSE_AMPLITUDE_IR_REG));
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	220d      	movs	r2, #13
 80006a6:	4619      	mov	r1, r3
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff ff2f 	bl	800050c <po_write_reg>
 80006ae:	4603      	mov	r3, r0
 80006b0:	743b      	strb	r3, [r7, #16]
 80006b2:	7c3b      	ldrb	r3, [r7, #16]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <po_init+0x12e>
 80006b8:	7c3b      	ldrb	r3, [r7, #16]
 80006ba:	75fb      	strb	r3, [r7, #23]
 80006bc:	e022      	b.n	8000704 <po_init+0x174>
    CHECK_SUCCESS(po_write_reg(hpo, hpo->multiLed_2_1, M_LED_CTRL_2_1_REG));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795b      	ldrb	r3, [r3, #5]
 80006c2:	2211      	movs	r2, #17
 80006c4:	4619      	mov	r1, r3
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ff20 	bl	800050c <po_write_reg>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73fb      	strb	r3, [r7, #15]
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <po_init+0x14c>
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	75fb      	strb	r3, [r7, #23]
 80006da:	e013      	b.n	8000704 <po_init+0x174>
    CHECK_SUCCESS(po_write_reg(hpo, hpo->multiLed_4_3, M_LED_CTRL_4_3_REG));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	799b      	ldrb	r3, [r3, #6]
 80006e0:	2212      	movs	r2, #18
 80006e2:	4619      	mov	r1, r3
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff11 	bl	800050c <po_write_reg>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73bb      	strb	r3, [r7, #14]
 80006ee:	7bbb      	ldrb	r3, [r7, #14]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d006      	beq.n	8000702 <po_init+0x172>
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	75fb      	strb	r3, [r7, #23]
 80006f8:	e004      	b.n	8000704 <po_init+0x174>
    CHECK_PTR(hpo);
 80006fa:	bf00      	nop
 80006fc:	e002      	b.n	8000704 <po_init+0x174>
    CHECK_PTR(hpo->hi2c);
 80006fe:	bf00      	nop
 8000700:	e000      	b.n	8000704 <po_init+0x174>
    exit:
 8000702:	bf00      	nop
    return retCode;
 8000704:	7dfb      	ldrb	r3, [r7, #23]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	08003e04 	.word	0x08003e04
 8000714:	08003e0c 	.word	0x08003e0c
 8000718:	08004110 	.word	0x08004110
 800071c:	08003e20 	.word	0x08003e20
 8000720:	08003e3c 	.word	0x08003e3c

08000724 <po_print_reg>:
    *temp_2_comp = (int16_t)((intTemp<<4)|fractTemp);
    exit:
    return retCode;
}

HAL_StatusTypeDef po_print_reg(MAX30102_HandleTypeDef *hpo, uint8_t regAddr){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef retCode = HAL_OK;
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]
    uint8_t readReg = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	737b      	strb	r3, [r7, #13]
    CHECK_PTR(hpo);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10c      	bne.n	8000758 <po_print_reg+0x34>
 800073e:	4877      	ldr	r0, [pc, #476]	; (800091c <po_print_reg+0x1f8>)
 8000740:	f002 fee4 	bl	800350c <puts>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	f040 80df 	bne.w	800090a <po_print_reg+0x1e6>
 800074c:	4b74      	ldr	r3, [pc, #464]	; (8000920 <po_print_reg+0x1fc>)
 800074e:	4a75      	ldr	r2, [pc, #468]	; (8000924 <po_print_reg+0x200>)
 8000750:	214f      	movs	r1, #79	; 0x4f
 8000752:	4875      	ldr	r0, [pc, #468]	; (8000928 <po_print_reg+0x204>)
 8000754:	f002 fb3e 	bl	8002dd4 <__assert_func>
    CHECK_PTR(hpo->hi2c);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10d      	bne.n	800077c <po_print_reg+0x58>
 8000760:	486e      	ldr	r0, [pc, #440]	; (800091c <po_print_reg+0x1f8>)
 8000762:	f002 fed3 	bl	800350c <puts>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	2b00      	cmp	r3, #0
 800076c:	f040 80cf 	bne.w	800090e <po_print_reg+0x1ea>
 8000770:	4b6e      	ldr	r3, [pc, #440]	; (800092c <po_print_reg+0x208>)
 8000772:	4a6c      	ldr	r2, [pc, #432]	; (8000924 <po_print_reg+0x200>)
 8000774:	2150      	movs	r1, #80	; 0x50
 8000776:	486c      	ldr	r0, [pc, #432]	; (8000928 <po_print_reg+0x204>)
 8000778:	f002 fb2c 	bl	8002dd4 <__assert_func>
    CHECK_SUCCESS(po_read_reg(hpo, &readReg, regAddr));
 800077c:	78fa      	ldrb	r2, [r7, #3]
 800077e:	f107 030d 	add.w	r3, r7, #13
 8000782:	4619      	mov	r1, r3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fe49 	bl	800041c <po_read_reg>
 800078a:	4603      	mov	r3, r0
 800078c:	73bb      	strb	r3, [r7, #14]
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <po_print_reg+0x76>
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e0ba      	b.n	8000910 <po_print_reg+0x1ec>
    switch (regAddr) {
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	2b09      	cmp	r3, #9
 800079e:	d06e      	beq.n	800087e <po_print_reg+0x15a>
 80007a0:	2b09      	cmp	r3, #9
 80007a2:	dc18      	bgt.n	80007d6 <po_print_reg+0xb2>
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d04c      	beq.n	8000842 <po_print_reg+0x11e>
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	dc0b      	bgt.n	80007c4 <po_print_reg+0xa0>
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d036      	beq.n	800081e <po_print_reg+0xfa>
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	dc02      	bgt.n	80007ba <po_print_reg+0x96>
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d02c      	beq.n	8000812 <po_print_reg+0xee>
 80007b8:	e0a3      	b.n	8000902 <po_print_reg+0x1de>
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d035      	beq.n	800082a <po_print_reg+0x106>
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d039      	beq.n	8000836 <po_print_reg+0x112>
 80007c2:	e09e      	b.n	8000902 <po_print_reg+0x1de>
 80007c4:	2b06      	cmp	r3, #6
 80007c6:	d048      	beq.n	800085a <po_print_reg+0x136>
 80007c8:	2b06      	cmp	r3, #6
 80007ca:	db40      	blt.n	800084e <po_print_reg+0x12a>
 80007cc:	2b07      	cmp	r3, #7
 80007ce:	d04a      	beq.n	8000866 <po_print_reg+0x142>
 80007d0:	2b08      	cmp	r3, #8
 80007d2:	d04e      	beq.n	8000872 <po_print_reg+0x14e>
 80007d4:	e095      	b.n	8000902 <po_print_reg+0x1de>
 80007d6:	2b12      	cmp	r3, #18
 80007d8:	d06f      	beq.n	80008ba <po_print_reg+0x196>
 80007da:	2b12      	cmp	r3, #18
 80007dc:	dc0b      	bgt.n	80007f6 <po_print_reg+0xd2>
 80007de:	2b0c      	cmp	r3, #12
 80007e0:	d05f      	beq.n	80008a2 <po_print_reg+0x17e>
 80007e2:	2b0c      	cmp	r3, #12
 80007e4:	dc02      	bgt.n	80007ec <po_print_reg+0xc8>
 80007e6:	2b0a      	cmp	r3, #10
 80007e8:	d04f      	beq.n	800088a <po_print_reg+0x166>
 80007ea:	e08a      	b.n	8000902 <po_print_reg+0x1de>
 80007ec:	2b0d      	cmp	r3, #13
 80007ee:	d052      	beq.n	8000896 <po_print_reg+0x172>
 80007f0:	2b11      	cmp	r3, #17
 80007f2:	d05c      	beq.n	80008ae <po_print_reg+0x18a>
 80007f4:	e085      	b.n	8000902 <po_print_reg+0x1de>
 80007f6:	2b21      	cmp	r3, #33	; 0x21
 80007f8:	d071      	beq.n	80008de <po_print_reg+0x1ba>
 80007fa:	2b21      	cmp	r3, #33	; 0x21
 80007fc:	dc04      	bgt.n	8000808 <po_print_reg+0xe4>
 80007fe:	2b1f      	cmp	r3, #31
 8000800:	d061      	beq.n	80008c6 <po_print_reg+0x1a2>
 8000802:	2b20      	cmp	r3, #32
 8000804:	d065      	beq.n	80008d2 <po_print_reg+0x1ae>
 8000806:	e07c      	b.n	8000902 <po_print_reg+0x1de>
 8000808:	2bfe      	cmp	r3, #254	; 0xfe
 800080a:	d06e      	beq.n	80008ea <po_print_reg+0x1c6>
 800080c:	2bff      	cmp	r3, #255	; 0xff
 800080e:	d072      	beq.n	80008f6 <po_print_reg+0x1d2>
 8000810:	e077      	b.n	8000902 <po_print_reg+0x1de>
    case INT_STATUS_1_REG:
        printf("INT_STATUS_1_REG: %d\r\n", readReg);
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	4619      	mov	r1, r3
 8000816:	4846      	ldr	r0, [pc, #280]	; (8000930 <po_print_reg+0x20c>)
 8000818:	f002 fe04 	bl	8003424 <iprintf>
        break;
 800081c:	e078      	b.n	8000910 <po_print_reg+0x1ec>
    case INT_STATUS_2_REG:
        printf("INT_STATUS_2_REG: %d\r\n", readReg);
 800081e:	7b7b      	ldrb	r3, [r7, #13]
 8000820:	4619      	mov	r1, r3
 8000822:	4844      	ldr	r0, [pc, #272]	; (8000934 <po_print_reg+0x210>)
 8000824:	f002 fdfe 	bl	8003424 <iprintf>
        break;
 8000828:	e072      	b.n	8000910 <po_print_reg+0x1ec>
    case INT_ENABLE_1_REG:
        printf("INT_ENABLE_1_REG: %d\r\n", readReg);
 800082a:	7b7b      	ldrb	r3, [r7, #13]
 800082c:	4619      	mov	r1, r3
 800082e:	4842      	ldr	r0, [pc, #264]	; (8000938 <po_print_reg+0x214>)
 8000830:	f002 fdf8 	bl	8003424 <iprintf>
        break;
 8000834:	e06c      	b.n	8000910 <po_print_reg+0x1ec>
    case INT_ENABLE_2_REG:
        printf("INT_ENABLE_2_REG: %d\r\n", readReg);
 8000836:	7b7b      	ldrb	r3, [r7, #13]
 8000838:	4619      	mov	r1, r3
 800083a:	4840      	ldr	r0, [pc, #256]	; (800093c <po_print_reg+0x218>)
 800083c:	f002 fdf2 	bl	8003424 <iprintf>
        break;
 8000840:	e066      	b.n	8000910 <po_print_reg+0x1ec>
    case FIFO_WR_PTR_REG:
        printf("FIFO_WR_PTR_REG: %d\r\n", readReg);
 8000842:	7b7b      	ldrb	r3, [r7, #13]
 8000844:	4619      	mov	r1, r3
 8000846:	483e      	ldr	r0, [pc, #248]	; (8000940 <po_print_reg+0x21c>)
 8000848:	f002 fdec 	bl	8003424 <iprintf>
        break;
 800084c:	e060      	b.n	8000910 <po_print_reg+0x1ec>
    case OVF_COUNTER_REG:
        printf("OVF_COUNTER_REG: %d\r\n", readReg);
 800084e:	7b7b      	ldrb	r3, [r7, #13]
 8000850:	4619      	mov	r1, r3
 8000852:	483c      	ldr	r0, [pc, #240]	; (8000944 <po_print_reg+0x220>)
 8000854:	f002 fde6 	bl	8003424 <iprintf>
        break;
 8000858:	e05a      	b.n	8000910 <po_print_reg+0x1ec>
    case FIFO_RD_PTR_REG:
        printf("FIFO_RD_PTR_REG: %d\r\n", readReg);
 800085a:	7b7b      	ldrb	r3, [r7, #13]
 800085c:	4619      	mov	r1, r3
 800085e:	483a      	ldr	r0, [pc, #232]	; (8000948 <po_print_reg+0x224>)
 8000860:	f002 fde0 	bl	8003424 <iprintf>
        break;
 8000864:	e054      	b.n	8000910 <po_print_reg+0x1ec>
    case FIFO_DATA_REG:
        printf("FIFO_DATA_REG: %d\r\n", readReg);
 8000866:	7b7b      	ldrb	r3, [r7, #13]
 8000868:	4619      	mov	r1, r3
 800086a:	4838      	ldr	r0, [pc, #224]	; (800094c <po_print_reg+0x228>)
 800086c:	f002 fdda 	bl	8003424 <iprintf>
        break;
 8000870:	e04e      	b.n	8000910 <po_print_reg+0x1ec>
    case FIFO_CONFIG_REG:
        printf("FIFO_CONFIG_REG: %d\r\n", readReg);
 8000872:	7b7b      	ldrb	r3, [r7, #13]
 8000874:	4619      	mov	r1, r3
 8000876:	4836      	ldr	r0, [pc, #216]	; (8000950 <po_print_reg+0x22c>)
 8000878:	f002 fdd4 	bl	8003424 <iprintf>
        break;
 800087c:	e048      	b.n	8000910 <po_print_reg+0x1ec>
    case MODE_CONFIG_REG:
        printf("MODE_CONFIG_REG: %d\r\n", readReg);
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	4619      	mov	r1, r3
 8000882:	4834      	ldr	r0, [pc, #208]	; (8000954 <po_print_reg+0x230>)
 8000884:	f002 fdce 	bl	8003424 <iprintf>
        break;
 8000888:	e042      	b.n	8000910 <po_print_reg+0x1ec>
    case SPO2_CONFIG_REG:
        printf("SPO2_CONFIG_REG: %d\r\n", readReg);
 800088a:	7b7b      	ldrb	r3, [r7, #13]
 800088c:	4619      	mov	r1, r3
 800088e:	4832      	ldr	r0, [pc, #200]	; (8000958 <po_print_reg+0x234>)
 8000890:	f002 fdc8 	bl	8003424 <iprintf>
        break;
 8000894:	e03c      	b.n	8000910 <po_print_reg+0x1ec>
    case LED_PULSE_AMPLITUDE_IR_REG:
        printf("LED_PULSE_AMPLITUDE_IR_REG: %d\r\n", readReg);
 8000896:	7b7b      	ldrb	r3, [r7, #13]
 8000898:	4619      	mov	r1, r3
 800089a:	4830      	ldr	r0, [pc, #192]	; (800095c <po_print_reg+0x238>)
 800089c:	f002 fdc2 	bl	8003424 <iprintf>
        break;
 80008a0:	e036      	b.n	8000910 <po_print_reg+0x1ec>
    case LED_PULSE_AMPLITUDE_RED_REG:
        printf("LED_PULSE_AMPLITUDE_RED_REG: %d\r\n", readReg);
 80008a2:	7b7b      	ldrb	r3, [r7, #13]
 80008a4:	4619      	mov	r1, r3
 80008a6:	482e      	ldr	r0, [pc, #184]	; (8000960 <po_print_reg+0x23c>)
 80008a8:	f002 fdbc 	bl	8003424 <iprintf>
        break;
 80008ac:	e030      	b.n	8000910 <po_print_reg+0x1ec>
    case M_LED_CTRL_2_1_REG:
        printf("M_LED_CTRL_2_1_REG: %d\r\n", readReg);
 80008ae:	7b7b      	ldrb	r3, [r7, #13]
 80008b0:	4619      	mov	r1, r3
 80008b2:	482c      	ldr	r0, [pc, #176]	; (8000964 <po_print_reg+0x240>)
 80008b4:	f002 fdb6 	bl	8003424 <iprintf>
        break;
 80008b8:	e02a      	b.n	8000910 <po_print_reg+0x1ec>
    case M_LED_CTRL_4_3_REG:
        printf("M_LED_CTRL_4_3_REG: %d\r\n", readReg);
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
 80008bc:	4619      	mov	r1, r3
 80008be:	482a      	ldr	r0, [pc, #168]	; (8000968 <po_print_reg+0x244>)
 80008c0:	f002 fdb0 	bl	8003424 <iprintf>
        break;
 80008c4:	e024      	b.n	8000910 <po_print_reg+0x1ec>
    case DIE_TEMP_INT_REG:
        printf("DIE_TEMP_INT_REG: %d\r\n", readReg);
 80008c6:	7b7b      	ldrb	r3, [r7, #13]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4828      	ldr	r0, [pc, #160]	; (800096c <po_print_reg+0x248>)
 80008cc:	f002 fdaa 	bl	8003424 <iprintf>
        break;
 80008d0:	e01e      	b.n	8000910 <po_print_reg+0x1ec>
    case DIE_TEMP_FRACT_REG:
        printf("DIE_TEMP_FRACT_REG: %d\r\n", readReg);
 80008d2:	7b7b      	ldrb	r3, [r7, #13]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4826      	ldr	r0, [pc, #152]	; (8000970 <po_print_reg+0x24c>)
 80008d8:	f002 fda4 	bl	8003424 <iprintf>
        break;
 80008dc:	e018      	b.n	8000910 <po_print_reg+0x1ec>
    case DIE_TEMP_CONFIG_REG:
        printf("DIE_TEMP_CONFIG_REG: %d\r\n", readReg);
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4824      	ldr	r0, [pc, #144]	; (8000974 <po_print_reg+0x250>)
 80008e4:	f002 fd9e 	bl	8003424 <iprintf>
        break;
 80008e8:	e012      	b.n	8000910 <po_print_reg+0x1ec>
    case REVISION_ID_REG:
        printf("REVISION_ID_REG: %d\r\n", readReg);
 80008ea:	7b7b      	ldrb	r3, [r7, #13]
 80008ec:	4619      	mov	r1, r3
 80008ee:	4822      	ldr	r0, [pc, #136]	; (8000978 <po_print_reg+0x254>)
 80008f0:	f002 fd98 	bl	8003424 <iprintf>
        break;
 80008f4:	e00c      	b.n	8000910 <po_print_reg+0x1ec>
    case PART_ID_REG:
        printf("PART_ID_REG:: %d\r\n", readReg);
 80008f6:	7b7b      	ldrb	r3, [r7, #13]
 80008f8:	4619      	mov	r1, r3
 80008fa:	4820      	ldr	r0, [pc, #128]	; (800097c <po_print_reg+0x258>)
 80008fc:	f002 fd92 	bl	8003424 <iprintf>
        break;
 8000900:	e006      	b.n	8000910 <po_print_reg+0x1ec>
    default:
        printf("INVALID REG ADDRESS!\r\n");
 8000902:	481f      	ldr	r0, [pc, #124]	; (8000980 <po_print_reg+0x25c>)
 8000904:	f002 fe02 	bl	800350c <puts>
        break;
 8000908:	e002      	b.n	8000910 <po_print_reg+0x1ec>
    CHECK_PTR(hpo);
 800090a:	bf00      	nop
 800090c:	e000      	b.n	8000910 <po_print_reg+0x1ec>
    CHECK_PTR(hpo->hi2c);
 800090e:	bf00      	nop
    }
    exit:
    return retCode;
 8000910:	7bfb      	ldrb	r3, [r7, #15]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	08003e04 	.word	0x08003e04
 8000920:	08003e0c 	.word	0x08003e0c
 8000924:	08004118 	.word	0x08004118
 8000928:	08003e20 	.word	0x08003e20
 800092c:	08003e3c 	.word	0x08003e3c
 8000930:	08003e88 	.word	0x08003e88
 8000934:	08003ea0 	.word	0x08003ea0
 8000938:	08003eb8 	.word	0x08003eb8
 800093c:	08003ed0 	.word	0x08003ed0
 8000940:	08003ee8 	.word	0x08003ee8
 8000944:	08003f00 	.word	0x08003f00
 8000948:	08003f18 	.word	0x08003f18
 800094c:	08003f30 	.word	0x08003f30
 8000950:	08003f44 	.word	0x08003f44
 8000954:	08003f5c 	.word	0x08003f5c
 8000958:	08003f74 	.word	0x08003f74
 800095c:	08003f8c 	.word	0x08003f8c
 8000960:	08003fb0 	.word	0x08003fb0
 8000964:	08003fd4 	.word	0x08003fd4
 8000968:	08003ff0 	.word	0x08003ff0
 800096c:	0800400c 	.word	0x0800400c
 8000970:	08004024 	.word	0x08004024
 8000974:	08004040 	.word	0x08004040
 8000978:	0800405c 	.word	0x0800405c
 800097c:	08004074 	.word	0x08004074
 8000980:	08004088 	.word	0x08004088

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_MspInit+0x5c>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <HAL_MspInit+0x5c>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_MspInit+0x5c>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x5c>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_MspInit+0x5c>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	61d3      	str	r3, [r2, #28]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x5c>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_MspInit+0x60>)
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_MspInit+0x60>)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010000 	.word	0x40010000

080009e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <HAL_I2C_MspInit+0x70>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d123      	bne.n	8000a50 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_I2C_MspInit+0x74>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <HAL_I2C_MspInit+0x74>)
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_I2C_MspInit+0x74>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0308 	and.w	r3, r3, #8
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a20:	23c0      	movs	r3, #192	; 0xc0
 8000a22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	2312      	movs	r3, #18
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4619      	mov	r1, r3
 8000a32:	480b      	ldr	r0, [pc, #44]	; (8000a60 <HAL_I2C_MspInit+0x78>)
 8000a34:	f000 faf2 	bl	800101c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_I2C_MspInit+0x74>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_I2C_MspInit+0x74>)
 8000a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a42:	61d3      	str	r3, [r2, #28]
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_I2C_MspInit+0x74>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <HAL_UART_MspInit+0x8c>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d131      	bne.n	8000ae8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_UART_MspInit+0x90>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <HAL_UART_MspInit+0x90>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_UART_MspInit+0x90>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0x90>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_UART_MspInit+0x90>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_UART_MspInit+0x90>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ab8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <HAL_UART_MspInit+0x94>)
 8000aca:	f000 faa7 	bl	800101c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_UART_MspInit+0x94>)
 8000ae4:	f000 fa9a 	bl	800101c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40013800 	.word	0x40013800
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010800 	.word	0x40010800

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <HardFault_Handler+0x4>

08000b0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <UsageFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f946 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	return 1;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <_kill>:

int _kill(int pid, int sig)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b68:	f002 f952 	bl	8002e10 <__errno>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	2316      	movs	r3, #22
 8000b70:	6013      	str	r3, [r2, #0]
	return -1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_exit>:

void _exit (int status)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b86:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffe7 	bl	8000b5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b90:	e7fe      	b.n	8000b90 <_exit+0x12>

08000b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e00a      	b.n	8000bba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	4601      	mov	r1, r0
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	60ba      	str	r2, [r7, #8]
 8000bb0:	b2ca      	uxtb	r2, r1
 8000bb2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	dbf0      	blt.n	8000ba4 <_read+0x12>
	}

return len;
 8000bc2:	687b      	ldr	r3, [r7, #4]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	return -1;
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <_isatty>:

int _isatty(int file)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	return 1;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f002 f8d8 	bl	8002e10 <__errno>
 8000c60:	4602      	mov	r2, r0
 8000c62:	230c      	movs	r3, #12
 8000c64:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20005000 	.word	0x20005000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000098 	.word	0x20000098
 8000c94:	20000140 	.word	0x20000140

08000c98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <SystemInit+0x5c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <SystemInit+0x5c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <SystemInit+0x5c>)
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	4911      	ldr	r1, [pc, #68]	; (8000cf4 <SystemInit+0x5c>)
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <SystemInit+0x60>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <SystemInit+0x5c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <SystemInit+0x5c>)
 8000cba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <SystemInit+0x5c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SystemInit+0x5c>)
 8000cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <SystemInit+0x5c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <SystemInit+0x5c>)
 8000cd6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cda:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SystemInit+0x5c>)
 8000cde:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ce2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SystemInit+0x64>)
 8000ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cea:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	f8ff0000 	.word	0xf8ff0000
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d02:	e003      	b.n	8000d0c <LoopCopyDataInit>

08000d04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d0a:	3104      	adds	r1, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d14:	d3f6      	bcc.n	8000d04 <CopyDataInit>
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d18:	e002      	b.n	8000d20 <LoopFillZerobss>

08000d1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d1c:	f842 3b04 	str.w	r3, [r2], #4

08000d20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d24:	d3f9      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d26:	f7ff ffb7 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f002 f889 	bl	8002e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2e:	f7ff fa0d 	bl	800014c <main>
  bx lr
 8000d32:	4770      	bx	lr
  ldr r3, =_sidata
 8000d34:	0800421c 	.word	0x0800421c
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d3c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000d40:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000d44:	20000140 	.word	0x20000140

08000d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_2_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x28>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_Init+0x28>)
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f929 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f808 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff fe0c 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f933 	bl	8001002 <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 f909 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x20>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_IncTick+0x20>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000138 	.word	0x20000138

08000dfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <HAL_GetTick+0x10>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	20000138 	.word	0x20000138

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff fff0 	bl	8000dfc <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_Delay+0x40>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffe0 	bl	8000dfc <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff90 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff49 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff5e 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff90 	bl	8000f0c <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5f 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffb0 	bl	8000f70 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b08b      	sub	sp, #44	; 0x2c
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102e:	e127      	b.n	8001280 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001030:	2201      	movs	r2, #1
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 8116 	bne.w	800127a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b12      	cmp	r3, #18
 8001054:	d034      	beq.n	80010c0 <HAL_GPIO_Init+0xa4>
 8001056:	2b12      	cmp	r3, #18
 8001058:	d80d      	bhi.n	8001076 <HAL_GPIO_Init+0x5a>
 800105a:	2b02      	cmp	r3, #2
 800105c:	d02b      	beq.n	80010b6 <HAL_GPIO_Init+0x9a>
 800105e:	2b02      	cmp	r3, #2
 8001060:	d804      	bhi.n	800106c <HAL_GPIO_Init+0x50>
 8001062:	2b00      	cmp	r3, #0
 8001064:	d031      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 8001066:	2b01      	cmp	r3, #1
 8001068:	d01c      	beq.n	80010a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800106a:	e048      	b.n	80010fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800106c:	2b03      	cmp	r3, #3
 800106e:	d043      	beq.n	80010f8 <HAL_GPIO_Init+0xdc>
 8001070:	2b11      	cmp	r3, #17
 8001072:	d01b      	beq.n	80010ac <HAL_GPIO_Init+0x90>
          break;
 8001074:	e043      	b.n	80010fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001076:	4a89      	ldr	r2, [pc, #548]	; (800129c <HAL_GPIO_Init+0x280>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d026      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 800107c:	4a87      	ldr	r2, [pc, #540]	; (800129c <HAL_GPIO_Init+0x280>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d806      	bhi.n	8001090 <HAL_GPIO_Init+0x74>
 8001082:	4a87      	ldr	r2, [pc, #540]	; (80012a0 <HAL_GPIO_Init+0x284>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d020      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 8001088:	4a86      	ldr	r2, [pc, #536]	; (80012a4 <HAL_GPIO_Init+0x288>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d01d      	beq.n	80010ca <HAL_GPIO_Init+0xae>
          break;
 800108e:	e036      	b.n	80010fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001090:	4a85      	ldr	r2, [pc, #532]	; (80012a8 <HAL_GPIO_Init+0x28c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d019      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 8001096:	4a85      	ldr	r2, [pc, #532]	; (80012ac <HAL_GPIO_Init+0x290>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d016      	beq.n	80010ca <HAL_GPIO_Init+0xae>
 800109c:	4a84      	ldr	r2, [pc, #528]	; (80012b0 <HAL_GPIO_Init+0x294>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0xae>
          break;
 80010a2:	e02c      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e028      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	3304      	adds	r3, #4
 80010b2:	623b      	str	r3, [r7, #32]
          break;
 80010b4:	e023      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	3308      	adds	r3, #8
 80010bc:	623b      	str	r3, [r7, #32]
          break;
 80010be:	e01e      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	330c      	adds	r3, #12
 80010c6:	623b      	str	r3, [r7, #32]
          break;
 80010c8:	e019      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010d2:	2304      	movs	r3, #4
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e012      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d105      	bne.n	80010ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e0:	2308      	movs	r3, #8
 80010e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	611a      	str	r2, [r3, #16]
          break;
 80010ea:	e008      	b.n	80010fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ec:	2308      	movs	r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	615a      	str	r2, [r3, #20]
          break;
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2bff      	cmp	r3, #255	; 0xff
 8001102:	d801      	bhi.n	8001108 <HAL_GPIO_Init+0xec>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	e001      	b.n	800110c <HAL_GPIO_Init+0xf0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3304      	adds	r3, #4
 800110c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	2bff      	cmp	r3, #255	; 0xff
 8001112:	d802      	bhi.n	800111a <HAL_GPIO_Init+0xfe>
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x104>
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	3b08      	subs	r3, #8
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	210f      	movs	r1, #15
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	401a      	ands	r2, r3
 8001132:	6a39      	ldr	r1, [r7, #32]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	431a      	orrs	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 8096 	beq.w	800127a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <HAL_GPIO_Init+0x298>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <HAL_GPIO_Init+0x298>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b56      	ldr	r3, [pc, #344]	; (80012b4 <HAL_GPIO_Init+0x298>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001166:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <HAL_GPIO_Init+0x29c>)
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4013      	ands	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <HAL_GPIO_Init+0x2a0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x19e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4a      	ldr	r2, [pc, #296]	; (80012c0 <HAL_GPIO_Init+0x2a4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x19a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <HAL_GPIO_Init+0x2a8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x196>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2ac>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x192>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x1a0>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e004      	b.n	80011bc <HAL_GPIO_Init+0x1a0>
 80011b2:	2302      	movs	r3, #2
 80011b4:	e002      	b.n	80011bc <HAL_GPIO_Init+0x1a0>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <HAL_GPIO_Init+0x1a0>
 80011ba:	2300      	movs	r3, #0
 80011bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011be:	f002 0203 	and.w	r2, r2, #3
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4093      	lsls	r3, r2
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011cc:	493a      	ldr	r1, [pc, #232]	; (80012b8 <HAL_GPIO_Init+0x29c>)
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4938      	ldr	r1, [pc, #224]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
 80011f2:	e006      	b.n	8001202 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	4933      	ldr	r1, [pc, #204]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 80011fe:	4013      	ands	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800120e:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	492e      	ldr	r1, [pc, #184]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	43db      	mvns	r3, r3
 8001224:	4929      	ldr	r1, [pc, #164]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001226:	4013      	ands	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	4924      	ldr	r1, [pc, #144]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	608b      	str	r3, [r1, #8]
 8001242:	e006      	b.n	8001252 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	43db      	mvns	r3, r3
 800124c:	491f      	ldr	r1, [pc, #124]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 800124e:	4013      	ands	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	491a      	ldr	r1, [pc, #104]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	60cb      	str	r3, [r1, #12]
 800126a:	e006      	b.n	800127a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	43db      	mvns	r3, r3
 8001274:	4915      	ldr	r1, [pc, #84]	; (80012cc <HAL_GPIO_Init+0x2b0>)
 8001276:	4013      	ands	r3, r2
 8001278:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	3301      	adds	r3, #1
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	fa22 f303 	lsr.w	r3, r2, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	f47f aed0 	bne.w	8001030 <HAL_GPIO_Init+0x14>
  }
}
 8001290:	bf00      	nop
 8001292:	372c      	adds	r7, #44	; 0x2c
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	10210000 	.word	0x10210000
 80012a0:	10110000 	.word	0x10110000
 80012a4:	10120000 	.word	0x10120000
 80012a8:	10310000 	.word	0x10310000
 80012ac:	10320000 	.word	0x10320000
 80012b0:	10220000 	.word	0x10220000
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40011400 	.word	0x40011400
 80012cc:	40010400 	.word	0x40010400

080012d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e10f      	b.n	8001502 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fb76 	bl	80009e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2224      	movs	r2, #36	; 0x24
 8001300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001314:	f001 fb0e 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8001318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a7b      	ldr	r2, [pc, #492]	; (800150c <HAL_I2C_Init+0x23c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d807      	bhi.n	8001334 <HAL_I2C_Init+0x64>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4a7a      	ldr	r2, [pc, #488]	; (8001510 <HAL_I2C_Init+0x240>)
 8001328:	4293      	cmp	r3, r2
 800132a:	bf94      	ite	ls
 800132c:	2301      	movls	r3, #1
 800132e:	2300      	movhi	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	e006      	b.n	8001342 <HAL_I2C_Init+0x72>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a77      	ldr	r2, [pc, #476]	; (8001514 <HAL_I2C_Init+0x244>)
 8001338:	4293      	cmp	r3, r2
 800133a:	bf94      	ite	ls
 800133c:	2301      	movls	r3, #1
 800133e:	2300      	movhi	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0db      	b.n	8001502 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a72      	ldr	r2, [pc, #456]	; (8001518 <HAL_I2C_Init+0x248>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0c9b      	lsrs	r3, r3, #18
 8001354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	430a      	orrs	r2, r1
 8001368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a64      	ldr	r2, [pc, #400]	; (800150c <HAL_I2C_Init+0x23c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d802      	bhi.n	8001384 <HAL_I2C_Init+0xb4>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3301      	adds	r3, #1
 8001382:	e009      	b.n	8001398 <HAL_I2C_Init+0xc8>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	4a63      	ldr	r2, [pc, #396]	; (800151c <HAL_I2C_Init+0x24c>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	099b      	lsrs	r3, r3, #6
 8001396:	3301      	adds	r3, #1
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	430b      	orrs	r3, r1
 800139e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4956      	ldr	r1, [pc, #344]	; (800150c <HAL_I2C_Init+0x23c>)
 80013b4:	428b      	cmp	r3, r1
 80013b6:	d80d      	bhi.n	80013d4 <HAL_I2C_Init+0x104>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1e59      	subs	r1, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c6:	3301      	adds	r3, #1
 80013c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	bf38      	it	cc
 80013d0:	2304      	movcc	r3, #4
 80013d2:	e04f      	b.n	8001474 <HAL_I2C_Init+0x1a4>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d111      	bne.n	8001400 <HAL_I2C_Init+0x130>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1e58      	subs	r0, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6859      	ldr	r1, [r3, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	440b      	add	r3, r1
 80013ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	e012      	b.n	8001426 <HAL_I2C_Init+0x156>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1e58      	subs	r0, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6859      	ldr	r1, [r3, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	0099      	lsls	r1, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	fbb0 f3f3 	udiv	r3, r0, r3
 8001416:	3301      	adds	r3, #1
 8001418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Init+0x15e>
 800142a:	2301      	movs	r3, #1
 800142c:	e022      	b.n	8001474 <HAL_I2C_Init+0x1a4>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10e      	bne.n	8001454 <HAL_I2C_Init+0x184>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1e58      	subs	r0, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6859      	ldr	r1, [r3, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	440b      	add	r3, r1
 8001444:	fbb0 f3f3 	udiv	r3, r0, r3
 8001448:	3301      	adds	r3, #1
 800144a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001452:	e00f      	b.n	8001474 <HAL_I2C_Init+0x1a4>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	1e58      	subs	r0, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6859      	ldr	r1, [r3, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	0099      	lsls	r1, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	fbb0 f3f3 	udiv	r3, r0, r3
 800146a:	3301      	adds	r3, #1
 800146c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	6809      	ldr	r1, [r1, #0]
 8001478:	4313      	orrs	r3, r2
 800147a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6911      	ldr	r1, [r2, #16]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68d2      	ldr	r2, [r2, #12]
 80014ae:	4311      	orrs	r1, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2220      	movs	r2, #32
 80014ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	000186a0 	.word	0x000186a0
 8001510:	001e847f 	.word	0x001e847f
 8001514:	003d08ff 	.word	0x003d08ff
 8001518:	431bde83 	.word	0x431bde83
 800151c:	10624dd3 	.word	0x10624dd3

08001520 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af02      	add	r7, sp, #8
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	461a      	mov	r2, r3
 800152c:	460b      	mov	r3, r1
 800152e:	817b      	strh	r3, [r7, #10]
 8001530:	4613      	mov	r3, r2
 8001532:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001534:	f7ff fc62 	bl	8000dfc <HAL_GetTick>
 8001538:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b20      	cmp	r3, #32
 8001544:	f040 80e0 	bne.w	8001708 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2319      	movs	r3, #25
 800154e:	2201      	movs	r2, #1
 8001550:	4970      	ldr	r1, [pc, #448]	; (8001714 <HAL_I2C_Master_Transmit+0x1f4>)
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fc3c 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800155e:	2302      	movs	r3, #2
 8001560:	e0d3      	b.n	800170a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_I2C_Master_Transmit+0x50>
 800156c:	2302      	movs	r3, #2
 800156e:	e0cc      	b.n	800170a <HAL_I2C_Master_Transmit+0x1ea>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d007      	beq.n	8001596 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2221      	movs	r2, #33	; 0x21
 80015aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2210      	movs	r2, #16
 80015b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	893a      	ldrh	r2, [r7, #8]
 80015c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4a50      	ldr	r2, [pc, #320]	; (8001718 <HAL_I2C_Master_Transmit+0x1f8>)
 80015d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015d8:	8979      	ldrh	r1, [r7, #10]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	6a3a      	ldr	r2, [r7, #32]
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 faca 	bl	8001b78 <I2C_MasterRequestWrite>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e08d      	b.n	800170a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001604:	e066      	b.n	80016d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	6a39      	ldr	r1, [r7, #32]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 fcb6 	bl	8001f7c <I2C_WaitOnTXEFlagUntilTimeout>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00d      	beq.n	8001632 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	2b04      	cmp	r3, #4
 800161c:	d107      	bne.n	800162e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e06b      	b.n	800170a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164c:	b29b      	uxth	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b04      	cmp	r3, #4
 800166e:	d11b      	bne.n	80016a8 <HAL_I2C_Master_Transmit+0x188>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	d017      	beq.n	80016a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001692:	b29b      	uxth	r3, r3
 8001694:	3b01      	subs	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a0:	3b01      	subs	r3, #1
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	6a39      	ldr	r1, [r7, #32]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fca6 	bl	8001ffe <I2C_WaitOnBTFFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00d      	beq.n	80016d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d107      	bne.n	80016d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e01a      	b.n	800170a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d194      	bne.n	8001606 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2220      	movs	r2, #32
 80016f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	e000      	b.n	800170a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001708:	2302      	movs	r3, #2
  }
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	00100002 	.word	0x00100002
 8001718:	ffff0000 	.word	0xffff0000

0800171c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	; 0x30
 8001720:	af02      	add	r7, sp, #8
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	461a      	mov	r2, r3
 8001728:	460b      	mov	r3, r1
 800172a:	817b      	strh	r3, [r7, #10]
 800172c:	4613      	mov	r3, r2
 800172e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff fb64 	bl	8000dfc <HAL_GetTick>
 8001734:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b20      	cmp	r3, #32
 8001740:	f040 8213 	bne.w	8001b6a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2319      	movs	r3, #25
 800174a:	2201      	movs	r2, #1
 800174c:	497e      	ldr	r1, [pc, #504]	; (8001948 <HAL_I2C_Master_Receive+0x22c>)
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fb3e 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800175a:	2302      	movs	r3, #2
 800175c:	e206      	b.n	8001b6c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_I2C_Master_Receive+0x50>
 8001768:	2302      	movs	r3, #2
 800176a:	e1ff      	b.n	8001b6c <HAL_I2C_Master_Receive+0x450>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d007      	beq.n	8001792 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0201 	orr.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2222      	movs	r2, #34	; 0x22
 80017a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2210      	movs	r2, #16
 80017ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	893a      	ldrh	r2, [r7, #8]
 80017c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4a5e      	ldr	r2, [pc, #376]	; (800194c <HAL_I2C_Master_Receive+0x230>)
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017d4:	8979      	ldrh	r1, [r7, #10]
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 fa42 	bl	8001c64 <I2C_MasterRequestRead>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e1c0      	b.n	8001b6c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d113      	bne.n	800181a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	623b      	str	r3, [r7, #32]
 8001806:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	e194      	b.n	8001b44 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	2b01      	cmp	r3, #1
 8001820:	d11d      	bne.n	800185e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001830:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001832:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800185a:	b662      	cpsie	i
 800185c:	e172      	b.n	8001b44 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001862:	2b02      	cmp	r3, #2
 8001864:	d11d      	bne.n	80018a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001874:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001876:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800189c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800189e:	b662      	cpsie	i
 80018a0:	e150      	b.n	8001b44 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018c8:	e13c      	b.n	8001b44 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	f200 80f5 	bhi.w	8001abe <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d123      	bne.n	8001924 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f000 fbcd 	bl	8002080 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e13d      	b.n	8001b6c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	691a      	ldr	r2, [r3, #16]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001922:	e10f      	b.n	8001b44 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001928:	2b02      	cmp	r3, #2
 800192a:	d150      	bne.n	80019ce <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001932:	2200      	movs	r2, #0
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <HAL_I2C_Master_Receive+0x234>)
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 fa4a 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e112      	b.n	8001b6c <HAL_I2C_Master_Receive+0x450>
 8001946:	bf00      	nop
 8001948:	00100002 	.word	0x00100002
 800194c:	ffff0000 	.word	0xffff0000
 8001950:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001964:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001998:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019cc:	e0ba      	b.n	8001b44 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	2200      	movs	r2, #0
 80019d6:	4967      	ldr	r1, [pc, #412]	; (8001b74 <HAL_I2C_Master_Receive+0x458>)
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 f9f9 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0c1      	b.n	8001b6c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a32:	2200      	movs	r2, #0
 8001a34:	494f      	ldr	r1, [pc, #316]	; (8001b74 <HAL_I2C_Master_Receive+0x458>)
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f9ca 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e092      	b.n	8001b6c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a54:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a88:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001abc:	e042      	b.n	8001b44 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fadc 	bl	8002080 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e04c      	b.n	8001b6c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d118      	bne.n	8001b44 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f47f aebe 	bne.w	80018ca <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e000      	b.n	8001b6c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
  }
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	00010004 	.word	0x00010004

08001b78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	460b      	mov	r3, r1
 8001b86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d006      	beq.n	8001ba2 <I2C_MasterRequestWrite+0x2a>
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d003      	beq.n	8001ba2 <I2C_MasterRequestWrite+0x2a>
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ba0:	d108      	bne.n	8001bb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e00b      	b.n	8001bcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d107      	bne.n	8001bcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f8f9 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e035      	b.n	8001c54 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bf0:	d108      	bne.n	8001c04 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	e01b      	b.n	8001c3c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	11db      	asrs	r3, r3, #7
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 0306 	and.w	r3, r3, #6
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f063 030f 	orn	r3, r3, #15
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <I2C_MasterRequestWrite+0xe4>)
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f92b 	bl	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e010      	b.n	8001c54 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c32:	897b      	ldrh	r3, [r7, #10]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <I2C_MasterRequestWrite+0xe8>)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f91b 	bl	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	00010008 	.word	0x00010008
 8001c60:	00010002 	.word	0x00010002

08001c64 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	460b      	mov	r3, r1
 8001c72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c88:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d006      	beq.n	8001c9e <I2C_MasterRequestRead+0x3a>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d003      	beq.n	8001c9e <I2C_MasterRequestRead+0x3a>
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c9c:	d108      	bne.n	8001cb0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e00b      	b.n	8001cc8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	2b11      	cmp	r3, #17
 8001cb6:	d107      	bne.n	8001cc8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f87b 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e06d      	b.n	8001dc0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cec:	d108      	bne.n	8001d00 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cee:	897b      	ldrh	r3, [r7, #10]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	e053      	b.n	8001da8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d00:	897b      	ldrh	r3, [r7, #10]
 8001d02:	11db      	asrs	r3, r3, #7
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	f003 0306 	and.w	r3, r3, #6
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f063 030f 	orn	r3, r3, #15
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	492a      	ldr	r1, [pc, #168]	; (8001dc8 <I2C_MasterRequestRead+0x164>)
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f8ad 	bl	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e048      	b.n	8001dc0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d2e:	897b      	ldrh	r3, [r7, #10]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4923      	ldr	r1, [pc, #140]	; (8001dcc <I2C_MasterRequestRead+0x168>)
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f89d 	bl	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e038      	b.n	8001dc0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f825 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e017      	b.n	8001dc0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001d90:	897b      	ldrh	r3, [r7, #10]
 8001d92:	11db      	asrs	r3, r3, #7
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f003 0306 	and.w	r3, r3, #6
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f063 030e 	orn	r3, r3, #14
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <I2C_MasterRequestRead+0x168>)
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f865 	bl	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	00010008 	.word	0x00010008
 8001dcc:	00010002 	.word	0x00010002

08001dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de0:	e025      	b.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de8:	d021      	beq.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dea:	f7ff f807 	bl	8000dfc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d302      	bcc.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d116      	bne.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f043 0220 	orr.w	r2, r3, #32
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e023      	b.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10d      	bne.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4013      	ands	r3, r2
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	e00c      	b.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d0b6      	beq.n	8001de2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e8c:	e051      	b.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9c:	d123      	bne.n	8001ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f043 0204 	orr.w	r2, r3, #4
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e046      	b.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d021      	beq.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eee:	f7fe ff85 	bl	8000dfc <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d302      	bcc.n	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d116      	bne.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f043 0220 	orr.w	r2, r3, #32
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e020      	b.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10c      	bne.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4013      	ands	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	e00b      	b.n	8001f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	4013      	ands	r3, r2
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d18d      	bne.n	8001e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f88:	e02d      	b.n	8001fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f8ce 	bl	800212c <I2C_IsAcknowledgeFailed>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e02d      	b.n	8001ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d021      	beq.n	8001fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa2:	f7fe ff2b 	bl	8000dfc <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d302      	bcc.n	8001fb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d116      	bne.n	8001fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f043 0220 	orr.w	r2, r3, #32
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e007      	b.n	8001ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff0:	2b80      	cmp	r3, #128	; 0x80
 8001ff2:	d1ca      	bne.n	8001f8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800200a:	e02d      	b.n	8002068 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f88d 	bl	800212c <I2C_IsAcknowledgeFailed>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e02d      	b.n	8002078 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002022:	d021      	beq.n	8002068 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002024:	f7fe feea 	bl	8000dfc <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	d302      	bcc.n	800203a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e007      	b.n	8002078 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b04      	cmp	r3, #4
 8002074:	d1ca      	bne.n	800200c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800208c:	e042      	b.n	8002114 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b10      	cmp	r3, #16
 800209a:	d119      	bne.n	80020d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0210 	mvn.w	r2, #16
 80020a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e029      	b.n	8002124 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d0:	f7fe fe94 	bl	8000dfc <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d302      	bcc.n	80020e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d116      	bne.n	8002114 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e007      	b.n	8002124 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d1b5      	bne.n	800208e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d11b      	bne.n	800217c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800214c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2220      	movs	r2, #32
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f043 0204 	orr.w	r2, r3, #4
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e26c      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8087 	beq.w	80022b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a8:	4b92      	ldr	r3, [pc, #584]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d00c      	beq.n	80021ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b4:	4b8f      	ldr	r3, [pc, #572]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d112      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5e>
 80021c0:	4b8c      	ldr	r3, [pc, #560]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021cc:	d10b      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ce:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d06c      	beq.n	80022b4 <HAL_RCC_OscConfig+0x12c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d168      	bne.n	80022b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e246      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x76>
 80021f0:	4b80      	ldr	r3, [pc, #512]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a7f      	ldr	r2, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	e02e      	b.n	800225c <HAL_RCC_OscConfig+0xd4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x98>
 8002206:	4b7b      	ldr	r3, [pc, #492]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7a      	ldr	r2, [pc, #488]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b78      	ldr	r3, [pc, #480]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a77      	ldr	r2, [pc, #476]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e01d      	b.n	800225c <HAL_RCC_OscConfig+0xd4>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0xbc>
 800222a:	4b72      	ldr	r3, [pc, #456]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a71      	ldr	r2, [pc, #452]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0xd4>
 8002244:	4b6b      	ldr	r3, [pc, #428]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a6a      	ldr	r2, [pc, #424]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a67      	ldr	r2, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fdca 	bl	8000dfc <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe fdc6 	bl	8000dfc <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1fa      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0xe4>
 800228a:	e014      	b.n	80022b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fdb6 	bl	8000dfc <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7fe fdb2 	bl	8000dfc <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1e6      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x10c>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d063      	beq.n	800238a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ce:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d11c      	bne.n	8002314 <HAL_RCC_OscConfig+0x18c>
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d116      	bne.n	8002314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_RCC_OscConfig+0x176>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e1ba      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4939      	ldr	r1, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	e03a      	b.n	800238a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7fe fd6b 	bl	8000dfc <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232a:	f7fe fd67 	bl	8000dfc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e19b      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4927      	ldr	r1, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
 800235c:	e015      	b.n	800238a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7fe fd4a 	bl	8000dfc <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236c:	f7fe fd46 	bl	8000dfc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e17a      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d03a      	beq.n	800240c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d019      	beq.n	80023d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_RCC_OscConfig+0x274>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7fe fd2a 	bl	8000dfc <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ac:	f7fe fd26 	bl	8000dfc <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e15a      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f000 fada 	bl	8002984 <RCC_Delay>
 80023d0:	e01c      	b.n	800240c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_RCC_OscConfig+0x274>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7fe fd10 	bl	8000dfc <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023de:	e00f      	b.n	8002400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fd0c 	bl	8000dfc <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d908      	bls.n	8002400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e140      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	42420000 	.word	0x42420000
 80023fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	4b9e      	ldr	r3, [pc, #632]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e9      	bne.n	80023e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a6 	beq.w	8002566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241e:	4b97      	ldr	r3, [pc, #604]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10d      	bne.n	8002446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	4b94      	ldr	r3, [pc, #592]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a93      	ldr	r2, [pc, #588]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b91      	ldr	r3, [pc, #580]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002442:	2301      	movs	r3, #1
 8002444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d118      	bne.n	8002484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a8a      	ldr	r2, [pc, #552]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245e:	f7fe fccd 	bl	8000dfc <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002466:	f7fe fcc9 	bl	8000dfc <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0fd      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	4b81      	ldr	r3, [pc, #516]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x312>
 800248c:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6213      	str	r3, [r2, #32]
 8002498:	e02d      	b.n	80024f6 <HAL_RCC_OscConfig+0x36e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x334>
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a75      	ldr	r2, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	4b73      	ldr	r3, [pc, #460]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a72      	ldr	r2, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	e01c      	b.n	80024f6 <HAL_RCC_OscConfig+0x36e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d10c      	bne.n	80024de <HAL_RCC_OscConfig+0x356>
 80024c4:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a6c      	ldr	r2, [pc, #432]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a69      	ldr	r2, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6213      	str	r3, [r2, #32]
 80024dc:	e00b      	b.n	80024f6 <HAL_RCC_OscConfig+0x36e>
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a66      	ldr	r2, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	4b64      	ldr	r3, [pc, #400]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a63      	ldr	r2, [pc, #396]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d015      	beq.n	800252a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7fe fc7d 	bl	8000dfc <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7fe fc79 	bl	8000dfc <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0ab      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251c:	4b57      	ldr	r3, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ee      	beq.n	8002506 <HAL_RCC_OscConfig+0x37e>
 8002528:	e014      	b.n	8002554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe fc67 	bl	8000dfc <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe fc63 	bl	8000dfc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e095      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002548:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ee      	bne.n	8002532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d105      	bne.n	8002566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255a:	4b48      	ldr	r3, [pc, #288]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a47      	ldr	r2, [pc, #284]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8081 	beq.w	8002672 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002570:	4b42      	ldr	r3, [pc, #264]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d061      	beq.n	8002640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d146      	bne.n	8002612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_OscConfig+0x4fc>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe fc37 	bl	8000dfc <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7fe fc33 	bl	8000dfc <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e067      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b8:	d108      	bne.n	80025cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ba:	4b30      	ldr	r3, [pc, #192]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	492d      	ldr	r1, [pc, #180]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a19      	ldr	r1, [r3, #32]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	430b      	orrs	r3, r1
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x4fc>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7fe fc07 	bl	8000dfc <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f2:	f7fe fc03 	bl	8000dfc <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e037      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x46a>
 8002610:	e02f      	b.n	8002672 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <HAL_RCC_OscConfig+0x4fc>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fbf0 	bl	8000dfc <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe fbec 	bl	8000dfc <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e020      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x498>
 800263e:	e018      	b.n	8002672 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e013      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	429a      	cmp	r2, r3
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
 8002684:	42420060 	.word	0x42420060

08002688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d0      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4965      	ldr	r1, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e073      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06b      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7fe fb40 	bl	8000dfc <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7fe fb3c 	bl	8000dfc <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e053      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4922      	ldr	r1, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4601      	mov	r1, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	5cd3      	ldrb	r3, [r2, r3]
 800282a:	fa21 f303 	lsr.w	r3, r1, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1cc>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fa9e 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	08004128 	.word	0x08004128
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b490      	push	{r4, r7}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002864:	1d3c      	adds	r4, r7, #4
 8002866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb4>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b04      	cmp	r3, #4
 8002894:	d002      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x40>
 8002896:	2b08      	cmp	r3, #8
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x46>
 800289a:	e02d      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800289c:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <HAL_RCC_GetSysClockFreq+0xbc>)
 800289e:	623b      	str	r3, [r7, #32]
      break;
 80028a0:	e02d      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	0c9b      	lsrs	r3, r3, #18
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ae:	4413      	add	r3, r2
 80028b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c5b      	lsrs	r3, r3, #17
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ce:	4413      	add	r3, r2
 80028d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4a0f      	ldr	r2, [pc, #60]	; (8002918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028da:	fb02 f203 	mul.w	r2, r2, r3
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	e004      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	4a0c      	ldr	r2, [pc, #48]	; (800291c <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ec:	fb02 f303 	mul.w	r3, r2, r3
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	623b      	str	r3, [r7, #32]
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028fa:	623b      	str	r3, [r7, #32]
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3728      	adds	r7, #40	; 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc90      	pop	{r4, r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	080040e0 	.word	0x080040e0
 8002910:	080040f0 	.word	0x080040f0
 8002914:	40021000 	.word	0x40021000
 8002918:	007a1200 	.word	0x007a1200
 800291c:	003d0900 	.word	0x003d0900

08002920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002924:	4b02      	ldr	r3, [pc, #8]	; (8002930 <HAL_RCC_GetHCLKFreq+0x10>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	20000000 	.word	0x20000000

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002938:	f7ff fff2 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 800293c:	4601      	mov	r1, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4a03      	ldr	r2, [pc, #12]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	08004138 	.word	0x08004138

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002960:	f7ff ffde 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 8002964:	4601      	mov	r1, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	0adb      	lsrs	r3, r3, #11
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4a03      	ldr	r2, [pc, #12]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002972:	5cd3      	ldrb	r3, [r2, r3]
 8002974:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40021000 	.word	0x40021000
 8002980:	08004138 	.word	0x08004138

08002984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <RCC_Delay+0x34>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <RCC_Delay+0x38>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0a5b      	lsrs	r3, r3, #9
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029a0:	bf00      	nop
  }
  while (Delay --);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	60fa      	str	r2, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f9      	bne.n	80029a0 <RCC_Delay+0x1c>
}
 80029ac:	bf00      	nop
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000000 	.word	0x20000000
 80029bc:	10624dd3 	.word	0x10624dd3

080029c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e03f      	b.n	8002a52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe f83c 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f90b 	bl	8002c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b088      	sub	sp, #32
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	f040 8083 	bne.w	8002b82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_UART_Transmit+0x2e>
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e07b      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Transmit+0x40>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e074      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2221      	movs	r2, #33	; 0x21
 8002aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe f9a4 	bl	8000dfc <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ac2:	e042      	b.n	8002b4a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ada:	d122      	bne.n	8002b22 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f850 	bl	8002b8c <UART_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e046      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	461a      	mov	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	3302      	adds	r3, #2
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	e017      	b.n	8002b4a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	e013      	b.n	8002b4a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2180      	movs	r1, #128	; 0x80
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f82d 	bl	8002b8c <UART_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e023      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	60ba      	str	r2, [r7, #8]
 8002b42:	781a      	ldrb	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1b7      	bne.n	8002ac4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2140      	movs	r1, #64	; 0x40
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f814 	bl	8002b8c <UART_WaitOnFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e00a      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9c:	e02c      	b.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d028      	beq.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bac:	f7fe f926 	bl	8000dfc <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d21d      	bcs.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e00f      	b.n	8002c18 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4013      	ands	r3, r2
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d0c3      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c5a:	f023 030c 	bic.w	r3, r3, #12
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	68f9      	ldr	r1, [r7, #12]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <UART_SetConfig+0x1ac>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d14e      	bne.n	8002d26 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff fe68 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 8002c8c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009a      	lsls	r2, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	4a4a      	ldr	r2, [pc, #296]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	0119      	lsls	r1, r3, #4
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009a      	lsls	r2, r3, #2
 8002cb8:	441a      	add	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cc4:	4b42      	ldr	r3, [pc, #264]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2064      	movs	r0, #100	; 0x64
 8002cce:	fb00 f303 	mul.w	r3, r0, r3
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	3332      	adds	r3, #50	; 0x32
 8002cd8:	4a3d      	ldr	r2, [pc, #244]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002cda:	fba2 2303 	umull	r2, r3, r2, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce4:	4419      	add	r1, r3
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009a      	lsls	r2, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cfc:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2064      	movs	r0, #100	; 0x64
 8002d06:	fb00 f303 	mul.w	r3, r0, r3
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	3332      	adds	r3, #50	; 0x32
 8002d10:	4a2f      	ldr	r2, [pc, #188]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	f003 020f 	and.w	r2, r3, #15
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	440a      	add	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002d24:	e04d      	b.n	8002dc2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d26:	f7ff fe05 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8002d2a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	009a      	lsls	r2, r3, #2
 8002d36:	441a      	add	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	0119      	lsls	r1, r3, #4
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009a      	lsls	r2, r3, #2
 8002d56:	441a      	add	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d62:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002d64:	fba3 0302 	umull	r0, r3, r3, r2
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	2064      	movs	r0, #100	; 0x64
 8002d6c:	fb00 f303 	mul.w	r3, r0, r3
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	3332      	adds	r3, #50	; 0x32
 8002d76:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d82:	4419      	add	r1, r3
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009a      	lsls	r2, r3, #2
 8002d8e:	441a      	add	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002d9c:	fba3 0302 	umull	r0, r3, r3, r2
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	2064      	movs	r0, #100	; 0x64
 8002da4:	fb00 f303 	mul.w	r3, r0, r3
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	3332      	adds	r3, #50	; 0x32
 8002dae:	4a08      	ldr	r2, [pc, #32]	; (8002dd0 <UART_SetConfig+0x1b0>)
 8002db0:	fba2 2303 	umull	r2, r3, r2, r3
 8002db4:	095b      	lsrs	r3, r3, #5
 8002db6:	f003 020f 	and.w	r2, r3, #15
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	440a      	add	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	51eb851f 	.word	0x51eb851f

08002dd4 <__assert_func>:
 8002dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002dd6:	461c      	mov	r4, r3
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <__assert_func+0x2c>)
 8002dda:	4605      	mov	r5, r0
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68d8      	ldr	r0, [r3, #12]
 8002de0:	b152      	cbz	r2, 8002df8 <__assert_func+0x24>
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <__assert_func+0x30>)
 8002de4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002de8:	9100      	str	r1, [sp, #0]
 8002dea:	462b      	mov	r3, r5
 8002dec:	4622      	mov	r2, r4
 8002dee:	4906      	ldr	r1, [pc, #24]	; (8002e08 <__assert_func+0x34>)
 8002df0:	f000 f814 	bl	8002e1c <fiprintf>
 8002df4:	f000 fc52 	bl	800369c <abort>
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <__assert_func+0x38>)
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	e7f2      	b.n	8002de4 <__assert_func+0x10>
 8002dfe:	bf00      	nop
 8002e00:	2000000c 	.word	0x2000000c
 8002e04:	08004140 	.word	0x08004140
 8002e08:	0800414d 	.word	0x0800414d
 8002e0c:	0800417b 	.word	0x0800417b

08002e10 <__errno>:
 8002e10:	4b01      	ldr	r3, [pc, #4]	; (8002e18 <__errno+0x8>)
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	2000000c 	.word	0x2000000c

08002e1c <fiprintf>:
 8002e1c:	b40e      	push	{r1, r2, r3}
 8002e1e:	b503      	push	{r0, r1, lr}
 8002e20:	4601      	mov	r1, r0
 8002e22:	ab03      	add	r3, sp, #12
 8002e24:	4805      	ldr	r0, [pc, #20]	; (8002e3c <fiprintf+0x20>)
 8002e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e2a:	6800      	ldr	r0, [r0, #0]
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	f000 f85b 	bl	8002ee8 <_vfiprintf_r>
 8002e32:	b002      	add	sp, #8
 8002e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e38:	b003      	add	sp, #12
 8002e3a:	4770      	bx	lr
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <__libc_init_array>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	2500      	movs	r5, #0
 8002e44:	4e0c      	ldr	r6, [pc, #48]	; (8002e78 <__libc_init_array+0x38>)
 8002e46:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <__libc_init_array+0x3c>)
 8002e48:	1ba4      	subs	r4, r4, r6
 8002e4a:	10a4      	asrs	r4, r4, #2
 8002e4c:	42a5      	cmp	r5, r4
 8002e4e:	d109      	bne.n	8002e64 <__libc_init_array+0x24>
 8002e50:	f000 ffc0 	bl	8003dd4 <_init>
 8002e54:	2500      	movs	r5, #0
 8002e56:	4e0a      	ldr	r6, [pc, #40]	; (8002e80 <__libc_init_array+0x40>)
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <__libc_init_array+0x44>)
 8002e5a:	1ba4      	subs	r4, r4, r6
 8002e5c:	10a4      	asrs	r4, r4, #2
 8002e5e:	42a5      	cmp	r5, r4
 8002e60:	d105      	bne.n	8002e6e <__libc_init_array+0x2e>
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e68:	4798      	blx	r3
 8002e6a:	3501      	adds	r5, #1
 8002e6c:	e7ee      	b.n	8002e4c <__libc_init_array+0xc>
 8002e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e72:	4798      	blx	r3
 8002e74:	3501      	adds	r5, #1
 8002e76:	e7f2      	b.n	8002e5e <__libc_init_array+0x1e>
 8002e78:	08004214 	.word	0x08004214
 8002e7c:	08004214 	.word	0x08004214
 8002e80:	08004214 	.word	0x08004214
 8002e84:	08004218 	.word	0x08004218

08002e88 <memset>:
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4402      	add	r2, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	f803 1b01 	strb.w	r1, [r3], #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <__sfputc_r>:
 8002e98:	6893      	ldr	r3, [r2, #8]
 8002e9a:	b410      	push	{r4}
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	6093      	str	r3, [r2, #8]
 8002ea2:	da07      	bge.n	8002eb4 <__sfputc_r+0x1c>
 8002ea4:	6994      	ldr	r4, [r2, #24]
 8002ea6:	42a3      	cmp	r3, r4
 8002ea8:	db01      	blt.n	8002eae <__sfputc_r+0x16>
 8002eaa:	290a      	cmp	r1, #10
 8002eac:	d102      	bne.n	8002eb4 <__sfputc_r+0x1c>
 8002eae:	bc10      	pop	{r4}
 8002eb0:	f000 bb34 	b.w	800351c <__swbuf_r>
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	1c58      	adds	r0, r3, #1
 8002eb8:	6010      	str	r0, [r2, #0]
 8002eba:	7019      	strb	r1, [r3, #0]
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	bc10      	pop	{r4}
 8002ec0:	4770      	bx	lr

08002ec2 <__sfputs_r>:
 8002ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec4:	4606      	mov	r6, r0
 8002ec6:	460f      	mov	r7, r1
 8002ec8:	4614      	mov	r4, r2
 8002eca:	18d5      	adds	r5, r2, r3
 8002ecc:	42ac      	cmp	r4, r5
 8002ece:	d101      	bne.n	8002ed4 <__sfputs_r+0x12>
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	e007      	b.n	8002ee4 <__sfputs_r+0x22>
 8002ed4:	463a      	mov	r2, r7
 8002ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eda:	4630      	mov	r0, r6
 8002edc:	f7ff ffdc 	bl	8002e98 <__sfputc_r>
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d1f3      	bne.n	8002ecc <__sfputs_r+0xa>
 8002ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ee8 <_vfiprintf_r>:
 8002ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eec:	460c      	mov	r4, r1
 8002eee:	b09d      	sub	sp, #116	; 0x74
 8002ef0:	4617      	mov	r7, r2
 8002ef2:	461d      	mov	r5, r3
 8002ef4:	4606      	mov	r6, r0
 8002ef6:	b118      	cbz	r0, 8002f00 <_vfiprintf_r+0x18>
 8002ef8:	6983      	ldr	r3, [r0, #24]
 8002efa:	b90b      	cbnz	r3, 8002f00 <_vfiprintf_r+0x18>
 8002efc:	f000 fcc6 	bl	800388c <__sinit>
 8002f00:	4b7c      	ldr	r3, [pc, #496]	; (80030f4 <_vfiprintf_r+0x20c>)
 8002f02:	429c      	cmp	r4, r3
 8002f04:	d158      	bne.n	8002fb8 <_vfiprintf_r+0xd0>
 8002f06:	6874      	ldr	r4, [r6, #4]
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	0718      	lsls	r0, r3, #28
 8002f0c:	d55e      	bpl.n	8002fcc <_vfiprintf_r+0xe4>
 8002f0e:	6923      	ldr	r3, [r4, #16]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05b      	beq.n	8002fcc <_vfiprintf_r+0xe4>
 8002f14:	2300      	movs	r3, #0
 8002f16:	9309      	str	r3, [sp, #36]	; 0x24
 8002f18:	2320      	movs	r3, #32
 8002f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f1e:	2330      	movs	r3, #48	; 0x30
 8002f20:	f04f 0b01 	mov.w	fp, #1
 8002f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f28:	9503      	str	r5, [sp, #12]
 8002f2a:	46b8      	mov	r8, r7
 8002f2c:	4645      	mov	r5, r8
 8002f2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f32:	b10b      	cbz	r3, 8002f38 <_vfiprintf_r+0x50>
 8002f34:	2b25      	cmp	r3, #37	; 0x25
 8002f36:	d154      	bne.n	8002fe2 <_vfiprintf_r+0xfa>
 8002f38:	ebb8 0a07 	subs.w	sl, r8, r7
 8002f3c:	d00b      	beq.n	8002f56 <_vfiprintf_r+0x6e>
 8002f3e:	4653      	mov	r3, sl
 8002f40:	463a      	mov	r2, r7
 8002f42:	4621      	mov	r1, r4
 8002f44:	4630      	mov	r0, r6
 8002f46:	f7ff ffbc 	bl	8002ec2 <__sfputs_r>
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	f000 80c2 	beq.w	80030d4 <_vfiprintf_r+0x1ec>
 8002f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f52:	4453      	add	r3, sl
 8002f54:	9309      	str	r3, [sp, #36]	; 0x24
 8002f56:	f898 3000 	ldrb.w	r3, [r8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80ba 	beq.w	80030d4 <_vfiprintf_r+0x1ec>
 8002f60:	2300      	movs	r3, #0
 8002f62:	f04f 32ff 	mov.w	r2, #4294967295
 8002f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f6a:	9304      	str	r3, [sp, #16]
 8002f6c:	9307      	str	r3, [sp, #28]
 8002f6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f72:	931a      	str	r3, [sp, #104]	; 0x68
 8002f74:	46a8      	mov	r8, r5
 8002f76:	2205      	movs	r2, #5
 8002f78:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002f7c:	485e      	ldr	r0, [pc, #376]	; (80030f8 <_vfiprintf_r+0x210>)
 8002f7e:	f000 fd73 	bl	8003a68 <memchr>
 8002f82:	9b04      	ldr	r3, [sp, #16]
 8002f84:	bb78      	cbnz	r0, 8002fe6 <_vfiprintf_r+0xfe>
 8002f86:	06d9      	lsls	r1, r3, #27
 8002f88:	bf44      	itt	mi
 8002f8a:	2220      	movmi	r2, #32
 8002f8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f90:	071a      	lsls	r2, r3, #28
 8002f92:	bf44      	itt	mi
 8002f94:	222b      	movmi	r2, #43	; 0x2b
 8002f96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f9a:	782a      	ldrb	r2, [r5, #0]
 8002f9c:	2a2a      	cmp	r2, #42	; 0x2a
 8002f9e:	d02a      	beq.n	8002ff6 <_vfiprintf_r+0x10e>
 8002fa0:	46a8      	mov	r8, r5
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	250a      	movs	r5, #10
 8002fa6:	9a07      	ldr	r2, [sp, #28]
 8002fa8:	4641      	mov	r1, r8
 8002faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fae:	3b30      	subs	r3, #48	; 0x30
 8002fb0:	2b09      	cmp	r3, #9
 8002fb2:	d969      	bls.n	8003088 <_vfiprintf_r+0x1a0>
 8002fb4:	b360      	cbz	r0, 8003010 <_vfiprintf_r+0x128>
 8002fb6:	e024      	b.n	8003002 <_vfiprintf_r+0x11a>
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <_vfiprintf_r+0x214>)
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d101      	bne.n	8002fc2 <_vfiprintf_r+0xda>
 8002fbe:	68b4      	ldr	r4, [r6, #8]
 8002fc0:	e7a2      	b.n	8002f08 <_vfiprintf_r+0x20>
 8002fc2:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <_vfiprintf_r+0x218>)
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	bf08      	it	eq
 8002fc8:	68f4      	ldreq	r4, [r6, #12]
 8002fca:	e79d      	b.n	8002f08 <_vfiprintf_r+0x20>
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4630      	mov	r0, r6
 8002fd0:	f000 faf6 	bl	80035c0 <__swsetup_r>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d09d      	beq.n	8002f14 <_vfiprintf_r+0x2c>
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	b01d      	add	sp, #116	; 0x74
 8002fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe2:	46a8      	mov	r8, r5
 8002fe4:	e7a2      	b.n	8002f2c <_vfiprintf_r+0x44>
 8002fe6:	4a44      	ldr	r2, [pc, #272]	; (80030f8 <_vfiprintf_r+0x210>)
 8002fe8:	4645      	mov	r5, r8
 8002fea:	1a80      	subs	r0, r0, r2
 8002fec:	fa0b f000 	lsl.w	r0, fp, r0
 8002ff0:	4318      	orrs	r0, r3
 8002ff2:	9004      	str	r0, [sp, #16]
 8002ff4:	e7be      	b.n	8002f74 <_vfiprintf_r+0x8c>
 8002ff6:	9a03      	ldr	r2, [sp, #12]
 8002ff8:	1d11      	adds	r1, r2, #4
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	9103      	str	r1, [sp, #12]
 8002ffe:	2a00      	cmp	r2, #0
 8003000:	db01      	blt.n	8003006 <_vfiprintf_r+0x11e>
 8003002:	9207      	str	r2, [sp, #28]
 8003004:	e004      	b.n	8003010 <_vfiprintf_r+0x128>
 8003006:	4252      	negs	r2, r2
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	9207      	str	r2, [sp, #28]
 800300e:	9304      	str	r3, [sp, #16]
 8003010:	f898 3000 	ldrb.w	r3, [r8]
 8003014:	2b2e      	cmp	r3, #46	; 0x2e
 8003016:	d10e      	bne.n	8003036 <_vfiprintf_r+0x14e>
 8003018:	f898 3001 	ldrb.w	r3, [r8, #1]
 800301c:	2b2a      	cmp	r3, #42	; 0x2a
 800301e:	d138      	bne.n	8003092 <_vfiprintf_r+0x1aa>
 8003020:	9b03      	ldr	r3, [sp, #12]
 8003022:	f108 0802 	add.w	r8, r8, #2
 8003026:	1d1a      	adds	r2, r3, #4
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	9203      	str	r2, [sp, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	bfb8      	it	lt
 8003030:	f04f 33ff 	movlt.w	r3, #4294967295
 8003034:	9305      	str	r3, [sp, #20]
 8003036:	4d33      	ldr	r5, [pc, #204]	; (8003104 <_vfiprintf_r+0x21c>)
 8003038:	2203      	movs	r2, #3
 800303a:	f898 1000 	ldrb.w	r1, [r8]
 800303e:	4628      	mov	r0, r5
 8003040:	f000 fd12 	bl	8003a68 <memchr>
 8003044:	b140      	cbz	r0, 8003058 <_vfiprintf_r+0x170>
 8003046:	2340      	movs	r3, #64	; 0x40
 8003048:	1b40      	subs	r0, r0, r5
 800304a:	fa03 f000 	lsl.w	r0, r3, r0
 800304e:	9b04      	ldr	r3, [sp, #16]
 8003050:	f108 0801 	add.w	r8, r8, #1
 8003054:	4303      	orrs	r3, r0
 8003056:	9304      	str	r3, [sp, #16]
 8003058:	f898 1000 	ldrb.w	r1, [r8]
 800305c:	2206      	movs	r2, #6
 800305e:	482a      	ldr	r0, [pc, #168]	; (8003108 <_vfiprintf_r+0x220>)
 8003060:	f108 0701 	add.w	r7, r8, #1
 8003064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003068:	f000 fcfe 	bl	8003a68 <memchr>
 800306c:	2800      	cmp	r0, #0
 800306e:	d037      	beq.n	80030e0 <_vfiprintf_r+0x1f8>
 8003070:	4b26      	ldr	r3, [pc, #152]	; (800310c <_vfiprintf_r+0x224>)
 8003072:	bb1b      	cbnz	r3, 80030bc <_vfiprintf_r+0x1d4>
 8003074:	9b03      	ldr	r3, [sp, #12]
 8003076:	3307      	adds	r3, #7
 8003078:	f023 0307 	bic.w	r3, r3, #7
 800307c:	3308      	adds	r3, #8
 800307e:	9303      	str	r3, [sp, #12]
 8003080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003082:	444b      	add	r3, r9
 8003084:	9309      	str	r3, [sp, #36]	; 0x24
 8003086:	e750      	b.n	8002f2a <_vfiprintf_r+0x42>
 8003088:	fb05 3202 	mla	r2, r5, r2, r3
 800308c:	2001      	movs	r0, #1
 800308e:	4688      	mov	r8, r1
 8003090:	e78a      	b.n	8002fa8 <_vfiprintf_r+0xc0>
 8003092:	2300      	movs	r3, #0
 8003094:	250a      	movs	r5, #10
 8003096:	4619      	mov	r1, r3
 8003098:	f108 0801 	add.w	r8, r8, #1
 800309c:	9305      	str	r3, [sp, #20]
 800309e:	4640      	mov	r0, r8
 80030a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030a4:	3a30      	subs	r2, #48	; 0x30
 80030a6:	2a09      	cmp	r2, #9
 80030a8:	d903      	bls.n	80030b2 <_vfiprintf_r+0x1ca>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0c3      	beq.n	8003036 <_vfiprintf_r+0x14e>
 80030ae:	9105      	str	r1, [sp, #20]
 80030b0:	e7c1      	b.n	8003036 <_vfiprintf_r+0x14e>
 80030b2:	fb05 2101 	mla	r1, r5, r1, r2
 80030b6:	2301      	movs	r3, #1
 80030b8:	4680      	mov	r8, r0
 80030ba:	e7f0      	b.n	800309e <_vfiprintf_r+0x1b6>
 80030bc:	ab03      	add	r3, sp, #12
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4622      	mov	r2, r4
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <_vfiprintf_r+0x228>)
 80030c4:	a904      	add	r1, sp, #16
 80030c6:	4630      	mov	r0, r6
 80030c8:	f3af 8000 	nop.w
 80030cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80030d0:	4681      	mov	r9, r0
 80030d2:	d1d5      	bne.n	8003080 <_vfiprintf_r+0x198>
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	065b      	lsls	r3, r3, #25
 80030d8:	f53f af7e 	bmi.w	8002fd8 <_vfiprintf_r+0xf0>
 80030dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030de:	e77d      	b.n	8002fdc <_vfiprintf_r+0xf4>
 80030e0:	ab03      	add	r3, sp, #12
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	4622      	mov	r2, r4
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <_vfiprintf_r+0x228>)
 80030e8:	a904      	add	r1, sp, #16
 80030ea:	4630      	mov	r0, r6
 80030ec:	f000 f888 	bl	8003200 <_printf_i>
 80030f0:	e7ec      	b.n	80030cc <_vfiprintf_r+0x1e4>
 80030f2:	bf00      	nop
 80030f4:	080041d4 	.word	0x080041d4
 80030f8:	08004180 	.word	0x08004180
 80030fc:	080041f4 	.word	0x080041f4
 8003100:	080041b4 	.word	0x080041b4
 8003104:	08004186 	.word	0x08004186
 8003108:	0800418a 	.word	0x0800418a
 800310c:	00000000 	.word	0x00000000
 8003110:	08002ec3 	.word	0x08002ec3

08003114 <_printf_common>:
 8003114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003118:	4691      	mov	r9, r2
 800311a:	461f      	mov	r7, r3
 800311c:	688a      	ldr	r2, [r1, #8]
 800311e:	690b      	ldr	r3, [r1, #16]
 8003120:	4606      	mov	r6, r0
 8003122:	4293      	cmp	r3, r2
 8003124:	bfb8      	it	lt
 8003126:	4613      	movlt	r3, r2
 8003128:	f8c9 3000 	str.w	r3, [r9]
 800312c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003130:	460c      	mov	r4, r1
 8003132:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003136:	b112      	cbz	r2, 800313e <_printf_common+0x2a>
 8003138:	3301      	adds	r3, #1
 800313a:	f8c9 3000 	str.w	r3, [r9]
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	0699      	lsls	r1, r3, #26
 8003142:	bf42      	ittt	mi
 8003144:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003148:	3302      	addmi	r3, #2
 800314a:	f8c9 3000 	strmi.w	r3, [r9]
 800314e:	6825      	ldr	r5, [r4, #0]
 8003150:	f015 0506 	ands.w	r5, r5, #6
 8003154:	d107      	bne.n	8003166 <_printf_common+0x52>
 8003156:	f104 0a19 	add.w	sl, r4, #25
 800315a:	68e3      	ldr	r3, [r4, #12]
 800315c:	f8d9 2000 	ldr.w	r2, [r9]
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	42ab      	cmp	r3, r5
 8003164:	dc29      	bgt.n	80031ba <_printf_common+0xa6>
 8003166:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800316a:	6822      	ldr	r2, [r4, #0]
 800316c:	3300      	adds	r3, #0
 800316e:	bf18      	it	ne
 8003170:	2301      	movne	r3, #1
 8003172:	0692      	lsls	r2, r2, #26
 8003174:	d42e      	bmi.n	80031d4 <_printf_common+0xc0>
 8003176:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800317a:	4639      	mov	r1, r7
 800317c:	4630      	mov	r0, r6
 800317e:	47c0      	blx	r8
 8003180:	3001      	adds	r0, #1
 8003182:	d021      	beq.n	80031c8 <_printf_common+0xb4>
 8003184:	6823      	ldr	r3, [r4, #0]
 8003186:	68e5      	ldr	r5, [r4, #12]
 8003188:	f003 0306 	and.w	r3, r3, #6
 800318c:	2b04      	cmp	r3, #4
 800318e:	bf18      	it	ne
 8003190:	2500      	movne	r5, #0
 8003192:	f8d9 2000 	ldr.w	r2, [r9]
 8003196:	f04f 0900 	mov.w	r9, #0
 800319a:	bf08      	it	eq
 800319c:	1aad      	subeq	r5, r5, r2
 800319e:	68a3      	ldr	r3, [r4, #8]
 80031a0:	6922      	ldr	r2, [r4, #16]
 80031a2:	bf08      	it	eq
 80031a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bfc4      	itt	gt
 80031ac:	1a9b      	subgt	r3, r3, r2
 80031ae:	18ed      	addgt	r5, r5, r3
 80031b0:	341a      	adds	r4, #26
 80031b2:	454d      	cmp	r5, r9
 80031b4:	d11a      	bne.n	80031ec <_printf_common+0xd8>
 80031b6:	2000      	movs	r0, #0
 80031b8:	e008      	b.n	80031cc <_printf_common+0xb8>
 80031ba:	2301      	movs	r3, #1
 80031bc:	4652      	mov	r2, sl
 80031be:	4639      	mov	r1, r7
 80031c0:	4630      	mov	r0, r6
 80031c2:	47c0      	blx	r8
 80031c4:	3001      	adds	r0, #1
 80031c6:	d103      	bne.n	80031d0 <_printf_common+0xbc>
 80031c8:	f04f 30ff 	mov.w	r0, #4294967295
 80031cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d0:	3501      	adds	r5, #1
 80031d2:	e7c2      	b.n	800315a <_printf_common+0x46>
 80031d4:	2030      	movs	r0, #48	; 0x30
 80031d6:	18e1      	adds	r1, r4, r3
 80031d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031e2:	4422      	add	r2, r4
 80031e4:	3302      	adds	r3, #2
 80031e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031ea:	e7c4      	b.n	8003176 <_printf_common+0x62>
 80031ec:	2301      	movs	r3, #1
 80031ee:	4622      	mov	r2, r4
 80031f0:	4639      	mov	r1, r7
 80031f2:	4630      	mov	r0, r6
 80031f4:	47c0      	blx	r8
 80031f6:	3001      	adds	r0, #1
 80031f8:	d0e6      	beq.n	80031c8 <_printf_common+0xb4>
 80031fa:	f109 0901 	add.w	r9, r9, #1
 80031fe:	e7d8      	b.n	80031b2 <_printf_common+0x9e>

08003200 <_printf_i>:
 8003200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003204:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003208:	460c      	mov	r4, r1
 800320a:	7e09      	ldrb	r1, [r1, #24]
 800320c:	b085      	sub	sp, #20
 800320e:	296e      	cmp	r1, #110	; 0x6e
 8003210:	4617      	mov	r7, r2
 8003212:	4606      	mov	r6, r0
 8003214:	4698      	mov	r8, r3
 8003216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003218:	f000 80b3 	beq.w	8003382 <_printf_i+0x182>
 800321c:	d822      	bhi.n	8003264 <_printf_i+0x64>
 800321e:	2963      	cmp	r1, #99	; 0x63
 8003220:	d036      	beq.n	8003290 <_printf_i+0x90>
 8003222:	d80a      	bhi.n	800323a <_printf_i+0x3a>
 8003224:	2900      	cmp	r1, #0
 8003226:	f000 80b9 	beq.w	800339c <_printf_i+0x19c>
 800322a:	2958      	cmp	r1, #88	; 0x58
 800322c:	f000 8083 	beq.w	8003336 <_printf_i+0x136>
 8003230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003234:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003238:	e032      	b.n	80032a0 <_printf_i+0xa0>
 800323a:	2964      	cmp	r1, #100	; 0x64
 800323c:	d001      	beq.n	8003242 <_printf_i+0x42>
 800323e:	2969      	cmp	r1, #105	; 0x69
 8003240:	d1f6      	bne.n	8003230 <_printf_i+0x30>
 8003242:	6820      	ldr	r0, [r4, #0]
 8003244:	6813      	ldr	r3, [r2, #0]
 8003246:	0605      	lsls	r5, r0, #24
 8003248:	f103 0104 	add.w	r1, r3, #4
 800324c:	d52a      	bpl.n	80032a4 <_printf_i+0xa4>
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6011      	str	r1, [r2, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da03      	bge.n	800325e <_printf_i+0x5e>
 8003256:	222d      	movs	r2, #45	; 0x2d
 8003258:	425b      	negs	r3, r3
 800325a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800325e:	486f      	ldr	r0, [pc, #444]	; (800341c <_printf_i+0x21c>)
 8003260:	220a      	movs	r2, #10
 8003262:	e039      	b.n	80032d8 <_printf_i+0xd8>
 8003264:	2973      	cmp	r1, #115	; 0x73
 8003266:	f000 809d 	beq.w	80033a4 <_printf_i+0x1a4>
 800326a:	d808      	bhi.n	800327e <_printf_i+0x7e>
 800326c:	296f      	cmp	r1, #111	; 0x6f
 800326e:	d020      	beq.n	80032b2 <_printf_i+0xb2>
 8003270:	2970      	cmp	r1, #112	; 0x70
 8003272:	d1dd      	bne.n	8003230 <_printf_i+0x30>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	f043 0320 	orr.w	r3, r3, #32
 800327a:	6023      	str	r3, [r4, #0]
 800327c:	e003      	b.n	8003286 <_printf_i+0x86>
 800327e:	2975      	cmp	r1, #117	; 0x75
 8003280:	d017      	beq.n	80032b2 <_printf_i+0xb2>
 8003282:	2978      	cmp	r1, #120	; 0x78
 8003284:	d1d4      	bne.n	8003230 <_printf_i+0x30>
 8003286:	2378      	movs	r3, #120	; 0x78
 8003288:	4865      	ldr	r0, [pc, #404]	; (8003420 <_printf_i+0x220>)
 800328a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800328e:	e055      	b.n	800333c <_printf_i+0x13c>
 8003290:	6813      	ldr	r3, [r2, #0]
 8003292:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003296:	1d19      	adds	r1, r3, #4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6011      	str	r1, [r2, #0]
 800329c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032a0:	2301      	movs	r3, #1
 80032a2:	e08c      	b.n	80033be <_printf_i+0x1be>
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032aa:	6011      	str	r1, [r2, #0]
 80032ac:	bf18      	it	ne
 80032ae:	b21b      	sxthne	r3, r3
 80032b0:	e7cf      	b.n	8003252 <_printf_i+0x52>
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	6825      	ldr	r5, [r4, #0]
 80032b6:	1d18      	adds	r0, r3, #4
 80032b8:	6010      	str	r0, [r2, #0]
 80032ba:	0628      	lsls	r0, r5, #24
 80032bc:	d501      	bpl.n	80032c2 <_printf_i+0xc2>
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	e002      	b.n	80032c8 <_printf_i+0xc8>
 80032c2:	0668      	lsls	r0, r5, #25
 80032c4:	d5fb      	bpl.n	80032be <_printf_i+0xbe>
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	296f      	cmp	r1, #111	; 0x6f
 80032ca:	bf14      	ite	ne
 80032cc:	220a      	movne	r2, #10
 80032ce:	2208      	moveq	r2, #8
 80032d0:	4852      	ldr	r0, [pc, #328]	; (800341c <_printf_i+0x21c>)
 80032d2:	2100      	movs	r1, #0
 80032d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032d8:	6865      	ldr	r5, [r4, #4]
 80032da:	2d00      	cmp	r5, #0
 80032dc:	60a5      	str	r5, [r4, #8]
 80032de:	f2c0 8095 	blt.w	800340c <_printf_i+0x20c>
 80032e2:	6821      	ldr	r1, [r4, #0]
 80032e4:	f021 0104 	bic.w	r1, r1, #4
 80032e8:	6021      	str	r1, [r4, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d13d      	bne.n	800336a <_printf_i+0x16a>
 80032ee:	2d00      	cmp	r5, #0
 80032f0:	f040 808e 	bne.w	8003410 <_printf_i+0x210>
 80032f4:	4665      	mov	r5, ip
 80032f6:	2a08      	cmp	r2, #8
 80032f8:	d10b      	bne.n	8003312 <_printf_i+0x112>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	07db      	lsls	r3, r3, #31
 80032fe:	d508      	bpl.n	8003312 <_printf_i+0x112>
 8003300:	6923      	ldr	r3, [r4, #16]
 8003302:	6862      	ldr	r2, [r4, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	bfde      	ittt	le
 8003308:	2330      	movle	r3, #48	; 0x30
 800330a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800330e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003312:	ebac 0305 	sub.w	r3, ip, r5
 8003316:	6123      	str	r3, [r4, #16]
 8003318:	f8cd 8000 	str.w	r8, [sp]
 800331c:	463b      	mov	r3, r7
 800331e:	aa03      	add	r2, sp, #12
 8003320:	4621      	mov	r1, r4
 8003322:	4630      	mov	r0, r6
 8003324:	f7ff fef6 	bl	8003114 <_printf_common>
 8003328:	3001      	adds	r0, #1
 800332a:	d14d      	bne.n	80033c8 <_printf_i+0x1c8>
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	b005      	add	sp, #20
 8003332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003336:	4839      	ldr	r0, [pc, #228]	; (800341c <_printf_i+0x21c>)
 8003338:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800333c:	6813      	ldr	r3, [r2, #0]
 800333e:	6821      	ldr	r1, [r4, #0]
 8003340:	1d1d      	adds	r5, r3, #4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6015      	str	r5, [r2, #0]
 8003346:	060a      	lsls	r2, r1, #24
 8003348:	d50b      	bpl.n	8003362 <_printf_i+0x162>
 800334a:	07ca      	lsls	r2, r1, #31
 800334c:	bf44      	itt	mi
 800334e:	f041 0120 	orrmi.w	r1, r1, #32
 8003352:	6021      	strmi	r1, [r4, #0]
 8003354:	b91b      	cbnz	r3, 800335e <_printf_i+0x15e>
 8003356:	6822      	ldr	r2, [r4, #0]
 8003358:	f022 0220 	bic.w	r2, r2, #32
 800335c:	6022      	str	r2, [r4, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	e7b7      	b.n	80032d2 <_printf_i+0xd2>
 8003362:	064d      	lsls	r5, r1, #25
 8003364:	bf48      	it	mi
 8003366:	b29b      	uxthmi	r3, r3
 8003368:	e7ef      	b.n	800334a <_printf_i+0x14a>
 800336a:	4665      	mov	r5, ip
 800336c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003370:	fb02 3311 	mls	r3, r2, r1, r3
 8003374:	5cc3      	ldrb	r3, [r0, r3]
 8003376:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800337a:	460b      	mov	r3, r1
 800337c:	2900      	cmp	r1, #0
 800337e:	d1f5      	bne.n	800336c <_printf_i+0x16c>
 8003380:	e7b9      	b.n	80032f6 <_printf_i+0xf6>
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	6825      	ldr	r5, [r4, #0]
 8003386:	1d18      	adds	r0, r3, #4
 8003388:	6961      	ldr	r1, [r4, #20]
 800338a:	6010      	str	r0, [r2, #0]
 800338c:	0628      	lsls	r0, r5, #24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	d501      	bpl.n	8003396 <_printf_i+0x196>
 8003392:	6019      	str	r1, [r3, #0]
 8003394:	e002      	b.n	800339c <_printf_i+0x19c>
 8003396:	066a      	lsls	r2, r5, #25
 8003398:	d5fb      	bpl.n	8003392 <_printf_i+0x192>
 800339a:	8019      	strh	r1, [r3, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	4665      	mov	r5, ip
 80033a0:	6123      	str	r3, [r4, #16]
 80033a2:	e7b9      	b.n	8003318 <_printf_i+0x118>
 80033a4:	6813      	ldr	r3, [r2, #0]
 80033a6:	1d19      	adds	r1, r3, #4
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	681d      	ldr	r5, [r3, #0]
 80033ac:	6862      	ldr	r2, [r4, #4]
 80033ae:	2100      	movs	r1, #0
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 fb59 	bl	8003a68 <memchr>
 80033b6:	b108      	cbz	r0, 80033bc <_printf_i+0x1bc>
 80033b8:	1b40      	subs	r0, r0, r5
 80033ba:	6060      	str	r0, [r4, #4]
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	6123      	str	r3, [r4, #16]
 80033c0:	2300      	movs	r3, #0
 80033c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c6:	e7a7      	b.n	8003318 <_printf_i+0x118>
 80033c8:	6923      	ldr	r3, [r4, #16]
 80033ca:	462a      	mov	r2, r5
 80033cc:	4639      	mov	r1, r7
 80033ce:	4630      	mov	r0, r6
 80033d0:	47c0      	blx	r8
 80033d2:	3001      	adds	r0, #1
 80033d4:	d0aa      	beq.n	800332c <_printf_i+0x12c>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	079b      	lsls	r3, r3, #30
 80033da:	d413      	bmi.n	8003404 <_printf_i+0x204>
 80033dc:	68e0      	ldr	r0, [r4, #12]
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	4298      	cmp	r0, r3
 80033e2:	bfb8      	it	lt
 80033e4:	4618      	movlt	r0, r3
 80033e6:	e7a3      	b.n	8003330 <_printf_i+0x130>
 80033e8:	2301      	movs	r3, #1
 80033ea:	464a      	mov	r2, r9
 80033ec:	4639      	mov	r1, r7
 80033ee:	4630      	mov	r0, r6
 80033f0:	47c0      	blx	r8
 80033f2:	3001      	adds	r0, #1
 80033f4:	d09a      	beq.n	800332c <_printf_i+0x12c>
 80033f6:	3501      	adds	r5, #1
 80033f8:	68e3      	ldr	r3, [r4, #12]
 80033fa:	9a03      	ldr	r2, [sp, #12]
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	42ab      	cmp	r3, r5
 8003400:	dcf2      	bgt.n	80033e8 <_printf_i+0x1e8>
 8003402:	e7eb      	b.n	80033dc <_printf_i+0x1dc>
 8003404:	2500      	movs	r5, #0
 8003406:	f104 0919 	add.w	r9, r4, #25
 800340a:	e7f5      	b.n	80033f8 <_printf_i+0x1f8>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ac      	bne.n	800336a <_printf_i+0x16a>
 8003410:	7803      	ldrb	r3, [r0, #0]
 8003412:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003416:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800341a:	e76c      	b.n	80032f6 <_printf_i+0xf6>
 800341c:	08004191 	.word	0x08004191
 8003420:	080041a2 	.word	0x080041a2

08003424 <iprintf>:
 8003424:	b40f      	push	{r0, r1, r2, r3}
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <iprintf+0x2c>)
 8003428:	b513      	push	{r0, r1, r4, lr}
 800342a:	681c      	ldr	r4, [r3, #0]
 800342c:	b124      	cbz	r4, 8003438 <iprintf+0x14>
 800342e:	69a3      	ldr	r3, [r4, #24]
 8003430:	b913      	cbnz	r3, 8003438 <iprintf+0x14>
 8003432:	4620      	mov	r0, r4
 8003434:	f000 fa2a 	bl	800388c <__sinit>
 8003438:	ab05      	add	r3, sp, #20
 800343a:	9a04      	ldr	r2, [sp, #16]
 800343c:	68a1      	ldr	r1, [r4, #8]
 800343e:	4620      	mov	r0, r4
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	f7ff fd51 	bl	8002ee8 <_vfiprintf_r>
 8003446:	b002      	add	sp, #8
 8003448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800344c:	b004      	add	sp, #16
 800344e:	4770      	bx	lr
 8003450:	2000000c 	.word	0x2000000c

08003454 <_puts_r>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	460e      	mov	r6, r1
 8003458:	4605      	mov	r5, r0
 800345a:	b118      	cbz	r0, 8003464 <_puts_r+0x10>
 800345c:	6983      	ldr	r3, [r0, #24]
 800345e:	b90b      	cbnz	r3, 8003464 <_puts_r+0x10>
 8003460:	f000 fa14 	bl	800388c <__sinit>
 8003464:	69ab      	ldr	r3, [r5, #24]
 8003466:	68ac      	ldr	r4, [r5, #8]
 8003468:	b913      	cbnz	r3, 8003470 <_puts_r+0x1c>
 800346a:	4628      	mov	r0, r5
 800346c:	f000 fa0e 	bl	800388c <__sinit>
 8003470:	4b23      	ldr	r3, [pc, #140]	; (8003500 <_puts_r+0xac>)
 8003472:	429c      	cmp	r4, r3
 8003474:	d117      	bne.n	80034a6 <_puts_r+0x52>
 8003476:	686c      	ldr	r4, [r5, #4]
 8003478:	89a3      	ldrh	r3, [r4, #12]
 800347a:	071b      	lsls	r3, r3, #28
 800347c:	d51d      	bpl.n	80034ba <_puts_r+0x66>
 800347e:	6923      	ldr	r3, [r4, #16]
 8003480:	b1db      	cbz	r3, 80034ba <_puts_r+0x66>
 8003482:	3e01      	subs	r6, #1
 8003484:	68a3      	ldr	r3, [r4, #8]
 8003486:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800348a:	3b01      	subs	r3, #1
 800348c:	60a3      	str	r3, [r4, #8]
 800348e:	b9e9      	cbnz	r1, 80034cc <_puts_r+0x78>
 8003490:	2b00      	cmp	r3, #0
 8003492:	da2e      	bge.n	80034f2 <_puts_r+0x9e>
 8003494:	4622      	mov	r2, r4
 8003496:	210a      	movs	r1, #10
 8003498:	4628      	mov	r0, r5
 800349a:	f000 f83f 	bl	800351c <__swbuf_r>
 800349e:	3001      	adds	r0, #1
 80034a0:	d011      	beq.n	80034c6 <_puts_r+0x72>
 80034a2:	200a      	movs	r0, #10
 80034a4:	e011      	b.n	80034ca <_puts_r+0x76>
 80034a6:	4b17      	ldr	r3, [pc, #92]	; (8003504 <_puts_r+0xb0>)
 80034a8:	429c      	cmp	r4, r3
 80034aa:	d101      	bne.n	80034b0 <_puts_r+0x5c>
 80034ac:	68ac      	ldr	r4, [r5, #8]
 80034ae:	e7e3      	b.n	8003478 <_puts_r+0x24>
 80034b0:	4b15      	ldr	r3, [pc, #84]	; (8003508 <_puts_r+0xb4>)
 80034b2:	429c      	cmp	r4, r3
 80034b4:	bf08      	it	eq
 80034b6:	68ec      	ldreq	r4, [r5, #12]
 80034b8:	e7de      	b.n	8003478 <_puts_r+0x24>
 80034ba:	4621      	mov	r1, r4
 80034bc:	4628      	mov	r0, r5
 80034be:	f000 f87f 	bl	80035c0 <__swsetup_r>
 80034c2:	2800      	cmp	r0, #0
 80034c4:	d0dd      	beq.n	8003482 <_puts_r+0x2e>
 80034c6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da04      	bge.n	80034da <_puts_r+0x86>
 80034d0:	69a2      	ldr	r2, [r4, #24]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	dc06      	bgt.n	80034e4 <_puts_r+0x90>
 80034d6:	290a      	cmp	r1, #10
 80034d8:	d004      	beq.n	80034e4 <_puts_r+0x90>
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	6022      	str	r2, [r4, #0]
 80034e0:	7019      	strb	r1, [r3, #0]
 80034e2:	e7cf      	b.n	8003484 <_puts_r+0x30>
 80034e4:	4622      	mov	r2, r4
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f818 	bl	800351c <__swbuf_r>
 80034ec:	3001      	adds	r0, #1
 80034ee:	d1c9      	bne.n	8003484 <_puts_r+0x30>
 80034f0:	e7e9      	b.n	80034c6 <_puts_r+0x72>
 80034f2:	200a      	movs	r0, #10
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	6022      	str	r2, [r4, #0]
 80034fa:	7018      	strb	r0, [r3, #0]
 80034fc:	e7e5      	b.n	80034ca <_puts_r+0x76>
 80034fe:	bf00      	nop
 8003500:	080041d4 	.word	0x080041d4
 8003504:	080041f4 	.word	0x080041f4
 8003508:	080041b4 	.word	0x080041b4

0800350c <puts>:
 800350c:	4b02      	ldr	r3, [pc, #8]	; (8003518 <puts+0xc>)
 800350e:	4601      	mov	r1, r0
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	f7ff bf9f 	b.w	8003454 <_puts_r>
 8003516:	bf00      	nop
 8003518:	2000000c 	.word	0x2000000c

0800351c <__swbuf_r>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	460e      	mov	r6, r1
 8003520:	4614      	mov	r4, r2
 8003522:	4605      	mov	r5, r0
 8003524:	b118      	cbz	r0, 800352e <__swbuf_r+0x12>
 8003526:	6983      	ldr	r3, [r0, #24]
 8003528:	b90b      	cbnz	r3, 800352e <__swbuf_r+0x12>
 800352a:	f000 f9af 	bl	800388c <__sinit>
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <__swbuf_r+0x98>)
 8003530:	429c      	cmp	r4, r3
 8003532:	d12a      	bne.n	800358a <__swbuf_r+0x6e>
 8003534:	686c      	ldr	r4, [r5, #4]
 8003536:	69a3      	ldr	r3, [r4, #24]
 8003538:	60a3      	str	r3, [r4, #8]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	071a      	lsls	r2, r3, #28
 800353e:	d52e      	bpl.n	800359e <__swbuf_r+0x82>
 8003540:	6923      	ldr	r3, [r4, #16]
 8003542:	b363      	cbz	r3, 800359e <__swbuf_r+0x82>
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	b2f6      	uxtb	r6, r6
 800354a:	1ac0      	subs	r0, r0, r3
 800354c:	6963      	ldr	r3, [r4, #20]
 800354e:	4637      	mov	r7, r6
 8003550:	4283      	cmp	r3, r0
 8003552:	dc04      	bgt.n	800355e <__swbuf_r+0x42>
 8003554:	4621      	mov	r1, r4
 8003556:	4628      	mov	r0, r5
 8003558:	f000 f92e 	bl	80037b8 <_fflush_r>
 800355c:	bb28      	cbnz	r0, 80035aa <__swbuf_r+0x8e>
 800355e:	68a3      	ldr	r3, [r4, #8]
 8003560:	3001      	adds	r0, #1
 8003562:	3b01      	subs	r3, #1
 8003564:	60a3      	str	r3, [r4, #8]
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	6022      	str	r2, [r4, #0]
 800356c:	701e      	strb	r6, [r3, #0]
 800356e:	6963      	ldr	r3, [r4, #20]
 8003570:	4283      	cmp	r3, r0
 8003572:	d004      	beq.n	800357e <__swbuf_r+0x62>
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	07db      	lsls	r3, r3, #31
 8003578:	d519      	bpl.n	80035ae <__swbuf_r+0x92>
 800357a:	2e0a      	cmp	r6, #10
 800357c:	d117      	bne.n	80035ae <__swbuf_r+0x92>
 800357e:	4621      	mov	r1, r4
 8003580:	4628      	mov	r0, r5
 8003582:	f000 f919 	bl	80037b8 <_fflush_r>
 8003586:	b190      	cbz	r0, 80035ae <__swbuf_r+0x92>
 8003588:	e00f      	b.n	80035aa <__swbuf_r+0x8e>
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <__swbuf_r+0x9c>)
 800358c:	429c      	cmp	r4, r3
 800358e:	d101      	bne.n	8003594 <__swbuf_r+0x78>
 8003590:	68ac      	ldr	r4, [r5, #8]
 8003592:	e7d0      	b.n	8003536 <__swbuf_r+0x1a>
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <__swbuf_r+0xa0>)
 8003596:	429c      	cmp	r4, r3
 8003598:	bf08      	it	eq
 800359a:	68ec      	ldreq	r4, [r5, #12]
 800359c:	e7cb      	b.n	8003536 <__swbuf_r+0x1a>
 800359e:	4621      	mov	r1, r4
 80035a0:	4628      	mov	r0, r5
 80035a2:	f000 f80d 	bl	80035c0 <__swsetup_r>
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d0cc      	beq.n	8003544 <__swbuf_r+0x28>
 80035aa:	f04f 37ff 	mov.w	r7, #4294967295
 80035ae:	4638      	mov	r0, r7
 80035b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b2:	bf00      	nop
 80035b4:	080041d4 	.word	0x080041d4
 80035b8:	080041f4 	.word	0x080041f4
 80035bc:	080041b4 	.word	0x080041b4

080035c0 <__swsetup_r>:
 80035c0:	4b32      	ldr	r3, [pc, #200]	; (800368c <__swsetup_r+0xcc>)
 80035c2:	b570      	push	{r4, r5, r6, lr}
 80035c4:	681d      	ldr	r5, [r3, #0]
 80035c6:	4606      	mov	r6, r0
 80035c8:	460c      	mov	r4, r1
 80035ca:	b125      	cbz	r5, 80035d6 <__swsetup_r+0x16>
 80035cc:	69ab      	ldr	r3, [r5, #24]
 80035ce:	b913      	cbnz	r3, 80035d6 <__swsetup_r+0x16>
 80035d0:	4628      	mov	r0, r5
 80035d2:	f000 f95b 	bl	800388c <__sinit>
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <__swsetup_r+0xd0>)
 80035d8:	429c      	cmp	r4, r3
 80035da:	d10f      	bne.n	80035fc <__swsetup_r+0x3c>
 80035dc:	686c      	ldr	r4, [r5, #4]
 80035de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	0715      	lsls	r5, r2, #28
 80035e6:	d42c      	bmi.n	8003642 <__swsetup_r+0x82>
 80035e8:	06d0      	lsls	r0, r2, #27
 80035ea:	d411      	bmi.n	8003610 <__swsetup_r+0x50>
 80035ec:	2209      	movs	r2, #9
 80035ee:	6032      	str	r2, [r6, #0]
 80035f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f4:	81a3      	strh	r3, [r4, #12]
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	e03e      	b.n	800367a <__swsetup_r+0xba>
 80035fc:	4b25      	ldr	r3, [pc, #148]	; (8003694 <__swsetup_r+0xd4>)
 80035fe:	429c      	cmp	r4, r3
 8003600:	d101      	bne.n	8003606 <__swsetup_r+0x46>
 8003602:	68ac      	ldr	r4, [r5, #8]
 8003604:	e7eb      	b.n	80035de <__swsetup_r+0x1e>
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <__swsetup_r+0xd8>)
 8003608:	429c      	cmp	r4, r3
 800360a:	bf08      	it	eq
 800360c:	68ec      	ldreq	r4, [r5, #12]
 800360e:	e7e6      	b.n	80035de <__swsetup_r+0x1e>
 8003610:	0751      	lsls	r1, r2, #29
 8003612:	d512      	bpl.n	800363a <__swsetup_r+0x7a>
 8003614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003616:	b141      	cbz	r1, 800362a <__swsetup_r+0x6a>
 8003618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800361c:	4299      	cmp	r1, r3
 800361e:	d002      	beq.n	8003626 <__swsetup_r+0x66>
 8003620:	4630      	mov	r0, r6
 8003622:	f000 fa2f 	bl	8003a84 <_free_r>
 8003626:	2300      	movs	r3, #0
 8003628:	6363      	str	r3, [r4, #52]	; 0x34
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	2300      	movs	r3, #0
 8003634:	6063      	str	r3, [r4, #4]
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	6923      	ldr	r3, [r4, #16]
 8003644:	b94b      	cbnz	r3, 800365a <__swsetup_r+0x9a>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800364c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003650:	d003      	beq.n	800365a <__swsetup_r+0x9a>
 8003652:	4621      	mov	r1, r4
 8003654:	4630      	mov	r0, r6
 8003656:	f000 f9c7 	bl	80039e8 <__smakebuf_r>
 800365a:	89a2      	ldrh	r2, [r4, #12]
 800365c:	f012 0301 	ands.w	r3, r2, #1
 8003660:	d00c      	beq.n	800367c <__swsetup_r+0xbc>
 8003662:	2300      	movs	r3, #0
 8003664:	60a3      	str	r3, [r4, #8]
 8003666:	6963      	ldr	r3, [r4, #20]
 8003668:	425b      	negs	r3, r3
 800366a:	61a3      	str	r3, [r4, #24]
 800366c:	6923      	ldr	r3, [r4, #16]
 800366e:	b953      	cbnz	r3, 8003686 <__swsetup_r+0xc6>
 8003670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003674:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003678:	d1ba      	bne.n	80035f0 <__swsetup_r+0x30>
 800367a:	bd70      	pop	{r4, r5, r6, pc}
 800367c:	0792      	lsls	r2, r2, #30
 800367e:	bf58      	it	pl
 8003680:	6963      	ldrpl	r3, [r4, #20]
 8003682:	60a3      	str	r3, [r4, #8]
 8003684:	e7f2      	b.n	800366c <__swsetup_r+0xac>
 8003686:	2000      	movs	r0, #0
 8003688:	e7f7      	b.n	800367a <__swsetup_r+0xba>
 800368a:	bf00      	nop
 800368c:	2000000c 	.word	0x2000000c
 8003690:	080041d4 	.word	0x080041d4
 8003694:	080041f4 	.word	0x080041f4
 8003698:	080041b4 	.word	0x080041b4

0800369c <abort>:
 800369c:	b508      	push	{r3, lr}
 800369e:	2006      	movs	r0, #6
 80036a0:	f000 face 	bl	8003c40 <raise>
 80036a4:	2001      	movs	r0, #1
 80036a6:	f7fd fa6a 	bl	8000b7e <_exit>
	...

080036ac <__sflush_r>:
 80036ac:	898a      	ldrh	r2, [r1, #12]
 80036ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b2:	4605      	mov	r5, r0
 80036b4:	0710      	lsls	r0, r2, #28
 80036b6:	460c      	mov	r4, r1
 80036b8:	d458      	bmi.n	800376c <__sflush_r+0xc0>
 80036ba:	684b      	ldr	r3, [r1, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	dc05      	bgt.n	80036cc <__sflush_r+0x20>
 80036c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	dc02      	bgt.n	80036cc <__sflush_r+0x20>
 80036c6:	2000      	movs	r0, #0
 80036c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036ce:	2e00      	cmp	r6, #0
 80036d0:	d0f9      	beq.n	80036c6 <__sflush_r+0x1a>
 80036d2:	2300      	movs	r3, #0
 80036d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036d8:	682f      	ldr	r7, [r5, #0]
 80036da:	6a21      	ldr	r1, [r4, #32]
 80036dc:	602b      	str	r3, [r5, #0]
 80036de:	d032      	beq.n	8003746 <__sflush_r+0x9a>
 80036e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	075a      	lsls	r2, r3, #29
 80036e6:	d505      	bpl.n	80036f4 <__sflush_r+0x48>
 80036e8:	6863      	ldr	r3, [r4, #4]
 80036ea:	1ac0      	subs	r0, r0, r3
 80036ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036ee:	b10b      	cbz	r3, 80036f4 <__sflush_r+0x48>
 80036f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036f2:	1ac0      	subs	r0, r0, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	4602      	mov	r2, r0
 80036f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036fa:	6a21      	ldr	r1, [r4, #32]
 80036fc:	4628      	mov	r0, r5
 80036fe:	47b0      	blx	r6
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	d106      	bne.n	8003714 <__sflush_r+0x68>
 8003706:	6829      	ldr	r1, [r5, #0]
 8003708:	291d      	cmp	r1, #29
 800370a:	d848      	bhi.n	800379e <__sflush_r+0xf2>
 800370c:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <__sflush_r+0x108>)
 800370e:	40ca      	lsrs	r2, r1
 8003710:	07d6      	lsls	r6, r2, #31
 8003712:	d544      	bpl.n	800379e <__sflush_r+0xf2>
 8003714:	2200      	movs	r2, #0
 8003716:	6062      	str	r2, [r4, #4]
 8003718:	6922      	ldr	r2, [r4, #16]
 800371a:	04d9      	lsls	r1, r3, #19
 800371c:	6022      	str	r2, [r4, #0]
 800371e:	d504      	bpl.n	800372a <__sflush_r+0x7e>
 8003720:	1c42      	adds	r2, r0, #1
 8003722:	d101      	bne.n	8003728 <__sflush_r+0x7c>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b903      	cbnz	r3, 800372a <__sflush_r+0x7e>
 8003728:	6560      	str	r0, [r4, #84]	; 0x54
 800372a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800372c:	602f      	str	r7, [r5, #0]
 800372e:	2900      	cmp	r1, #0
 8003730:	d0c9      	beq.n	80036c6 <__sflush_r+0x1a>
 8003732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003736:	4299      	cmp	r1, r3
 8003738:	d002      	beq.n	8003740 <__sflush_r+0x94>
 800373a:	4628      	mov	r0, r5
 800373c:	f000 f9a2 	bl	8003a84 <_free_r>
 8003740:	2000      	movs	r0, #0
 8003742:	6360      	str	r0, [r4, #52]	; 0x34
 8003744:	e7c0      	b.n	80036c8 <__sflush_r+0x1c>
 8003746:	2301      	movs	r3, #1
 8003748:	4628      	mov	r0, r5
 800374a:	47b0      	blx	r6
 800374c:	1c41      	adds	r1, r0, #1
 800374e:	d1c8      	bne.n	80036e2 <__sflush_r+0x36>
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0c5      	beq.n	80036e2 <__sflush_r+0x36>
 8003756:	2b1d      	cmp	r3, #29
 8003758:	d001      	beq.n	800375e <__sflush_r+0xb2>
 800375a:	2b16      	cmp	r3, #22
 800375c:	d101      	bne.n	8003762 <__sflush_r+0xb6>
 800375e:	602f      	str	r7, [r5, #0]
 8003760:	e7b1      	b.n	80036c6 <__sflush_r+0x1a>
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003768:	81a3      	strh	r3, [r4, #12]
 800376a:	e7ad      	b.n	80036c8 <__sflush_r+0x1c>
 800376c:	690f      	ldr	r7, [r1, #16]
 800376e:	2f00      	cmp	r7, #0
 8003770:	d0a9      	beq.n	80036c6 <__sflush_r+0x1a>
 8003772:	0793      	lsls	r3, r2, #30
 8003774:	bf18      	it	ne
 8003776:	2300      	movne	r3, #0
 8003778:	680e      	ldr	r6, [r1, #0]
 800377a:	bf08      	it	eq
 800377c:	694b      	ldreq	r3, [r1, #20]
 800377e:	eba6 0807 	sub.w	r8, r6, r7
 8003782:	600f      	str	r7, [r1, #0]
 8003784:	608b      	str	r3, [r1, #8]
 8003786:	f1b8 0f00 	cmp.w	r8, #0
 800378a:	dd9c      	ble.n	80036c6 <__sflush_r+0x1a>
 800378c:	4643      	mov	r3, r8
 800378e:	463a      	mov	r2, r7
 8003790:	6a21      	ldr	r1, [r4, #32]
 8003792:	4628      	mov	r0, r5
 8003794:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003796:	47b0      	blx	r6
 8003798:	2800      	cmp	r0, #0
 800379a:	dc06      	bgt.n	80037aa <__sflush_r+0xfe>
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	e78e      	b.n	80036c8 <__sflush_r+0x1c>
 80037aa:	4407      	add	r7, r0
 80037ac:	eba8 0800 	sub.w	r8, r8, r0
 80037b0:	e7e9      	b.n	8003786 <__sflush_r+0xda>
 80037b2:	bf00      	nop
 80037b4:	20400001 	.word	0x20400001

080037b8 <_fflush_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	690b      	ldr	r3, [r1, #16]
 80037bc:	4605      	mov	r5, r0
 80037be:	460c      	mov	r4, r1
 80037c0:	b1db      	cbz	r3, 80037fa <_fflush_r+0x42>
 80037c2:	b118      	cbz	r0, 80037cc <_fflush_r+0x14>
 80037c4:	6983      	ldr	r3, [r0, #24]
 80037c6:	b90b      	cbnz	r3, 80037cc <_fflush_r+0x14>
 80037c8:	f000 f860 	bl	800388c <__sinit>
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <_fflush_r+0x48>)
 80037ce:	429c      	cmp	r4, r3
 80037d0:	d109      	bne.n	80037e6 <_fflush_r+0x2e>
 80037d2:	686c      	ldr	r4, [r5, #4]
 80037d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d8:	b17b      	cbz	r3, 80037fa <_fflush_r+0x42>
 80037da:	4621      	mov	r1, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037e2:	f7ff bf63 	b.w	80036ac <__sflush_r>
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <_fflush_r+0x4c>)
 80037e8:	429c      	cmp	r4, r3
 80037ea:	d101      	bne.n	80037f0 <_fflush_r+0x38>
 80037ec:	68ac      	ldr	r4, [r5, #8]
 80037ee:	e7f1      	b.n	80037d4 <_fflush_r+0x1c>
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <_fflush_r+0x50>)
 80037f2:	429c      	cmp	r4, r3
 80037f4:	bf08      	it	eq
 80037f6:	68ec      	ldreq	r4, [r5, #12]
 80037f8:	e7ec      	b.n	80037d4 <_fflush_r+0x1c>
 80037fa:	2000      	movs	r0, #0
 80037fc:	bd38      	pop	{r3, r4, r5, pc}
 80037fe:	bf00      	nop
 8003800:	080041d4 	.word	0x080041d4
 8003804:	080041f4 	.word	0x080041f4
 8003808:	080041b4 	.word	0x080041b4

0800380c <std>:
 800380c:	2300      	movs	r3, #0
 800380e:	b510      	push	{r4, lr}
 8003810:	4604      	mov	r4, r0
 8003812:	e9c0 3300 	strd	r3, r3, [r0]
 8003816:	6083      	str	r3, [r0, #8]
 8003818:	8181      	strh	r1, [r0, #12]
 800381a:	6643      	str	r3, [r0, #100]	; 0x64
 800381c:	81c2      	strh	r2, [r0, #14]
 800381e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003822:	6183      	str	r3, [r0, #24]
 8003824:	4619      	mov	r1, r3
 8003826:	2208      	movs	r2, #8
 8003828:	305c      	adds	r0, #92	; 0x5c
 800382a:	f7ff fb2d 	bl	8002e88 <memset>
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <std+0x38>)
 8003830:	6224      	str	r4, [r4, #32]
 8003832:	6263      	str	r3, [r4, #36]	; 0x24
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <std+0x3c>)
 8003836:	62a3      	str	r3, [r4, #40]	; 0x28
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <std+0x40>)
 800383a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <std+0x44>)
 800383e:	6323      	str	r3, [r4, #48]	; 0x30
 8003840:	bd10      	pop	{r4, pc}
 8003842:	bf00      	nop
 8003844:	08003c79 	.word	0x08003c79
 8003848:	08003c9b 	.word	0x08003c9b
 800384c:	08003cd3 	.word	0x08003cd3
 8003850:	08003cf7 	.word	0x08003cf7

08003854 <_cleanup_r>:
 8003854:	4901      	ldr	r1, [pc, #4]	; (800385c <_cleanup_r+0x8>)
 8003856:	f000 b885 	b.w	8003964 <_fwalk_reent>
 800385a:	bf00      	nop
 800385c:	080037b9 	.word	0x080037b9

08003860 <__sfmoreglue>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	2568      	movs	r5, #104	; 0x68
 8003864:	1e4a      	subs	r2, r1, #1
 8003866:	4355      	muls	r5, r2
 8003868:	460e      	mov	r6, r1
 800386a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800386e:	f000 f955 	bl	8003b1c <_malloc_r>
 8003872:	4604      	mov	r4, r0
 8003874:	b140      	cbz	r0, 8003888 <__sfmoreglue+0x28>
 8003876:	2100      	movs	r1, #0
 8003878:	e9c0 1600 	strd	r1, r6, [r0]
 800387c:	300c      	adds	r0, #12
 800387e:	60a0      	str	r0, [r4, #8]
 8003880:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003884:	f7ff fb00 	bl	8002e88 <memset>
 8003888:	4620      	mov	r0, r4
 800388a:	bd70      	pop	{r4, r5, r6, pc}

0800388c <__sinit>:
 800388c:	6983      	ldr	r3, [r0, #24]
 800388e:	b510      	push	{r4, lr}
 8003890:	4604      	mov	r4, r0
 8003892:	bb33      	cbnz	r3, 80038e2 <__sinit+0x56>
 8003894:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003898:	6503      	str	r3, [r0, #80]	; 0x50
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <__sinit+0x58>)
 800389c:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <__sinit+0x5c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6282      	str	r2, [r0, #40]	; 0x28
 80038a2:	4298      	cmp	r0, r3
 80038a4:	bf04      	itt	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	6183      	streq	r3, [r0, #24]
 80038aa:	f000 f81f 	bl	80038ec <__sfp>
 80038ae:	6060      	str	r0, [r4, #4]
 80038b0:	4620      	mov	r0, r4
 80038b2:	f000 f81b 	bl	80038ec <__sfp>
 80038b6:	60a0      	str	r0, [r4, #8]
 80038b8:	4620      	mov	r0, r4
 80038ba:	f000 f817 	bl	80038ec <__sfp>
 80038be:	2200      	movs	r2, #0
 80038c0:	60e0      	str	r0, [r4, #12]
 80038c2:	2104      	movs	r1, #4
 80038c4:	6860      	ldr	r0, [r4, #4]
 80038c6:	f7ff ffa1 	bl	800380c <std>
 80038ca:	2201      	movs	r2, #1
 80038cc:	2109      	movs	r1, #9
 80038ce:	68a0      	ldr	r0, [r4, #8]
 80038d0:	f7ff ff9c 	bl	800380c <std>
 80038d4:	2202      	movs	r2, #2
 80038d6:	2112      	movs	r1, #18
 80038d8:	68e0      	ldr	r0, [r4, #12]
 80038da:	f7ff ff97 	bl	800380c <std>
 80038de:	2301      	movs	r3, #1
 80038e0:	61a3      	str	r3, [r4, #24]
 80038e2:	bd10      	pop	{r4, pc}
 80038e4:	0800417c 	.word	0x0800417c
 80038e8:	08003855 	.word	0x08003855

080038ec <__sfp>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <__sfp+0x70>)
 80038f0:	4607      	mov	r7, r0
 80038f2:	681e      	ldr	r6, [r3, #0]
 80038f4:	69b3      	ldr	r3, [r6, #24]
 80038f6:	b913      	cbnz	r3, 80038fe <__sfp+0x12>
 80038f8:	4630      	mov	r0, r6
 80038fa:	f7ff ffc7 	bl	800388c <__sinit>
 80038fe:	3648      	adds	r6, #72	; 0x48
 8003900:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003904:	3b01      	subs	r3, #1
 8003906:	d503      	bpl.n	8003910 <__sfp+0x24>
 8003908:	6833      	ldr	r3, [r6, #0]
 800390a:	b133      	cbz	r3, 800391a <__sfp+0x2e>
 800390c:	6836      	ldr	r6, [r6, #0]
 800390e:	e7f7      	b.n	8003900 <__sfp+0x14>
 8003910:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003914:	b16d      	cbz	r5, 8003932 <__sfp+0x46>
 8003916:	3468      	adds	r4, #104	; 0x68
 8003918:	e7f4      	b.n	8003904 <__sfp+0x18>
 800391a:	2104      	movs	r1, #4
 800391c:	4638      	mov	r0, r7
 800391e:	f7ff ff9f 	bl	8003860 <__sfmoreglue>
 8003922:	6030      	str	r0, [r6, #0]
 8003924:	2800      	cmp	r0, #0
 8003926:	d1f1      	bne.n	800390c <__sfp+0x20>
 8003928:	230c      	movs	r3, #12
 800392a:	4604      	mov	r4, r0
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4620      	mov	r0, r4
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <__sfp+0x74>)
 8003934:	6665      	str	r5, [r4, #100]	; 0x64
 8003936:	e9c4 5500 	strd	r5, r5, [r4]
 800393a:	60a5      	str	r5, [r4, #8]
 800393c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003940:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003944:	2208      	movs	r2, #8
 8003946:	4629      	mov	r1, r5
 8003948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800394c:	f7ff fa9c 	bl	8002e88 <memset>
 8003950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003958:	e7e9      	b.n	800392e <__sfp+0x42>
 800395a:	bf00      	nop
 800395c:	0800417c 	.word	0x0800417c
 8003960:	ffff0001 	.word	0xffff0001

08003964 <_fwalk_reent>:
 8003964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003968:	4680      	mov	r8, r0
 800396a:	4689      	mov	r9, r1
 800396c:	2600      	movs	r6, #0
 800396e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003972:	b914      	cbnz	r4, 800397a <_fwalk_reent+0x16>
 8003974:	4630      	mov	r0, r6
 8003976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800397e:	3f01      	subs	r7, #1
 8003980:	d501      	bpl.n	8003986 <_fwalk_reent+0x22>
 8003982:	6824      	ldr	r4, [r4, #0]
 8003984:	e7f5      	b.n	8003972 <_fwalk_reent+0xe>
 8003986:	89ab      	ldrh	r3, [r5, #12]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d907      	bls.n	800399c <_fwalk_reent+0x38>
 800398c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003990:	3301      	adds	r3, #1
 8003992:	d003      	beq.n	800399c <_fwalk_reent+0x38>
 8003994:	4629      	mov	r1, r5
 8003996:	4640      	mov	r0, r8
 8003998:	47c8      	blx	r9
 800399a:	4306      	orrs	r6, r0
 800399c:	3568      	adds	r5, #104	; 0x68
 800399e:	e7ee      	b.n	800397e <_fwalk_reent+0x1a>

080039a0 <__swhatbuf_r>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	460e      	mov	r6, r1
 80039a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a8:	b096      	sub	sp, #88	; 0x58
 80039aa:	2900      	cmp	r1, #0
 80039ac:	4614      	mov	r4, r2
 80039ae:	461d      	mov	r5, r3
 80039b0:	da07      	bge.n	80039c2 <__swhatbuf_r+0x22>
 80039b2:	2300      	movs	r3, #0
 80039b4:	602b      	str	r3, [r5, #0]
 80039b6:	89b3      	ldrh	r3, [r6, #12]
 80039b8:	061a      	lsls	r2, r3, #24
 80039ba:	d410      	bmi.n	80039de <__swhatbuf_r+0x3e>
 80039bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c0:	e00e      	b.n	80039e0 <__swhatbuf_r+0x40>
 80039c2:	466a      	mov	r2, sp
 80039c4:	f000 f9be 	bl	8003d44 <_fstat_r>
 80039c8:	2800      	cmp	r0, #0
 80039ca:	dbf2      	blt.n	80039b2 <__swhatbuf_r+0x12>
 80039cc:	9a01      	ldr	r2, [sp, #4]
 80039ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039d6:	425a      	negs	r2, r3
 80039d8:	415a      	adcs	r2, r3
 80039da:	602a      	str	r2, [r5, #0]
 80039dc:	e7ee      	b.n	80039bc <__swhatbuf_r+0x1c>
 80039de:	2340      	movs	r3, #64	; 0x40
 80039e0:	2000      	movs	r0, #0
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	b016      	add	sp, #88	; 0x58
 80039e6:	bd70      	pop	{r4, r5, r6, pc}

080039e8 <__smakebuf_r>:
 80039e8:	898b      	ldrh	r3, [r1, #12]
 80039ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039ec:	079d      	lsls	r5, r3, #30
 80039ee:	4606      	mov	r6, r0
 80039f0:	460c      	mov	r4, r1
 80039f2:	d507      	bpl.n	8003a04 <__smakebuf_r+0x1c>
 80039f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	6123      	str	r3, [r4, #16]
 80039fc:	2301      	movs	r3, #1
 80039fe:	6163      	str	r3, [r4, #20]
 8003a00:	b002      	add	sp, #8
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	ab01      	add	r3, sp, #4
 8003a06:	466a      	mov	r2, sp
 8003a08:	f7ff ffca 	bl	80039a0 <__swhatbuf_r>
 8003a0c:	9900      	ldr	r1, [sp, #0]
 8003a0e:	4605      	mov	r5, r0
 8003a10:	4630      	mov	r0, r6
 8003a12:	f000 f883 	bl	8003b1c <_malloc_r>
 8003a16:	b948      	cbnz	r0, 8003a2c <__smakebuf_r+0x44>
 8003a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a1c:	059a      	lsls	r2, r3, #22
 8003a1e:	d4ef      	bmi.n	8003a00 <__smakebuf_r+0x18>
 8003a20:	f023 0303 	bic.w	r3, r3, #3
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	e7e3      	b.n	80039f4 <__smakebuf_r+0xc>
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <__smakebuf_r+0x7c>)
 8003a2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	6020      	str	r0, [r4, #0]
 8003a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	9b00      	ldr	r3, [sp, #0]
 8003a3c:	6120      	str	r0, [r4, #16]
 8003a3e:	6163      	str	r3, [r4, #20]
 8003a40:	9b01      	ldr	r3, [sp, #4]
 8003a42:	b15b      	cbz	r3, 8003a5c <__smakebuf_r+0x74>
 8003a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f000 f98d 	bl	8003d68 <_isatty_r>
 8003a4e:	b128      	cbz	r0, 8003a5c <__smakebuf_r+0x74>
 8003a50:	89a3      	ldrh	r3, [r4, #12]
 8003a52:	f023 0303 	bic.w	r3, r3, #3
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	81a3      	strh	r3, [r4, #12]
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	431d      	orrs	r5, r3
 8003a60:	81a5      	strh	r5, [r4, #12]
 8003a62:	e7cd      	b.n	8003a00 <__smakebuf_r+0x18>
 8003a64:	08003855 	.word	0x08003855

08003a68 <memchr>:
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	b2c9      	uxtb	r1, r1
 8003a6c:	4402      	add	r2, r0
 8003a6e:	4290      	cmp	r0, r2
 8003a70:	4603      	mov	r3, r0
 8003a72:	d101      	bne.n	8003a78 <memchr+0x10>
 8003a74:	2300      	movs	r3, #0
 8003a76:	e003      	b.n	8003a80 <memchr+0x18>
 8003a78:	781c      	ldrb	r4, [r3, #0]
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	428c      	cmp	r4, r1
 8003a7e:	d1f6      	bne.n	8003a6e <memchr+0x6>
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd10      	pop	{r4, pc}

08003a84 <_free_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4605      	mov	r5, r0
 8003a88:	2900      	cmp	r1, #0
 8003a8a:	d043      	beq.n	8003b14 <_free_r+0x90>
 8003a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a90:	1f0c      	subs	r4, r1, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bfb8      	it	lt
 8003a96:	18e4      	addlt	r4, r4, r3
 8003a98:	f000 f988 	bl	8003dac <__malloc_lock>
 8003a9c:	4a1e      	ldr	r2, [pc, #120]	; (8003b18 <_free_r+0x94>)
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	b933      	cbnz	r3, 8003ab2 <_free_r+0x2e>
 8003aa4:	6063      	str	r3, [r4, #4]
 8003aa6:	6014      	str	r4, [r2, #0]
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aae:	f000 b97e 	b.w	8003dae <__malloc_unlock>
 8003ab2:	42a3      	cmp	r3, r4
 8003ab4:	d90b      	bls.n	8003ace <_free_r+0x4a>
 8003ab6:	6821      	ldr	r1, [r4, #0]
 8003ab8:	1862      	adds	r2, r4, r1
 8003aba:	4293      	cmp	r3, r2
 8003abc:	bf01      	itttt	eq
 8003abe:	681a      	ldreq	r2, [r3, #0]
 8003ac0:	685b      	ldreq	r3, [r3, #4]
 8003ac2:	1852      	addeq	r2, r2, r1
 8003ac4:	6022      	streq	r2, [r4, #0]
 8003ac6:	6063      	str	r3, [r4, #4]
 8003ac8:	6004      	str	r4, [r0, #0]
 8003aca:	e7ed      	b.n	8003aa8 <_free_r+0x24>
 8003acc:	4613      	mov	r3, r2
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	b10a      	cbz	r2, 8003ad6 <_free_r+0x52>
 8003ad2:	42a2      	cmp	r2, r4
 8003ad4:	d9fa      	bls.n	8003acc <_free_r+0x48>
 8003ad6:	6819      	ldr	r1, [r3, #0]
 8003ad8:	1858      	adds	r0, r3, r1
 8003ada:	42a0      	cmp	r0, r4
 8003adc:	d10b      	bne.n	8003af6 <_free_r+0x72>
 8003ade:	6820      	ldr	r0, [r4, #0]
 8003ae0:	4401      	add	r1, r0
 8003ae2:	1858      	adds	r0, r3, r1
 8003ae4:	4282      	cmp	r2, r0
 8003ae6:	6019      	str	r1, [r3, #0]
 8003ae8:	d1de      	bne.n	8003aa8 <_free_r+0x24>
 8003aea:	6810      	ldr	r0, [r2, #0]
 8003aec:	6852      	ldr	r2, [r2, #4]
 8003aee:	4401      	add	r1, r0
 8003af0:	6019      	str	r1, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	e7d8      	b.n	8003aa8 <_free_r+0x24>
 8003af6:	d902      	bls.n	8003afe <_free_r+0x7a>
 8003af8:	230c      	movs	r3, #12
 8003afa:	602b      	str	r3, [r5, #0]
 8003afc:	e7d4      	b.n	8003aa8 <_free_r+0x24>
 8003afe:	6820      	ldr	r0, [r4, #0]
 8003b00:	1821      	adds	r1, r4, r0
 8003b02:	428a      	cmp	r2, r1
 8003b04:	bf01      	itttt	eq
 8003b06:	6811      	ldreq	r1, [r2, #0]
 8003b08:	6852      	ldreq	r2, [r2, #4]
 8003b0a:	1809      	addeq	r1, r1, r0
 8003b0c:	6021      	streq	r1, [r4, #0]
 8003b0e:	6062      	str	r2, [r4, #4]
 8003b10:	605c      	str	r4, [r3, #4]
 8003b12:	e7c9      	b.n	8003aa8 <_free_r+0x24>
 8003b14:	bd38      	pop	{r3, r4, r5, pc}
 8003b16:	bf00      	nop
 8003b18:	2000009c 	.word	0x2000009c

08003b1c <_malloc_r>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	1ccd      	adds	r5, r1, #3
 8003b20:	f025 0503 	bic.w	r5, r5, #3
 8003b24:	3508      	adds	r5, #8
 8003b26:	2d0c      	cmp	r5, #12
 8003b28:	bf38      	it	cc
 8003b2a:	250c      	movcc	r5, #12
 8003b2c:	2d00      	cmp	r5, #0
 8003b2e:	4606      	mov	r6, r0
 8003b30:	db01      	blt.n	8003b36 <_malloc_r+0x1a>
 8003b32:	42a9      	cmp	r1, r5
 8003b34:	d903      	bls.n	8003b3e <_malloc_r+0x22>
 8003b36:	230c      	movs	r3, #12
 8003b38:	6033      	str	r3, [r6, #0]
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	bd70      	pop	{r4, r5, r6, pc}
 8003b3e:	f000 f935 	bl	8003dac <__malloc_lock>
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <_malloc_r+0xac>)
 8003b44:	6814      	ldr	r4, [r2, #0]
 8003b46:	4621      	mov	r1, r4
 8003b48:	b991      	cbnz	r1, 8003b70 <_malloc_r+0x54>
 8003b4a:	4c20      	ldr	r4, [pc, #128]	; (8003bcc <_malloc_r+0xb0>)
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	b91b      	cbnz	r3, 8003b58 <_malloc_r+0x3c>
 8003b50:	4630      	mov	r0, r6
 8003b52:	f000 f83d 	bl	8003bd0 <_sbrk_r>
 8003b56:	6020      	str	r0, [r4, #0]
 8003b58:	4629      	mov	r1, r5
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f000 f838 	bl	8003bd0 <_sbrk_r>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d124      	bne.n	8003bae <_malloc_r+0x92>
 8003b64:	230c      	movs	r3, #12
 8003b66:	4630      	mov	r0, r6
 8003b68:	6033      	str	r3, [r6, #0]
 8003b6a:	f000 f920 	bl	8003dae <__malloc_unlock>
 8003b6e:	e7e4      	b.n	8003b3a <_malloc_r+0x1e>
 8003b70:	680b      	ldr	r3, [r1, #0]
 8003b72:	1b5b      	subs	r3, r3, r5
 8003b74:	d418      	bmi.n	8003ba8 <_malloc_r+0x8c>
 8003b76:	2b0b      	cmp	r3, #11
 8003b78:	d90f      	bls.n	8003b9a <_malloc_r+0x7e>
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	18cc      	adds	r4, r1, r3
 8003b7e:	50cd      	str	r5, [r1, r3]
 8003b80:	4630      	mov	r0, r6
 8003b82:	f000 f914 	bl	8003dae <__malloc_unlock>
 8003b86:	f104 000b 	add.w	r0, r4, #11
 8003b8a:	1d23      	adds	r3, r4, #4
 8003b8c:	f020 0007 	bic.w	r0, r0, #7
 8003b90:	1ac3      	subs	r3, r0, r3
 8003b92:	d0d3      	beq.n	8003b3c <_malloc_r+0x20>
 8003b94:	425a      	negs	r2, r3
 8003b96:	50e2      	str	r2, [r4, r3]
 8003b98:	e7d0      	b.n	8003b3c <_malloc_r+0x20>
 8003b9a:	684b      	ldr	r3, [r1, #4]
 8003b9c:	428c      	cmp	r4, r1
 8003b9e:	bf16      	itet	ne
 8003ba0:	6063      	strne	r3, [r4, #4]
 8003ba2:	6013      	streq	r3, [r2, #0]
 8003ba4:	460c      	movne	r4, r1
 8003ba6:	e7eb      	b.n	8003b80 <_malloc_r+0x64>
 8003ba8:	460c      	mov	r4, r1
 8003baa:	6849      	ldr	r1, [r1, #4]
 8003bac:	e7cc      	b.n	8003b48 <_malloc_r+0x2c>
 8003bae:	1cc4      	adds	r4, r0, #3
 8003bb0:	f024 0403 	bic.w	r4, r4, #3
 8003bb4:	42a0      	cmp	r0, r4
 8003bb6:	d005      	beq.n	8003bc4 <_malloc_r+0xa8>
 8003bb8:	1a21      	subs	r1, r4, r0
 8003bba:	4630      	mov	r0, r6
 8003bbc:	f000 f808 	bl	8003bd0 <_sbrk_r>
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d0cf      	beq.n	8003b64 <_malloc_r+0x48>
 8003bc4:	6025      	str	r5, [r4, #0]
 8003bc6:	e7db      	b.n	8003b80 <_malloc_r+0x64>
 8003bc8:	2000009c 	.word	0x2000009c
 8003bcc:	200000a0 	.word	0x200000a0

08003bd0 <_sbrk_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	4c05      	ldr	r4, [pc, #20]	; (8003bec <_sbrk_r+0x1c>)
 8003bd6:	4605      	mov	r5, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	f7fd f826 	bl	8000c2c <_sbrk>
 8003be0:	1c43      	adds	r3, r0, #1
 8003be2:	d102      	bne.n	8003bea <_sbrk_r+0x1a>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	b103      	cbz	r3, 8003bea <_sbrk_r+0x1a>
 8003be8:	602b      	str	r3, [r5, #0]
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	2000013c 	.word	0x2000013c

08003bf0 <_raise_r>:
 8003bf0:	291f      	cmp	r1, #31
 8003bf2:	b538      	push	{r3, r4, r5, lr}
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	460d      	mov	r5, r1
 8003bf8:	d904      	bls.n	8003c04 <_raise_r+0x14>
 8003bfa:	2316      	movs	r3, #22
 8003bfc:	6003      	str	r3, [r0, #0]
 8003bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c06:	b112      	cbz	r2, 8003c0e <_raise_r+0x1e>
 8003c08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c0c:	b94b      	cbnz	r3, 8003c22 <_raise_r+0x32>
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f000 f830 	bl	8003c74 <_getpid_r>
 8003c14:	462a      	mov	r2, r5
 8003c16:	4601      	mov	r1, r0
 8003c18:	4620      	mov	r0, r4
 8003c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c1e:	f000 b817 	b.w	8003c50 <_kill_r>
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d00a      	beq.n	8003c3c <_raise_r+0x4c>
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	d103      	bne.n	8003c32 <_raise_r+0x42>
 8003c2a:	2316      	movs	r3, #22
 8003c2c:	6003      	str	r3, [r0, #0]
 8003c2e:	2001      	movs	r0, #1
 8003c30:	e7e7      	b.n	8003c02 <_raise_r+0x12>
 8003c32:	2400      	movs	r4, #0
 8003c34:	4628      	mov	r0, r5
 8003c36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c3a:	4798      	blx	r3
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	e7e0      	b.n	8003c02 <_raise_r+0x12>

08003c40 <raise>:
 8003c40:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <raise+0xc>)
 8003c42:	4601      	mov	r1, r0
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	f7ff bfd3 	b.w	8003bf0 <_raise_r>
 8003c4a:	bf00      	nop
 8003c4c:	2000000c 	.word	0x2000000c

08003c50 <_kill_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	2300      	movs	r3, #0
 8003c54:	4c06      	ldr	r4, [pc, #24]	; (8003c70 <_kill_r+0x20>)
 8003c56:	4605      	mov	r5, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	f7fc ff7e 	bl	8000b5e <_kill>
 8003c62:	1c43      	adds	r3, r0, #1
 8003c64:	d102      	bne.n	8003c6c <_kill_r+0x1c>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	b103      	cbz	r3, 8003c6c <_kill_r+0x1c>
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	bd38      	pop	{r3, r4, r5, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000013c 	.word	0x2000013c

08003c74 <_getpid_r>:
 8003c74:	f7fc bf6c 	b.w	8000b50 <_getpid>

08003c78 <__sread>:
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c80:	f000 f896 	bl	8003db0 <_read_r>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	bfab      	itete	ge
 8003c88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8003c8c:	181b      	addge	r3, r3, r0
 8003c8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c92:	bfac      	ite	ge
 8003c94:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c96:	81a3      	strhlt	r3, [r4, #12]
 8003c98:	bd10      	pop	{r4, pc}

08003c9a <__swrite>:
 8003c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9e:	461f      	mov	r7, r3
 8003ca0:	898b      	ldrh	r3, [r1, #12]
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	05db      	lsls	r3, r3, #23
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	4616      	mov	r6, r2
 8003caa:	d505      	bpl.n	8003cb8 <__swrite+0x1e>
 8003cac:	2302      	movs	r3, #2
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	f000 f868 	bl	8003d88 <_lseek_r>
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	4632      	mov	r2, r6
 8003cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cc0:	81a3      	strh	r3, [r4, #12]
 8003cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	4628      	mov	r0, r5
 8003cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cce:	f000 b817 	b.w	8003d00 <_write_r>

08003cd2 <__sseek>:
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cda:	f000 f855 	bl	8003d88 <_lseek_r>
 8003cde:	1c43      	adds	r3, r0, #1
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	bf15      	itete	ne
 8003ce4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cee:	81a3      	strheq	r3, [r4, #12]
 8003cf0:	bf18      	it	ne
 8003cf2:	81a3      	strhne	r3, [r4, #12]
 8003cf4:	bd10      	pop	{r4, pc}

08003cf6 <__sclose>:
 8003cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cfa:	f000 b813 	b.w	8003d24 <_close_r>
	...

08003d00 <_write_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4605      	mov	r5, r0
 8003d04:	4608      	mov	r0, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4c05      	ldr	r4, [pc, #20]	; (8003d20 <_write_r+0x20>)
 8003d0c:	6022      	str	r2, [r4, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f7fc fb68 	bl	80003e4 <_write>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d102      	bne.n	8003d1e <_write_r+0x1e>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	b103      	cbz	r3, 8003d1e <_write_r+0x1e>
 8003d1c:	602b      	str	r3, [r5, #0]
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	2000013c 	.word	0x2000013c

08003d24 <_close_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	2300      	movs	r3, #0
 8003d28:	4c05      	ldr	r4, [pc, #20]	; (8003d40 <_close_r+0x1c>)
 8003d2a:	4605      	mov	r5, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	f7fc ff4c 	bl	8000bcc <_close>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_close_r+0x1a>
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_close_r+0x1a>
 8003d3c:	602b      	str	r3, [r5, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	2000013c 	.word	0x2000013c

08003d44 <_fstat_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	2300      	movs	r3, #0
 8003d48:	4c06      	ldr	r4, [pc, #24]	; (8003d64 <_fstat_r+0x20>)
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	f7fc ff46 	bl	8000be2 <_fstat>
 8003d56:	1c43      	adds	r3, r0, #1
 8003d58:	d102      	bne.n	8003d60 <_fstat_r+0x1c>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	b103      	cbz	r3, 8003d60 <_fstat_r+0x1c>
 8003d5e:	602b      	str	r3, [r5, #0]
 8003d60:	bd38      	pop	{r3, r4, r5, pc}
 8003d62:	bf00      	nop
 8003d64:	2000013c 	.word	0x2000013c

08003d68 <_isatty_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	4c05      	ldr	r4, [pc, #20]	; (8003d84 <_isatty_r+0x1c>)
 8003d6e:	4605      	mov	r5, r0
 8003d70:	4608      	mov	r0, r1
 8003d72:	6023      	str	r3, [r4, #0]
 8003d74:	f7fc ff44 	bl	8000c00 <_isatty>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d102      	bne.n	8003d82 <_isatty_r+0x1a>
 8003d7c:	6823      	ldr	r3, [r4, #0]
 8003d7e:	b103      	cbz	r3, 8003d82 <_isatty_r+0x1a>
 8003d80:	602b      	str	r3, [r5, #0]
 8003d82:	bd38      	pop	{r3, r4, r5, pc}
 8003d84:	2000013c 	.word	0x2000013c

08003d88 <_lseek_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4605      	mov	r5, r0
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	2200      	movs	r2, #0
 8003d92:	4c05      	ldr	r4, [pc, #20]	; (8003da8 <_lseek_r+0x20>)
 8003d94:	6022      	str	r2, [r4, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7fc ff3c 	bl	8000c14 <_lseek>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_lseek_r+0x1e>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_lseek_r+0x1e>
 8003da4:	602b      	str	r3, [r5, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	2000013c 	.word	0x2000013c

08003dac <__malloc_lock>:
 8003dac:	4770      	bx	lr

08003dae <__malloc_unlock>:
 8003dae:	4770      	bx	lr

08003db0 <_read_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4605      	mov	r5, r0
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	2200      	movs	r2, #0
 8003dba:	4c05      	ldr	r4, [pc, #20]	; (8003dd0 <_read_r+0x20>)
 8003dbc:	6022      	str	r2, [r4, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f7fc fee7 	bl	8000b92 <_read>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_read_r+0x1e>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_read_r+0x1e>
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	2000013c 	.word	0x2000013c

08003dd4 <_init>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr

08003de0 <_fini>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	bf00      	nop
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr
